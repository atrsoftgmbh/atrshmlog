
;; Function uint64_t atrshmlog_get_tsc_par_x86_64_gnu() (null)
;; enabled by -tree-original


{
  uint32_t hi;
  uint32_t lo;

    uint32_t hi;
    uint32_t lo;
  <<cleanup_point __asm__ __volatile__("rdtscp":"=a" lo, "=d" hi:)>>;
  return <retval> = (uint64_t) hi << 32 | (uint64_t) lo;
}


;; Function uint64_t atrshmlog_get_tsc_fence_x86_64_gnu() (null)
;; enabled by -tree-original


{
  uint32_t hi;
  uint32_t lo;

    uint32_t hi;
    uint32_t lo;
  <<cleanup_point __asm__ __volatile__("lfence"::)>>;
  <<cleanup_point __asm__ __volatile__("rdtsc":"=a" lo, "=d" hi:)>>;
  return <retval> = (uint64_t) hi << 32 | (uint64_t) lo;
}


;; Function uint64_t atrshmlog_get_tsc_x86_64_gnu() (null)
;; enabled by -tree-original


{
  uint32_t hi;
  uint32_t lo;

    uint32_t hi;
    uint32_t lo;
  <<cleanup_point __asm__ __volatile__("rdtsc":"=a" lo, "=d" hi:)>>;
  return <retval> = (uint64_t) hi << 32 | (uint64_t) lo;
}


;; Function uint64_t atrshmlog_get_tsc_null_x86_64_gnu() (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function atrshmlog_time_t atrshmlog_get_clicktime() (null)
;; enabled by -tree-original


if (<<cleanup_point (int) atrshmlog_clock_id == 3>>)
  {
    <<cleanup_point return <retval> = atrshmlog_get_tsc_par_x86_64_gnu ()>>;
  }
if (<<cleanup_point (int) atrshmlog_clock_id == 2>>)
  {
    <<cleanup_point return <retval> = atrshmlog_get_tsc_fence_x86_64_gnu ()>>;
  }
if (<<cleanup_point (int) atrshmlog_clock_id == 1>>)
  {
    <<cleanup_point return <retval> = atrshmlog_get_tsc_x86_64_gnu ()>>;
  }
<<cleanup_point return <retval> = atrshmlog_get_tsc_null_x86_64_gnu ()>>;


;; Function wint_t btowc(int) (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  <<cleanup_point return <retval> = __builtin_constant_p (__c) == 0 || (unsigned int) __c > 127 ? __btowc_alias (__c) : (wint_t) __c>>
   >>>;


;; Function int wctob(wint_t) (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  <<cleanup_point return <retval> = __builtin_constant_p (__wc) == 0 || __wc > 127 ? __wctob_alias (__wc) : (int) __wc>>
   >>>;


;; Function size_t mbrlen(const char*, size_t, mbstate_t*) (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  <<cleanup_point return <retval> = __ps != 0B ? mbrtowc (0B, __s, __n, __ps) : __mbrlen (__s, __n, 0B)>>
   >>>;


;; Function std::exception::exception() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct exception *) this)->_vptr.exception = &_ZTVSt9exception + 16) >>>>>;
  }
   >>>;


;; Function std::bad_exception::bad_exception() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::exception::exception (&((struct bad_exception *) this)->D.3345) >>>>>;
    try
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct bad_exception *) this)->D.3345._vptr.exception = &_ZTVSt13bad_exception + 16) >>>>>;
      }
    catch
      {
        std::exception::~exception (&((struct bad_exception *) this)->D.3345);
      }
  }
   >>>;


;; Function std::__exception_ptr::exception_ptr::exception_ptr(std::nullptr_t) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct exception_ptr *) this)->_M_exception_object = 0B) >>>>>;
  }
   >>>;


;; Function std::__exception_ptr::exception_ptr::exception_ptr(std::__exception_ptr::exception_ptr&&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct exception_ptr *) this)->_M_exception_object = __o->_M_exception_object) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__o->_M_exception_object = 0B) >>>>>;
  }
   >>>;


;; Function std::__exception_ptr::exception_ptr& std::__exception_ptr::exception_ptr::operator=(std::__exception_ptr::exception_ptr&&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__exception_ptr::exception_ptr::swap (&TARGET_EXPR <D.3465, <<< Unknown tree: aggr_init_expr
  5
  __comp_ctor 
  D.3465
  (struct exception_ptr *) <<< Unknown tree: void_cst >>>
  (struct exception_ptr &) (struct exception_ptr *) NON_LVALUE_EXPR <__o> >>>>, (struct exception_ptr &) (struct exception_ptr *) this) >>>>>;
  return <retval> = (struct exception_ptr &) (struct exception_ptr *) this;
   >>>;


;; Function std::__exception_ptr::exception_ptr::operator bool() const (null)
;; enabled by -tree-original


return <retval> = (void *) ((const struct exception_ptr *) this)->_M_exception_object != 0B;


;; Function void std::__exception_ptr::swap(std::__exception_ptr::exception_ptr&, std::__exception_ptr::exception_ptr&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::__exception_ptr::exception_ptr::swap ((struct exception_ptr *) __lhs, (struct exception_ptr &) (struct exception_ptr *) __rhs) >>>>>;


;; Function std::nested_exception::nested_exception() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct nested_exception *) this)->_vptr.nested_exception = &_ZTVSt16nested_exception + 16) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct nested_exception *) this)->_M_ptr = TARGET_EXPR <D.3540, <<< Unknown tree: aggr_init_expr
  3
  current_exception
  D.3540 >>>>) >>>>>;
    try
      {
        
      }
    catch
      {
        std::__exception_ptr::exception_ptr::~exception_ptr (&((struct nested_exception *) this)->_M_ptr);
      }
  }
   >>>;


;; Function void std::nested_exception::rethrow_nested() const (null)
;; enabled by -tree-original


if (<<cleanup_point std::__exception_ptr::exception_ptr::operator bool (&((const struct nested_exception *) this)->_M_ptr)>>)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::rethrow_exception (&TARGET_EXPR <D.3545, <<< Unknown tree: aggr_init_expr
  5
  __comp_ctor 
  D.3545
  (struct exception_ptr *) <<< Unknown tree: void_cst >>>
  (const struct exception_ptr &) &((const struct nested_exception *) this)->_M_ptr >>>>) >>>>>;
  }
<<cleanup_point <<< Unknown tree: expr_stmt
  std::terminate () >>>>>;


;; Function std::__exception_ptr::exception_ptr std::nested_exception::nested_ptr() const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return *<retval> = TARGET_EXPR <D.3547, <<< Unknown tree: aggr_init_expr
  5
  __comp_ctor 
  D.3547
  (struct exception_ptr *) <<< Unknown tree: void_cst >>>
  (const struct exception_ptr &) &((const struct nested_exception *) this)->_M_ptr >>>>>>
   >>>;


;; Function bool __gnu_cxx::__is_null_pointer(std::nullptr_t) (null)
;; enabled by -tree-original


return <retval> = 1;


;; Function constexpr __gnu_cxx::__ops::_Iter_less_iter __gnu_cxx::__ops::__iter_less_iter() (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.8547, {}>>>;


;; Function __gnu_cxx::__ops::_Iter_less_val __gnu_cxx::__ops::__iter_less_val() (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.8594, {}>>>;


;; Function __gnu_cxx::__ops::_Iter_less_val __gnu_cxx::__ops::__iter_comp_val(__gnu_cxx::__ops::_Iter_less_iter) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.8607, {}>>>;


;; Function __gnu_cxx::__ops::_Val_less_iter __gnu_cxx::__ops::__val_less_iter() (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.8645, {}>>>;


;; Function __gnu_cxx::__ops::_Val_less_iter __gnu_cxx::__ops::__val_comp_iter(__gnu_cxx::__ops::_Iter_less_iter) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.8658, {}>>>;


;; Function __gnu_cxx::__ops::_Iter_equal_to_iter __gnu_cxx::__ops::__iter_equal_to_iter() (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.8696, {}>>>;


;; Function __gnu_cxx::__ops::_Iter_equal_to_val __gnu_cxx::__ops::__iter_equal_to_val() (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.8743, {}>>>;


;; Function __gnu_cxx::__ops::_Iter_equal_to_val __gnu_cxx::__ops::__iter_comp_val(__gnu_cxx::__ops::_Iter_equal_to_iter) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.8756, {}>>>;


;; Function constexpr int std::__lg(int) (null)
;; enabled by -tree-original


return <retval> = (int) (((unsigned int) 4 * 8 - (unsigned int) __builtin_clz ((unsigned int) __n)) + 4294967295);


;; Function constexpr unsigned int std::__lg(unsigned int) (null)
;; enabled by -tree-original


return <retval> = ((unsigned int) 4 * 8 - (unsigned int) __builtin_clz (__n)) + 4294967295;


;; Function constexpr long int std::__lg(long int) (null)
;; enabled by -tree-original


return <retval> = (long int) ((8 * 8 - (long unsigned int) __builtin_clzl ((long unsigned int) __n)) + 18446744073709551615);


;; Function constexpr long unsigned int std::__lg(long unsigned int) (null)
;; enabled by -tree-original


return <retval> = (8 * 8 - (long unsigned int) __builtin_clzl (__n)) + 18446744073709551615;


;; Function constexpr long long int std::__lg(long long int) (null)
;; enabled by -tree-original


return <retval> = (long long int) ((8 * 8 - (long unsigned int) __builtin_clzll ((long long unsigned int) __n)) + 18446744073709551615);


;; Function constexpr long long unsigned int std::__lg(long long unsigned int) (null)
;; enabled by -tree-original


return <retval> = (long long unsigned int) ((8 * 8 - (long unsigned int) __builtin_clzll (__n)) + 18446744073709551615);


;; Function static void std::char_traits<char>::assign(std::char_traits<char>::char_type&, const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__c1 = (char_type) *__c2) >>>>>
   >>>;


;; Function static constexpr bool std::char_traits<char>::eq(const char_type&, const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (signed char) *__c1 == (signed char) *__c2
   >>>;


;; Function static constexpr bool std::char_traits<char>::lt(const char_type&, const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (unsigned char) *__c1 < (unsigned char) *__c2
   >>>;


;; Function static int std::char_traits<char>::compare(const char_type*, const char_type*, std::size_t) (null)
;; enabled by -tree-original


if (__n == 0)
  {
    return <retval> = 0;
  }
return <retval> = __builtin_memcmp ((const void *) __s1, (const void *) __s2, __n);


;; Function static std::size_t std::char_traits<char>::length(const char_type*) (null)
;; enabled by -tree-original


return <retval> = __builtin_strlen (__s);


;; Function static const char_type* std::char_traits<char>::find(const char_type*, std::size_t, const char_type&) (null)
;; enabled by -tree-original


if (__n == 0)
  {
    return <retval> = 0B;
  }
return <retval> = (const char_type *) __builtin_memchr ((const void *) __s, (int) *__a, __n);


;; Function static std::char_traits<char>::char_type* std::char_traits<char>::move(std::char_traits<char>::char_type*, const char_type*, std::size_t) (null)
;; enabled by -tree-original


if (__n == 0)
  {
    return <retval> = __s1;
  }
<<cleanup_point return <retval> = (char_type *) __builtin_memmove ((void *) __s1, (const void *) __s2, __n)>>;


;; Function static std::char_traits<char>::char_type* std::char_traits<char>::copy(std::char_traits<char>::char_type*, const char_type*, std::size_t) (null)
;; enabled by -tree-original


if (__n == 0)
  {
    return <retval> = __s1;
  }
<<cleanup_point return <retval> = (char_type *) __builtin_memcpy ((void *) __s1, (const void *) __s2, __n)>>;


;; Function static std::char_traits<char>::char_type* std::char_traits<char>::assign(std::char_traits<char>::char_type*, std::size_t, std::char_traits<char>::char_type) (null)
;; enabled by -tree-original


if (__n == 0)
  {
    return <retval> = __s;
  }
<<cleanup_point return <retval> = (char_type *) __builtin_memset ((void *) __s, (int) __a, __n)>>;


;; Function static constexpr std::char_traits<char>::char_type std::char_traits<char>::to_char_type(const int_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (char_type) *__c
   >>>;


;; Function static constexpr std::char_traits<char>::int_type std::char_traits<char>::to_int_type(const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (int_type) (unsigned char) *__c
   >>>;


;; Function static constexpr bool std::char_traits<char>::eq_int_type(const int_type&, const int_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (int) *__c1 == (int) *__c2
   >>>;


;; Function static constexpr std::char_traits<char>::int_type std::char_traits<char>::eof() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = -1
   >>>;


;; Function static constexpr std::char_traits<char>::int_type std::char_traits<char>::not_eof(const int_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (int) *__c != std::char_traits<char>::eof () ? (int_type) *__c : 0>>
   >>>;


;; Function static void std::char_traits<wchar_t>::assign(std::char_traits<wchar_t>::char_type&, const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__c1 = (char_type) *__c2) >>>>>
   >>>;


;; Function static constexpr bool std::char_traits<wchar_t>::eq(const char_type&, const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (int) *__c1 == (int) *__c2
   >>>;


;; Function static constexpr bool std::char_traits<wchar_t>::lt(const char_type&, const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (int) *__c1 < (int) *__c2
   >>>;


;; Function static int std::char_traits<wchar_t>::compare(const char_type*, const char_type*, std::size_t) (null)
;; enabled by -tree-original


if (__n == 0)
  {
    return <retval> = 0;
  }
return <retval> = wmemcmp (__s1, __s2, __n);


;; Function static std::size_t std::char_traits<wchar_t>::length(const char_type*) (null)
;; enabled by -tree-original


return <retval> = wcslen (__s);


;; Function static const char_type* std::char_traits<wchar_t>::find(const char_type*, std::size_t, const char_type&) (null)
;; enabled by -tree-original


if (__n == 0)
  {
    return <retval> = 0B;
  }
return <retval> = (const char_type *) wmemchr (__s, (char_type) *__a, __n);


;; Function static std::char_traits<wchar_t>::char_type* std::char_traits<wchar_t>::move(std::char_traits<wchar_t>::char_type*, const char_type*, std::size_t) (null)
;; enabled by -tree-original


if (__n == 0)
  {
    return <retval> = __s1;
  }
<<cleanup_point return <retval> = (char_type *) wmemmove (__s1, __s2, __n)>>;


;; Function static std::char_traits<wchar_t>::char_type* std::char_traits<wchar_t>::copy(std::char_traits<wchar_t>::char_type*, const char_type*, std::size_t) (null)
;; enabled by -tree-original


if (__n == 0)
  {
    return <retval> = __s1;
  }
<<cleanup_point return <retval> = (char_type *) wmemcpy (__s1, __s2, __n)>>;


;; Function static std::char_traits<wchar_t>::char_type* std::char_traits<wchar_t>::assign(std::char_traits<wchar_t>::char_type*, std::size_t, std::char_traits<wchar_t>::char_type) (null)
;; enabled by -tree-original


if (__n == 0)
  {
    return <retval> = __s;
  }
<<cleanup_point return <retval> = (char_type *) wmemset (__s, __a, __n)>>;


;; Function static constexpr std::char_traits<wchar_t>::char_type std::char_traits<wchar_t>::to_char_type(const int_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (char_type) *__c
   >>>;


;; Function static constexpr std::char_traits<wchar_t>::int_type std::char_traits<wchar_t>::to_int_type(const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (int_type) *__c
   >>>;


;; Function static constexpr bool std::char_traits<wchar_t>::eq_int_type(const int_type&, const int_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (unsigned int) *__c1 == (unsigned int) *__c2
   >>>;


;; Function static constexpr std::char_traits<wchar_t>::int_type std::char_traits<wchar_t>::eof() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 4294967295
   >>>;


;; Function static constexpr std::char_traits<wchar_t>::int_type std::char_traits<wchar_t>::not_eof(const int_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::char_traits<wchar_t>::eq_int_type ((const int_type &) (const int_type *) __c, (const int_type &) &TARGET_EXPR <D.10076, std::char_traits<wchar_t>::eof ()>) ? 0 : (int_type) *__c>>
   >>>;


;; Function static void std::char_traits<char16_t>::assign(std::char_traits<char16_t>::char_type&, const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__c1 = (char_type) *__c2) >>>>>
   >>>;


;; Function static constexpr bool std::char_traits<char16_t>::eq(const char_type&, const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = *__c1 == *__c2
   >>>;


;; Function static constexpr bool std::char_traits<char16_t>::lt(const char_type&, const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = *__c1 < *__c2
   >>>;


;; Function static int std::char_traits<char16_t>::compare(const char_type*, const char_type*, std::size_t) (null)
;; enabled by -tree-original


{
  {
    size_t __i = 0;

    <<cleanup_point     size_t __i = 0;>>;
    while (1)
      {
        if (__i >= __n) goto <D.10162>;
        if (<<cleanup_point std::char_traits<char16_t>::lt ((const char_type &) (__s1 + (sizetype) (__i * 2)), (const char_type &) (__s2 + (sizetype) (__i * 2)))>>)
          {
            return <retval> = -1;
          }
        else
          {
            if (<<cleanup_point std::char_traits<char16_t>::lt ((const char_type &) (__s2 + (sizetype) (__i * 2)), (const char_type &) (__s1 + (sizetype) (__i * 2)))>>)
              {
                return <retval> = 1;
              }
          }
        <<cleanup_point (void)  ++__i>>;
      }
    <D.10162>:;
  }
  return <retval> = 0;
}


;; Function static std::size_t std::char_traits<char16_t>::length(const char_type*) (null)
;; enabled by -tree-original


{
  size_t __i = 0;

  <<cleanup_point   size_t __i = 0;>>;
  while (1)
    {
      if (<<cleanup_point !std::char_traits<char16_t>::eq ((const char_type &) (__s + (sizetype) (__i * 2)), (const char_type &) &TARGET_EXPR <D.10166, 0>)>>) (void) 0; else goto <D.10167>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void)  ++__i >>>>>;
    }
  <D.10167>:;
  return <retval> = __i;
}


;; Function static const char_type* std::char_traits<char16_t>::find(const char_type*, std::size_t, const char_type&) (null)
;; enabled by -tree-original


{
  {
    size_t __i = 0;

    <<cleanup_point     size_t __i = 0;>>;
    while (1)
      {
        if (__i >= __n) goto <D.10171>;
        if (<<cleanup_point std::char_traits<char16_t>::eq ((const char_type &) (__s + (sizetype) (__i * 2)), (const char_type &) (const char_type *) __a)>>)
          {
            return <retval> = __s + (sizetype) (__i * 2);
          }
        <<cleanup_point (void)  ++__i>>;
      }
    <D.10171>:;
  }
  return <retval> = 0B;
}


;; Function static std::char_traits<char16_t>::char_type* std::char_traits<char16_t>::move(std::char_traits<char16_t>::char_type*, const char_type*, std::size_t) (null)
;; enabled by -tree-original


if (__n == 0)
  {
    return <retval> = __s1;
  }
<<cleanup_point return <retval> = (char_type *) __builtin_memmove ((void *) __s1, (const void *) __s2, 2 * __n)>>;


;; Function static std::char_traits<char16_t>::char_type* std::char_traits<char16_t>::copy(std::char_traits<char16_t>::char_type*, const char_type*, std::size_t) (null)
;; enabled by -tree-original


if (__n == 0)
  {
    return <retval> = __s1;
  }
<<cleanup_point return <retval> = (char_type *) __builtin_memcpy ((void *) __s1, (const void *) __s2, 2 * __n)>>;


;; Function static std::char_traits<char16_t>::char_type* std::char_traits<char16_t>::assign(std::char_traits<char16_t>::char_type*, std::size_t, std::char_traits<char16_t>::char_type) (null)
;; enabled by -tree-original


{
  {
    size_t __i = 0;

    <<cleanup_point     size_t __i = 0;>>;
    while (1)
      {
        if (__i >= __n) goto <D.10177>;
        <<cleanup_point <<< Unknown tree: expr_stmt
  std::char_traits<char16_t>::assign ((char_type &) (__s + (sizetype) (__i * 2)), (const char_type &) (const char_type *) &__a) >>>>>;
        <<cleanup_point (void)  ++__i>>;
      }
    <D.10177>:;
  }
  return <retval> = __s;
}


;; Function static constexpr std::char_traits<char16_t>::char_type std::char_traits<char16_t>::to_char_type(const int_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (char_type) *__c
   >>>;


;; Function static constexpr std::char_traits<char16_t>::int_type std::char_traits<char16_t>::to_int_type(const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (int_type) *__c
   >>>;


;; Function static constexpr bool std::char_traits<char16_t>::eq_int_type(const int_type&, const int_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (short unsigned int) *__c1 == (short unsigned int) *__c2
   >>>;


;; Function static constexpr std::char_traits<char16_t>::int_type std::char_traits<char16_t>::eof() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 65535
   >>>;


;; Function static constexpr std::char_traits<char16_t>::int_type std::char_traits<char16_t>::not_eof(const int_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::char_traits<char16_t>::eq_int_type ((const int_type &) (const int_type *) __c, (const int_type &) &TARGET_EXPR <D.10184, std::char_traits<char16_t>::eof ()>) ? 0 : (int_type) *__c>>
   >>>;


;; Function static void std::char_traits<char32_t>::assign(std::char_traits<char32_t>::char_type&, const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__c1 = (char_type) *__c2) >>>>>
   >>>;


;; Function static constexpr bool std::char_traits<char32_t>::eq(const char_type&, const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (unsigned int) *__c1 == (unsigned int) *__c2
   >>>;


;; Function static constexpr bool std::char_traits<char32_t>::lt(const char_type&, const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (unsigned int) *__c1 < (unsigned int) *__c2
   >>>;


;; Function static int std::char_traits<char32_t>::compare(const char_type*, const char_type*, std::size_t) (null)
;; enabled by -tree-original


{
  {
    size_t __i = 0;

    <<cleanup_point     size_t __i = 0;>>;
    while (1)
      {
        if (__i >= __n) goto <D.10248>;
        if (<<cleanup_point std::char_traits<char32_t>::lt ((const char_type &) (__s1 + (sizetype) (__i * 4)), (const char_type &) (__s2 + (sizetype) (__i * 4)))>>)
          {
            return <retval> = -1;
          }
        else
          {
            if (<<cleanup_point std::char_traits<char32_t>::lt ((const char_type &) (__s2 + (sizetype) (__i * 4)), (const char_type &) (__s1 + (sizetype) (__i * 4)))>>)
              {
                return <retval> = 1;
              }
          }
        <<cleanup_point (void)  ++__i>>;
      }
    <D.10248>:;
  }
  return <retval> = 0;
}


;; Function static std::size_t std::char_traits<char32_t>::length(const char_type*) (null)
;; enabled by -tree-original


{
  size_t __i = 0;

  <<cleanup_point   size_t __i = 0;>>;
  while (1)
    {
      if (<<cleanup_point !std::char_traits<char32_t>::eq ((const char_type &) (__s + (sizetype) (__i * 4)), (const char_type &) &TARGET_EXPR <D.10252, 0>)>>) (void) 0; else goto <D.10253>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void)  ++__i >>>>>;
    }
  <D.10253>:;
  return <retval> = __i;
}


;; Function static const char_type* std::char_traits<char32_t>::find(const char_type*, std::size_t, const char_type&) (null)
;; enabled by -tree-original


{
  {
    size_t __i = 0;

    <<cleanup_point     size_t __i = 0;>>;
    while (1)
      {
        if (__i >= __n) goto <D.10257>;
        if (<<cleanup_point std::char_traits<char32_t>::eq ((const char_type &) (__s + (sizetype) (__i * 4)), (const char_type &) (const char_type *) __a)>>)
          {
            return <retval> = __s + (sizetype) (__i * 4);
          }
        <<cleanup_point (void)  ++__i>>;
      }
    <D.10257>:;
  }
  return <retval> = 0B;
}


;; Function static std::char_traits<char32_t>::char_type* std::char_traits<char32_t>::move(std::char_traits<char32_t>::char_type*, const char_type*, std::size_t) (null)
;; enabled by -tree-original


if (__n == 0)
  {
    return <retval> = __s1;
  }
<<cleanup_point return <retval> = (char_type *) __builtin_memmove ((void *) __s1, (const void *) __s2, 4 * __n)>>;


;; Function static std::char_traits<char32_t>::char_type* std::char_traits<char32_t>::copy(std::char_traits<char32_t>::char_type*, const char_type*, std::size_t) (null)
;; enabled by -tree-original


if (__n == 0)
  {
    return <retval> = __s1;
  }
<<cleanup_point return <retval> = (char_type *) __builtin_memcpy ((void *) __s1, (const void *) __s2, 4 * __n)>>;


;; Function static std::char_traits<char32_t>::char_type* std::char_traits<char32_t>::assign(std::char_traits<char32_t>::char_type*, std::size_t, std::char_traits<char32_t>::char_type) (null)
;; enabled by -tree-original


{
  {
    size_t __i = 0;

    <<cleanup_point     size_t __i = 0;>>;
    while (1)
      {
        if (__i >= __n) goto <D.10263>;
        <<cleanup_point <<< Unknown tree: expr_stmt
  std::char_traits<char32_t>::assign ((char_type &) (__s + (sizetype) (__i * 4)), (const char_type &) (const char_type *) &__a) >>>>>;
        <<cleanup_point (void)  ++__i>>;
      }
    <D.10263>:;
  }
  return <retval> = __s;
}


;; Function static constexpr std::char_traits<char32_t>::char_type std::char_traits<char32_t>::to_char_type(const int_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (char_type) *__c
   >>>;


;; Function static constexpr std::char_traits<char32_t>::int_type std::char_traits<char32_t>::to_int_type(const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (int_type) *__c
   >>>;


;; Function static constexpr bool std::char_traits<char32_t>::eq_int_type(const int_type&, const int_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (unsigned int) *__c1 == (unsigned int) *__c2
   >>>;


;; Function static constexpr std::char_traits<char32_t>::int_type std::char_traits<char32_t>::eof() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 4294967295
   >>>;


;; Function static constexpr std::char_traits<char32_t>::int_type std::char_traits<char32_t>::not_eof(const int_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::char_traits<char32_t>::eq_int_type ((const int_type &) (const int_type *) __c, (const int_type &) &TARGET_EXPR <D.10270, std::char_traits<char32_t>::eof ()>) ? 0 : (int_type) *__c>>
   >>>;


;; Function int std::__convert_from_v(__locale_struct* const&, char*, int, const char*, ...) (null)
;; enabled by -tree-original


{
  struct __locale_struct * __old;
  struct  __args[1];
  const int __ret;

    struct __locale_struct * __old;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__old = __gnu_cxx::__uselocale ((struct __locale_struct *) *__cloc)) >>>>>;
    struct  __args[1];
  <<cleanup_point <<< Unknown tree: expr_stmt
  __builtin_va_start ((struct  *) &__args, __fmt) >>>>>;
    const int __ret;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__ret = __builtin_vsnprintf (__out, (long unsigned int) __size, __fmt, (struct  *) &__args)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __builtin_va_end ((struct  *) &__args) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) __gnu_cxx::__uselocale (__old) >>>>>;
  return <retval> = (int) __ret;
}


;; Function unsigned int __bswap_32(unsigned int) (null)
;; enabled by -tree-original


return <retval> = __builtin_bswap32 (__bsx);


;; Function __uint64_t __bswap_64(__uint64_t) (null)
;; enabled by -tree-original


return <retval> = __builtin_bswap64 (__bsx);


;; Function __pthread_cleanup_class::__pthread_cleanup_class(void (*)(void*), void*) (null)
;; enabled by -tree-original


{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct __pthread_cleanup_class *) this)->__cancel_routine = __fct) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct __pthread_cleanup_class *) this)->__cancel_arg = __arg) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct __pthread_cleanup_class *) this)->__do_it = 1) >>>>>;
}


;; Function __pthread_cleanup_class::~__pthread_cleanup_class() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (((struct __pthread_cleanup_class *) this)->__do_it != 0)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  ((struct __pthread_cleanup_class *) this)->__cancel_routine (((struct __pthread_cleanup_class *) this)->__cancel_arg) >>>>>;
          }
      }
    finally
      {
        *(struct 
        {
          void (*<Tcd>) (void *) __cancel_routine;
          void * __cancel_arg;
          int __do_it;
          int __cancel_type;
        } &) this = {CLOBBER};
      }
  }
  <D.11249>:;
   >>>;


;; Function void __pthread_cleanup_class::__setdoit(int) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct __pthread_cleanup_class *) this)->__do_it = __newval) >>>>>;


;; Function void __pthread_cleanup_class::__defer() (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) pthread_setcanceltype (0, &((struct __pthread_cleanup_class *) this)->__cancel_type) >>>>>;


;; Function void __pthread_cleanup_class::__restore() const (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) pthread_setcanceltype ((int) ((const struct __pthread_cleanup_class *) this)->__cancel_type, 0B) >>>>>;


;; Function int pthread_equal(pthread_t, pthread_t) (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  return <retval> = __thread1 == __thread2
   >>>;


;; Function int __gthread_active_p() (null)
;; enabled by -tree-original


{
  static void * const __gthread_active_ptr = (void *) __gthrw___pthread_key_create;

  <<cleanup_point   static void * const __gthread_active_ptr = (void *) __gthrw___pthread_key_create;>>;
  return <retval> = (void *) __gthread_active_ptr != 0B;
}


;; Function int __gthread_create(__gthread_t*, void* (*)(void*), void*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gthrw_pthread_create (__threadid, 0B, __func, __args)>>;


;; Function int __gthread_join(__gthread_t, void**) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gthrw_pthread_join (__threadid, __value_ptr)>>;


;; Function int __gthread_detach(__gthread_t) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gthrw_pthread_detach (__threadid)>>;


;; Function int __gthread_equal(__gthread_t, __gthread_t) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gthrw_pthread_equal (__t1, __t2)>>;


;; Function __gthread_t __gthread_self() (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gthrw_pthread_self ()>>;


;; Function int __gthread_yield() (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gthrw_sched_yield ()>>;


;; Function int __gthread_once(__gthread_once_t*, void (*)()) (null)
;; enabled by -tree-original


if (<<cleanup_point __gthread_active_p () != 0>>)
  {
    <<cleanup_point return <retval> = __gthrw_pthread_once (__once, __func)>>;
  }
else
  {
    return <retval> = -1;
  }


;; Function int __gthread_key_create(__gthread_key_t*, void (*)(void*)) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gthrw_pthread_key_create (__key, __dtor)>>;


;; Function int __gthread_key_delete(__gthread_key_t) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gthrw_pthread_key_delete (__key)>>;


;; Function void* __gthread_getspecific(__gthread_key_t) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gthrw_pthread_getspecific (__key)>>;


;; Function int __gthread_setspecific(__gthread_key_t, const void*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gthrw_pthread_setspecific (__key, __ptr)>>;


;; Function void __gthread_mutex_init_function(__gthread_mutex_t*) (null)
;; enabled by -tree-original


if (<<cleanup_point __gthread_active_p () != 0>>)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) __gthrw_pthread_mutex_init (__mutex, 0B) >>>>>;
  }


;; Function int __gthread_mutex_destroy(__gthread_mutex_t*) (null)
;; enabled by -tree-original


if (<<cleanup_point __gthread_active_p () != 0>>)
  {
    <<cleanup_point return <retval> = __gthrw_pthread_mutex_destroy (__mutex)>>;
  }
else
  {
    return <retval> = 0;
  }


;; Function int __gthread_mutex_lock(__gthread_mutex_t*) (null)
;; enabled by -tree-original


if (<<cleanup_point __gthread_active_p () != 0>>)
  {
    <<cleanup_point return <retval> = __gthrw_pthread_mutex_lock (__mutex)>>;
  }
else
  {
    return <retval> = 0;
  }


;; Function int __gthread_mutex_trylock(__gthread_mutex_t*) (null)
;; enabled by -tree-original


if (<<cleanup_point __gthread_active_p () != 0>>)
  {
    <<cleanup_point return <retval> = __gthrw_pthread_mutex_trylock (__mutex)>>;
  }
else
  {
    return <retval> = 0;
  }


;; Function int __gthread_mutex_timedlock(__gthread_mutex_t*, const __gthread_time_t*) (null)
;; enabled by -tree-original


if (<<cleanup_point __gthread_active_p () != 0>>)
  {
    <<cleanup_point return <retval> = __gthrw_pthread_mutex_timedlock (__mutex, __abs_timeout)>>;
  }
else
  {
    return <retval> = 0;
  }


;; Function int __gthread_mutex_unlock(__gthread_mutex_t*) (null)
;; enabled by -tree-original


if (<<cleanup_point __gthread_active_p () != 0>>)
  {
    <<cleanup_point return <retval> = __gthrw_pthread_mutex_unlock (__mutex)>>;
  }
else
  {
    return <retval> = 0;
  }


;; Function int __gthread_recursive_mutex_lock(__gthread_recursive_mutex_t*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gthread_mutex_lock (__mutex)>>;


;; Function int __gthread_recursive_mutex_trylock(__gthread_recursive_mutex_t*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gthread_mutex_trylock (__mutex)>>;


;; Function int __gthread_recursive_mutex_timedlock(__gthread_recursive_mutex_t*, const __gthread_time_t*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gthread_mutex_timedlock (__mutex, __abs_timeout)>>;


;; Function int __gthread_recursive_mutex_unlock(__gthread_recursive_mutex_t*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gthread_mutex_unlock (__mutex)>>;


;; Function int __gthread_recursive_mutex_destroy(__gthread_recursive_mutex_t*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gthread_mutex_destroy (__mutex)>>;


;; Function int __gthread_cond_broadcast(__gthread_cond_t*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gthrw_pthread_cond_broadcast (__cond)>>;


;; Function int __gthread_cond_signal(__gthread_cond_t*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gthrw_pthread_cond_signal (__cond)>>;


;; Function int __gthread_cond_wait(__gthread_cond_t*, __gthread_mutex_t*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gthrw_pthread_cond_wait (__cond, __mutex)>>;


;; Function int __gthread_cond_timedwait(__gthread_cond_t*, __gthread_mutex_t*, const __gthread_time_t*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gthrw_pthread_cond_timedwait (__cond, __mutex, __abs_timeout)>>;


;; Function int __gthread_cond_wait_recursive(__gthread_cond_t*, __gthread_recursive_mutex_t*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gthread_cond_wait (__cond, __mutex)>>;


;; Function int __gthread_cond_destroy(__gthread_cond_t*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gthrw_pthread_cond_destroy (__cond)>>;


;; Function _Atomic_word __gnu_cxx::__exchange_and_add(volatile _Atomic_word*, int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (int) __atomic_fetch_add_4 ((volatile void *) __mem, (unsigned int) __val, 4)>>;


;; Function void __gnu_cxx::__atomic_add(volatile _Atomic_word*, int) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (int) __atomic_fetch_add_4 ((volatile void *) __mem, (unsigned int) __val, 4) >>>>>;


;; Function _Atomic_word __gnu_cxx::__exchange_and_add_single(_Atomic_word*, int) (null)
;; enabled by -tree-original


{
  _Atomic_word __result = *__mem;

    _Atomic_word __result = *__mem;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__mem = *__mem + __val) >>>>>;
  return <retval> = __result;
}


;; Function void __gnu_cxx::__atomic_add_single(_Atomic_word*, int) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__mem = *__mem + __val) >>>>>;


;; Function _Atomic_word __gnu_cxx::__exchange_and_add_dispatch(_Atomic_word*, int) (null)
;; enabled by -tree-original


if (<<cleanup_point __gthread_active_p () != 0>>)
  {
    <<cleanup_point return <retval> = __gnu_cxx::__exchange_and_add ((volatile _Atomic_word *) __mem, __val)>>;
  }
else
  {
    <<cleanup_point return <retval> = __gnu_cxx::__exchange_and_add_single (__mem, __val)>>;
  }


;; Function void __gnu_cxx::__atomic_add_dispatch(_Atomic_word*, int) (null)
;; enabled by -tree-original


if (<<cleanup_point __gthread_active_p () != 0>>)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__atomic_add ((volatile _Atomic_word *) __mem, __val) >>>>>;
  }
else
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__atomic_add_single (__mem, __val) >>>>>;
  }


;; Function std::bad_alloc::bad_alloc() (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::exception::exception (&((struct bad_alloc *) this)->D.11672) >>>>>;
    try
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct bad_alloc *) this)->D.11672._vptr.exception = &_ZTVSt9bad_alloc + 16) >>>>>;
      }
    catch
      {
        std::exception::~exception (&((struct bad_alloc *) this)->D.11672);
      }
  }
   >>>;


;; Function std::bad_array_new_length::bad_array_new_length() (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::bad_alloc::bad_alloc (&((struct bad_array_new_length *) this)->D.11701) >>>>>;
    try
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct bad_array_new_length *) this)->D.11701.D.11672._vptr.exception = &_ZTVSt20bad_array_new_length + 16) >>>>>;
      }
    catch
      {
        std::bad_alloc::~bad_alloc (&((struct bad_array_new_length *) this)->D.11701);
      }
  }
   >>>;


;; Function void* operator new(std::size_t, void*) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = __p
   >>>;


;; Function void* operator new [](std::size_t, void*) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = __p
   >>>;


;; Function void operator delete(void*, void*) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  
   >>>;


;; Function void operator delete [](void*, void*) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  
   >>>;


;; Function int atoi(const char*) (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  <<cleanup_point return <retval> = (int) strtol (__nptr, 0B, 10)>>
   >>>;


;; Function long int atol(const char*) (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  <<cleanup_point return <retval> = strtol (__nptr, 0B, 10)>>
   >>>;


;; Function long long int atoll(const char*) (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  <<cleanup_point return <retval> = strtoll (__nptr, 0B, 10)>>
   >>>;


;; Function unsigned int gnu_dev_major(long long unsigned int) (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  return <retval> = (unsigned int) (__dev >> 8) & 4095 | (unsigned int) (__dev >> 32) & 4294963200
   >>>;


;; Function unsigned int gnu_dev_minor(long long unsigned int) (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  return <retval> = (unsigned int) __dev & 255 | (unsigned int) (__dev >> 12) & 4294967040
   >>>;


;; Function long long unsigned int gnu_dev_makedev(unsigned int, unsigned int) (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  return <retval> = ((long long unsigned int) (__minor & 255 | (__major & 4095) << 8) | ((long long unsigned int) __minor & 4294967040) << 12) | ((long long unsigned int) __major & 4294963200) << 32
   >>>;


;; Function void* bsearch(const void*, const void*, size_t, size_t, __compar_fn_t) (null)
;; enabled by -tree-original


{
  size_t __l;
  size_t __u;
  size_t __idx;
  const void * __p;
  int __comparison;

    size_t __l;
    size_t __u;
    size_t __idx;
    const void * __p;
    int __comparison;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__l = 0) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__u = __nmemb) >>>>>;
  while (1)
    {
      if (__l >= __u) goto <D.16380>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__idx = (__l + __u) / 2) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__p = __base + (sizetype) (__idx * __size)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__comparison = __compar (__key, __p)) >>>>>;
      if (__comparison < 0)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__u = __idx) >>>>>;
        }
      else
        {
          if (__comparison > 0)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__l = __idx + 1) >>>>>;
            }
          else
            {
              return <retval> = (void *) __p;
            }
        }
    }
  <D.16380>:;
  return <retval> = 0B;
}


;; Function double atof(const char*) (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  <<cleanup_point return <retval> = strtod (__nptr, 0B)>>
   >>>;


;; Function long int std::abs(long int) (null)
;; enabled by -tree-original


return <retval> = ABS_EXPR <__i>;


;; Function ldiv_t std::div(long int, long int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.16548, ldiv (__i, __j)>>>;


;; Function long long int std::abs(long long int) (null)
;; enabled by -tree-original


return <retval> = ABS_EXPR <__x>;


;; Function lldiv_t __gnu_cxx::div(long long int, long long int) (null)
;; enabled by -tree-original


{
  struct lldiv_t __q;

    struct lldiv_t __q;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__q.quot = __n / __d) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__q.rem = __n % __d) >>>>>;
  <<cleanup_point return <retval> = TARGET_EXPR <D.16626, __q>>>;
}


;; Function int vprintf(const char*, __va_list_tag*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = vfprintf (stdout, __fmt, __arg)>>;


;; Function int getchar() (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _IO_getc (stdin)>>;


;; Function int fgetc_unlocked(FILE*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_expect ((*(struct FILE * &) &__fp)->_IO_read_ptr >= (*(struct FILE * &) &__fp)->_IO_read_end, 0) != 0 ? __uflow (__fp) : (int) *(unsigned char *) (*(struct FILE * &) &__fp)->_IO_read_ptr++ >>;


;; Function int getc_unlocked(FILE*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_expect ((*(struct FILE * &) &__fp)->_IO_read_ptr >= (*(struct FILE * &) &__fp)->_IO_read_end, 0) != 0 ? __uflow (__fp) : (int) *(unsigned char *) (*(struct FILE * &) &__fp)->_IO_read_ptr++ >>;


;; Function int getchar_unlocked() (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_expect ((*(struct _IO_FILE * &) &stdin)->_IO_read_ptr >= (*(struct _IO_FILE * &) &stdin)->_IO_read_end, 0) != 0 ? __uflow (stdin) : (int) *(unsigned char *) (*(struct _IO_FILE * &) &stdin)->_IO_read_ptr++ >>;


;; Function int putchar(int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _IO_putc (__c, stdout)>>;


;; Function int fputc_unlocked(int, FILE*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_expect ((*(struct FILE * &) &__stream)->_IO_write_ptr >= (*(struct FILE * &) &__stream)->_IO_write_end, 0) != 0 ? __overflow (__stream, *(int &) &__c & 255) : (int) (unsigned char) (*(*(struct FILE * &) &__stream)->_IO_write_ptr++  = (char) *(int &) &__c)>>;


;; Function int putc_unlocked(int, FILE*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_expect ((*(struct FILE * &) &__stream)->_IO_write_ptr >= (*(struct FILE * &) &__stream)->_IO_write_end, 0) != 0 ? __overflow (__stream, *(int &) &__c & 255) : (int) (unsigned char) (*(*(struct FILE * &) &__stream)->_IO_write_ptr++  = (char) *(int &) &__c)>>;


;; Function int putchar_unlocked(int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_expect ((*(struct _IO_FILE * &) &stdout)->_IO_write_ptr >= (*(struct _IO_FILE * &) &stdout)->_IO_write_end, 0) != 0 ? __overflow (stdout, *(int &) &__c & 255) : (int) (unsigned char) (*(*(struct _IO_FILE * &) &stdout)->_IO_write_ptr++  = (char) *(int &) &__c)>>;


;; Function __ssize_t getline(char**, size_t*, FILE*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __getdelim (__lineptr, __n, 10, __stream)>>;


;; Function int feof_unlocked(FILE*) (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  return <retval> = ((*(struct FILE * &) &__stream)->_flags & 16) != 0
   >>>;


;; Function int ferror_unlocked(FILE*) (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  return <retval> = ((*(struct FILE * &) &__stream)->_flags & 32) != 0
   >>>;


;; Function int std::__cxx11::stoi(const string&, std::size_t*, int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gnu_cxx::__stoa<long int, int, char, int> (strtol, (const char *) "stoi", std::__cxx11::basic_string<char>::c_str ((const struct string *) __str), __idx, __base)>>;


;; Function long int std::__cxx11::stol(const string&, std::size_t*, int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gnu_cxx::__stoa<long int, long int, char, int> (strtol, (const char *) "stol", std::__cxx11::basic_string<char>::c_str ((const struct string *) __str), __idx, __base)>>;


;; Function long unsigned int std::__cxx11::stoul(const string&, std::size_t*, int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gnu_cxx::__stoa<long unsigned int, long unsigned int, char, int> (strtoul, (const char *) "stoul", std::__cxx11::basic_string<char>::c_str ((const struct string *) __str), __idx, __base)>>;


;; Function long long int std::__cxx11::stoll(const string&, std::size_t*, int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gnu_cxx::__stoa<long long int, long long int, char, int> (strtoll, (const char *) "stoll", std::__cxx11::basic_string<char>::c_str ((const struct string *) __str), __idx, __base)>>;


;; Function long long unsigned int std::__cxx11::stoull(const string&, std::size_t*, int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gnu_cxx::__stoa<long long unsigned int, long long unsigned int, char, int> (strtoull, (const char *) "stoull", std::__cxx11::basic_string<char>::c_str ((const struct string *) __str), __idx, __base)>>;


;; Function float std::__cxx11::stof(const string&, std::size_t*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gnu_cxx::__stoa<float, float, char> (strtof, (const char *) "stof", std::__cxx11::basic_string<char>::c_str ((const struct string *) __str), __idx)>>;


;; Function double std::__cxx11::stod(const string&, std::size_t*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gnu_cxx::__stoa<double, double, char> (strtod, (const char *) "stod", std::__cxx11::basic_string<char>::c_str ((const struct string *) __str), __idx)>>;


;; Function long double std::__cxx11::stold(const string&, std::size_t*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gnu_cxx::__stoa<long double, long double, char> (strtold, (const char *) "stold", std::__cxx11::basic_string<char>::c_str ((const struct string *) __str), __idx)>>;


;; Function std::__cxx11::string std::__cxx11::to_string(int) (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.18413, <<< Unknown tree: aggr_init_expr
  7
  __to_xstring
  D.18413
  vsnprintf
  4 * 4
  (const char *) "%d"
  __val >>>>>>;


;; Function std::__cxx11::string std::__cxx11::to_string(unsigned int) (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.18479, <<< Unknown tree: aggr_init_expr
  7
  __to_xstring
  D.18479
  vsnprintf
  4 * 4
  (const char *) "%u"
  __val >>>>>>;


;; Function std::__cxx11::string std::__cxx11::to_string(long int) (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.18483, <<< Unknown tree: aggr_init_expr
  7
  __to_xstring
  D.18483
  vsnprintf
  8 * 4
  (const char *) "%ld"
  __val >>>>>>;


;; Function std::__cxx11::string std::__cxx11::to_string(long unsigned int) (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.18487, <<< Unknown tree: aggr_init_expr
  7
  __to_xstring
  D.18487
  vsnprintf
  8 * 4
  (const char *) "%lu"
  __val >>>>>>;


;; Function std::__cxx11::string std::__cxx11::to_string(long long int) (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.18491, <<< Unknown tree: aggr_init_expr
  7
  __to_xstring
  D.18491
  vsnprintf
  8 * 4
  (const char *) "%lld"
  __val >>>>>>;


;; Function std::__cxx11::string std::__cxx11::to_string(long long unsigned int) (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.18495, <<< Unknown tree: aggr_init_expr
  7
  __to_xstring
  D.18495
  vsnprintf
  8 * 4
  (const char *) "%llu"
  __val >>>>>>;


;; Function std::__cxx11::string std::__cxx11::to_string(float) (null)
;; enabled by -tree-original


{
  const int __n = 58;

  <<cleanup_point   const int __n = 58;>>;
  <<cleanup_point return *<retval> = TARGET_EXPR <D.18526, <<< Unknown tree: aggr_init_expr
  7
  __to_xstring
  D.18526
  vsnprintf
  58
  (const char *) "%f"
  (double) __val >>>>>>;
}


;; Function std::__cxx11::string std::__cxx11::to_string(double) (null)
;; enabled by -tree-original


{
  const int __n = 328;

  <<cleanup_point   const int __n = 328;>>;
  <<cleanup_point return *<retval> = TARGET_EXPR <D.18557, <<< Unknown tree: aggr_init_expr
  7
  __to_xstring
  D.18557
  vsnprintf
  328
  (const char *) "%f"
  __val >>>>>>;
}


;; Function std::__cxx11::string std::__cxx11::to_string(long double) (null)
;; enabled by -tree-original


{
  const int __n = 4952;

  <<cleanup_point   const int __n = 4952;>>;
  <<cleanup_point return *<retval> = TARGET_EXPR <D.18588, <<< Unknown tree: aggr_init_expr
  7
  __to_xstring
  D.18588
  vsnprintf
  4952
  (const char *) "%Lf"
  __val >>>>>>;
}


;; Function int std::__cxx11::stoi(const wstring&, std::size_t*, int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gnu_cxx::__stoa<long int, int, wchar_t, int> (wcstol, (const char *) "stoi", std::__cxx11::basic_string<wchar_t>::c_str ((const struct wstring *) __str), __idx, __base)>>;


;; Function long int std::__cxx11::stol(const wstring&, std::size_t*, int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gnu_cxx::__stoa<long int, long int, wchar_t, int> (wcstol, (const char *) "stol", std::__cxx11::basic_string<wchar_t>::c_str ((const struct wstring *) __str), __idx, __base)>>;


;; Function long unsigned int std::__cxx11::stoul(const wstring&, std::size_t*, int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gnu_cxx::__stoa<long unsigned int, long unsigned int, wchar_t, int> (wcstoul, (const char *) "stoul", std::__cxx11::basic_string<wchar_t>::c_str ((const struct wstring *) __str), __idx, __base)>>;


;; Function long long int std::__cxx11::stoll(const wstring&, std::size_t*, int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gnu_cxx::__stoa<long long int, long long int, wchar_t, int> (wcstoll, (const char *) "stoll", std::__cxx11::basic_string<wchar_t>::c_str ((const struct wstring *) __str), __idx, __base)>>;


;; Function long long unsigned int std::__cxx11::stoull(const wstring&, std::size_t*, int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gnu_cxx::__stoa<long long unsigned int, long long unsigned int, wchar_t, int> (wcstoull, (const char *) "stoull", std::__cxx11::basic_string<wchar_t>::c_str ((const struct wstring *) __str), __idx, __base)>>;


;; Function float std::__cxx11::stof(const wstring&, std::size_t*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gnu_cxx::__stoa<float, float, wchar_t> (wcstof, (const char *) "stof", std::__cxx11::basic_string<wchar_t>::c_str ((const struct wstring *) __str), __idx)>>;


;; Function double std::__cxx11::stod(const wstring&, std::size_t*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gnu_cxx::__stoa<double, double, wchar_t> (wcstod, (const char *) "stod", std::__cxx11::basic_string<wchar_t>::c_str ((const struct wstring *) __str), __idx)>>;


;; Function long double std::__cxx11::stold(const wstring&, std::size_t*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gnu_cxx::__stoa<long double, long double, wchar_t> (wcstold, (const char *) "stold", std::__cxx11::basic_string<wchar_t>::c_str ((const struct wstring *) __str), __idx)>>;


;; Function std::__cxx11::wstring std::__cxx11::to_wstring(int) (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.19782, <<< Unknown tree: aggr_init_expr
  7
  __to_xstring
  D.19782
  vswprintf
  4 * 4
  (const wchar_t *) "%"
  __val >>>>>>;


;; Function std::__cxx11::wstring std::__cxx11::to_wstring(unsigned int) (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.19848, <<< Unknown tree: aggr_init_expr
  7
  __to_xstring
  D.19848
  vswprintf
  4 * 4
  (const wchar_t *) "%"
  __val >>>>>>;


;; Function std::__cxx11::wstring std::__cxx11::to_wstring(long int) (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.19852, <<< Unknown tree: aggr_init_expr
  7
  __to_xstring
  D.19852
  vswprintf
  8 * 4
  (const wchar_t *) "%"
  __val >>>>>>;


;; Function std::__cxx11::wstring std::__cxx11::to_wstring(long unsigned int) (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.19856, <<< Unknown tree: aggr_init_expr
  7
  __to_xstring
  D.19856
  vswprintf
  8 * 4
  (const wchar_t *) "%"
  __val >>>>>>;


;; Function std::__cxx11::wstring std::__cxx11::to_wstring(long long int) (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.19860, <<< Unknown tree: aggr_init_expr
  7
  __to_xstring
  D.19860
  vswprintf
  8 * 4
  (const wchar_t *) "%"
  __val >>>>>>;


;; Function std::__cxx11::wstring std::__cxx11::to_wstring(long long unsigned int) (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.19864, <<< Unknown tree: aggr_init_expr
  7
  __to_xstring
  D.19864
  vswprintf
  8 * 4
  (const wchar_t *) "%"
  __val >>>>>>;


;; Function std::__cxx11::wstring std::__cxx11::to_wstring(float) (null)
;; enabled by -tree-original


{
  const int __n = 58;

  <<cleanup_point   const int __n = 58;>>;
  <<cleanup_point return *<retval> = TARGET_EXPR <D.19869, <<< Unknown tree: aggr_init_expr
  7
  __to_xstring
  D.19869
  vswprintf
  58
  (const wchar_t *) "%"
  (double) __val >>>>>>;
}


;; Function std::__cxx11::wstring std::__cxx11::to_wstring(double) (null)
;; enabled by -tree-original


{
  const int __n = 328;

  <<cleanup_point   const int __n = 328;>>;
  <<cleanup_point return *<retval> = TARGET_EXPR <D.19874, <<< Unknown tree: aggr_init_expr
  7
  __to_xstring
  D.19874
  vswprintf
  328
  (const wchar_t *) "%"
  __val >>>>>>;
}


;; Function std::__cxx11::wstring std::__cxx11::to_wstring(long double) (null)
;; enabled by -tree-original


{
  const int __n = 4952;

  <<cleanup_point   const int __n = 4952;>>;
  <<cleanup_point return *<retval> = TARGET_EXPR <D.19879, <<< Unknown tree: aggr_init_expr
  7
  __to_xstring
  D.19879
  vswprintf
  4952
  (const wchar_t *) "%"
  __val >>>>>>;
}


;; Function std::size_t std::hash<bool>::operator()(bool) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) __val
   >>>;


;; Function std::size_t std::hash<char>::operator()(char) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) __val
   >>>;


;; Function std::size_t std::hash<signed char>::operator()(signed char) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) __val
   >>>;


;; Function std::size_t std::hash<unsigned char>::operator()(unsigned char) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) __val
   >>>;


;; Function std::size_t std::hash<wchar_t>::operator()(wchar_t) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) __val
   >>>;


;; Function std::size_t std::hash<char16_t>::operator()(char16_t) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) __val
   >>>;


;; Function std::size_t std::hash<char32_t>::operator()(char32_t) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) __val
   >>>;


;; Function std::size_t std::hash<short int>::operator()(short int) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) __val
   >>>;


;; Function std::size_t std::hash<int>::operator()(int) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) __val
   >>>;


;; Function std::size_t std::hash<long int>::operator()(long int) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) __val
   >>>;


;; Function std::size_t std::hash<long long int>::operator()(long long int) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) __val
   >>>;


;; Function std::size_t std::hash<short unsigned int>::operator()(short unsigned int) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) __val
   >>>;


;; Function std::size_t std::hash<unsigned int>::operator()(unsigned int) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) __val
   >>>;


;; Function std::size_t std::hash<long unsigned int>::operator()(long unsigned int) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = __val
   >>>;


;; Function std::size_t std::hash<long long unsigned int>::operator()(long long unsigned int) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) __val
   >>>;


;; Function static std::size_t std::_Hash_impl::hash(const void*, std::size_t, std::size_t) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::_Hash_bytes (__ptr, __clength, __seed)>>;


;; Function static std::size_t std::_Fnv_hash_impl::hash(const void*, std::size_t, std::size_t) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::_Fnv_hash_bytes (__ptr, __clength, __seed)>>;


;; Function std::size_t std::hash<float>::operator()(float) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = __val != 0.0 ? std::_Hash_impl::hash<float> ((const float &) (const float *) &__val) : 0>>
   >>>;


;; Function std::size_t std::hash<double>::operator()(double) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = __val != 0.0 ? std::_Hash_impl::hash<double> ((const double &) (const double *) &__val) : 0>>
   >>>;


;; Function std::size_t std::hash<std::__cxx11::basic_string<char> >::operator()(const string&) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::_Hash_impl::hash ((const void *) std::__cxx11::basic_string<char>::data ((const struct string *) __s), std::__cxx11::basic_string<char>::length ((const struct string *) __s), 3339675911)>>
   >>>;


;; Function std::size_t std::hash<std::__cxx11::basic_string<wchar_t> >::operator()(const wstring&) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::_Hash_impl::hash ((const void *) std::__cxx11::basic_string<wchar_t>::data ((const struct wstring *) __s), std::__cxx11::basic_string<wchar_t>::length ((const struct wstring *) __s) * 4, 3339675911)>>
   >>>;


;; Function std::size_t std::hash<std::__cxx11::basic_string<char16_t> >::operator()(const u16string&) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::_Hash_impl::hash ((const void *) std::__cxx11::basic_string<char16_t>::data ((const struct u16string *) __s), std::__cxx11::basic_string<char16_t>::length ((const struct u16string *) __s) * 2, 3339675911)>>
   >>>;


;; Function std::size_t std::hash<std::__cxx11::basic_string<char32_t> >::operator()(const u32string&) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::_Hash_impl::hash ((const void *) std::__cxx11::basic_string<char32_t>::data ((const struct u32string *) __s), std::__cxx11::basic_string<char32_t>::length ((const struct u32string *) __s) * 4, 3339675911)>>
   >>>;


;; Function std::__cxx11::basic_string<char> std::literals::string_literals::operator""s(const char*, std::size_t) (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.22764, <<< Unknown tree: aggr_init_expr
  7
  __comp_ctor 
  D.22764
  (struct basic_string *) <<< Unknown tree: void_cst >>>
  __str
  __len
  (const struct allocator &) (const struct allocator *) &TARGET_EXPR <D.22763, <<< Unknown tree: aggr_init_expr
  4
  __comp_ctor 
  D.22763
  (struct allocator *) <<< Unknown tree: void_cst >>> >>>> >>>>>>;


;; Function std::__cxx11::basic_string<wchar_t> std::literals::string_literals::operator""s(const wchar_t*, std::size_t) (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.22771, <<< Unknown tree: aggr_init_expr
  7
  __comp_ctor 
  D.22771
  (struct basic_string *) <<< Unknown tree: void_cst >>>
  __str
  __len
  (const struct allocator &) (const struct allocator *) &TARGET_EXPR <D.22770, <<< Unknown tree: aggr_init_expr
  4
  __comp_ctor 
  D.22770
  (struct allocator *) <<< Unknown tree: void_cst >>> >>>> >>>>>>;


;; Function std::__cxx11::basic_string<char16_t> std::literals::string_literals::operator""s(const char16_t*, std::size_t) (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.22831, <<< Unknown tree: aggr_init_expr
  7
  __comp_ctor 
  D.22831
  (struct basic_string *) <<< Unknown tree: void_cst >>>
  __str
  __len
  (const struct allocator &) (const struct allocator *) &TARGET_EXPR <D.22830, <<< Unknown tree: aggr_init_expr
  4
  __comp_ctor 
  D.22830
  (struct allocator *) <<< Unknown tree: void_cst >>> >>>> >>>>>>;


;; Function std::__cxx11::basic_string<char32_t> std::literals::string_literals::operator""s(const char32_t*, std::size_t) (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.22900, <<< Unknown tree: aggr_init_expr
  7
  __comp_ctor 
  D.22900
  (struct basic_string *) <<< Unknown tree: void_cst >>>
  __str
  __len
  (const struct allocator &) (const struct allocator *) &TARGET_EXPR <D.22899, <<< Unknown tree: aggr_init_expr
  4
  __comp_ctor 
  D.22899
  (struct allocator *) <<< Unknown tree: void_cst >>> >>>> >>>>>>;


;; Function std::locale::locale(const string&) (null)
;; enabled by -tree-original


{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::locale::locale (this, std::__cxx11::basic_string<char>::c_str ((const struct string *) __s)) >>>>>;
  try
    {
      
    }
  catch
    {
      std::locale::~locale (this);
    }
}


;; Function std::locale::locale(const std::locale&, const string&, std::locale::category) (null)
;; enabled by -tree-original


{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::locale::locale (this, (const struct locale &) (const struct locale *) __base, std::__cxx11::basic_string<char>::c_str ((const struct string *) __s), __cat) >>>>>;
  try
    {
      
    }
  catch
    {
      std::locale::~locale (this);
    }
}


;; Function bool std::locale::operator!=(const std::locale&) const (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  <<cleanup_point return <retval> = !std::locale::operator== (this, (const struct locale &) (const struct locale *) __other)>>
   >>>;


;; Function std::locale::facet::facet(std::size_t) (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct facet *) this)->_vptr.facet = &_ZTVNSt6locale5facetE + 16) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct facet *) this)->_M_refcount = __refs != 0 ? 1 : 0) >>>>>;
  }
   >>>;


;; Function void std::locale::facet::_M_add_reference() const (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__atomic_add_dispatch (&((const struct facet *) this)->_M_refcount, 1) >>>>>
   >>>;


;; Function void std::locale::facet::_M_remove_reference() const (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  if (<<cleanup_point __gnu_cxx::__exchange_and_add_dispatch (&((const struct facet *) this)->_M_refcount, -1) == 1>>)
    {
      <<< Unknown tree: try_block
  <<cleanup_point <<< Unknown tree: expr_stmt
  if ((struct facet *) this != 0B)
    {
      OBJ_TYPE_REF(*(((struct facet *) this)->_vptr.facet + 8);(struct facet)(struct facet *) this->1) ((struct facet *) this);
    }
  else
    {
      <<< Unknown tree: void_cst >>>
    } >>>>>
  <<< Unknown tree: handler
  
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) __cxa_begin_catch (__builtin_eh_pointer (0)) >>>>>;
    }
  finally
    {
      __cxa_end_catch ();
    } >>> >>>;
    }
   >>>;


;; Function std::locale::id::id() (null)
;; enabled by -tree-original


{
  
}


;; Function void std::locale::_Impl::_M_add_reference() (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__atomic_add_dispatch (&((struct _Impl *) this)->_M_refcount, 1) >>>>>
   >>>;


;; Function void std::locale::_Impl::_M_remove_reference() (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  if (<<cleanup_point __gnu_cxx::__exchange_and_add_dispatch (&((struct _Impl *) this)->_M_refcount, -1) == 1>>)
    {
      <<< Unknown tree: try_block
  <<cleanup_point <<< Unknown tree: expr_stmt
  if ((struct _Impl *) this != 0B)
    {
      std::locale::_Impl::~_Impl (this);, operator delete ((void *) this, 40);;
    }
  else
    {
      <<< Unknown tree: void_cst >>>
    } >>>>>
  <<< Unknown tree: handler
  
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) __cxa_begin_catch (__builtin_eh_pointer (0)) >>>>>;
    }
  finally
    {
      __cxa_end_catch ();
    } >>> >>>;
    }
   >>>;


;; Function bool std::locale::_Impl::_M_check_same_name() (null)
;; enabled by -tree-original


{
  bool __ret = 1;

  <<cleanup_point   bool __ret = 1;>>;
  {
    if (*(((struct _Impl *) this)->_M_names + 8) != 0B)
      {
        {
          {
            size_t __i = 0;

            <<cleanup_point             size_t __i = 0;>>;
            while (1)
              {
                if (__i > 10 || !__ret) goto <D.23902>;
                <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__ret = __builtin_strcmp ((const char *) *(((struct _Impl *) this)->_M_names + (sizetype) (__i * 8)), (const char *) *(((struct _Impl *) this)->_M_names + ((sizetype) __i + 1) * 8)) == 0) >>>>>;
                <<cleanup_point (void)  ++__i>>;
              }
            <D.23902>:;
          }
        }
      }
  }
  return <retval> = __ret;
}


;; Function constexpr bool std::less<_Tp>::operator()(const _Tp&, const _Tp&) const [with _Tp = const std::_V2::error_category*] (null)
;; enabled by -tree-original


return <retval> = (const struct error_category *) *__x < (const struct error_category *) *__y;


;; Function bool std::_V2::error_category::operator<(const std::_V2::error_category&) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::less<const std::_V2::error_category*>::operator() (&TARGET_EXPR <D.25073, {}>, (const struct error_category * const &) &TARGET_EXPR <D.25083, (const struct error_category *) this>, (const struct error_category * const &) &TARGET_EXPR <D.25084, (const struct error_category *) __other>)>>
   >>>;


;; Function bool std::_V2::error_category::operator==(const std::_V2::error_category&) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (const struct error_category *) this == (const struct error_category *) __other
   >>>;


;; Function bool std::_V2::error_category::operator!=(const std::_V2::error_category&) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (const struct error_category *) this != (const struct error_category *) __other
   >>>;


;; Function std::error_code::error_code() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct error_code *) this)->_M_value = 0) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct error_code *) this)->_M_cat = (const struct error_category *) std::_V2::system_category ()) >>>>>;
  }
   >>>;


;; Function std::error_code::error_code(int, const std::_V2::error_category&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct error_code *) this)->_M_value = __v) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct error_code *) this)->_M_cat = (const struct error_category *) __cat) >>>>>;
  }
   >>>;


;; Function void std::error_code::assign(int, const std::_V2::error_category&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct error_code *) this)->_M_value = __v) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct error_code *) this)->_M_cat = (const struct error_category *) __cat) >>>>>;
   >>>;


;; Function void std::error_code::clear() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::error_code::assign (this, 0, (const struct error_category &) (const struct error_category *) std::_V2::system_category ()) >>>>>
   >>>;


;; Function int std::error_code::value() const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (int) ((const struct error_code *) this)->_M_value
   >>>;


;; Function const std::_V2::error_category& std::error_code::category() const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (const struct error_category &) (const struct error_category *) ((const struct error_code *) this)->_M_cat
   >>>;


;; Function std::__cxx11::string std::error_code::message() const (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.25169, <<< Unknown tree: aggr_init_expr
  5
  OBJ_TYPE_REF(*((SAVE_EXPR <(const struct error_category *) std::error_code::category (this)>)->_vptr.error_category + 32);(const struct error_category)SAVE_EXPR <(const struct error_category *) std::error_code::category (this)>->4)
  D.25169
  SAVE_EXPR <(const struct error_category *) std::error_code::category (this)>
  std::error_code::value (this) >>>>>>;


;; Function std::error_code::operator bool() const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (int) ((const struct error_code *) this)->_M_value != 0
   >>>;


;; Function std::error_code std::make_error_code(std::errc) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = TARGET_EXPR <D.25192, <<< Unknown tree: aggr_init_expr
  6
  __comp_ctor 
  D.25192
  (struct error_code *) <<< Unknown tree: void_cst >>>
  (int) __e
  (const struct error_category &) (const struct error_category *) std::_V2::generic_category () >>>>;, D.25192>>
   >>>;


;; Function bool std::operator<(const std::error_code&, const std::error_code&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::_V2::error_category::operator< ((const struct error_category *) std::error_code::category ((const struct error_code *) __lhs), (const struct error_category &) (const struct error_category *) std::error_code::category ((const struct error_code *) __rhs)) || std::_V2::error_category::operator== ((const struct error_category *) std::error_code::category ((const struct error_code *) __lhs), (const struct error_category &) (const struct error_category *) std::error_code::category ((const struct error_code *) __rhs)) && std::error_code::value ((const struct error_code *) __lhs) < std::error_code::value ((const struct error_code *) __rhs)>>
   >>>;


;; Function std::error_condition::error_condition() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct error_condition *) this)->_M_value = 0) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct error_condition *) this)->_M_cat = (const struct error_category *) std::_V2::generic_category ()) >>>>>;
  }
   >>>;


;; Function std::error_condition::error_condition(int, const std::_V2::error_category&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct error_condition *) this)->_M_value = __v) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct error_condition *) this)->_M_cat = (const struct error_category *) __cat) >>>>>;
  }
   >>>;


;; Function void std::error_condition::assign(int, const std::_V2::error_category&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct error_condition *) this)->_M_value = __v) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct error_condition *) this)->_M_cat = (const struct error_category *) __cat) >>>>>;
   >>>;


;; Function void std::error_condition::clear() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::error_condition::assign (this, 0, (const struct error_category &) (const struct error_category *) std::_V2::generic_category ()) >>>>>
   >>>;


;; Function int std::error_condition::value() const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (int) ((const struct error_condition *) this)->_M_value
   >>>;


;; Function const std::_V2::error_category& std::error_condition::category() const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (const struct error_category &) (const struct error_category *) ((const struct error_condition *) this)->_M_cat
   >>>;


;; Function std::__cxx11::string std::error_condition::message() const (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.25295, <<< Unknown tree: aggr_init_expr
  5
  OBJ_TYPE_REF(*((SAVE_EXPR <(const struct error_category *) std::error_condition::category (this)>)->_vptr.error_category + 32);(const struct error_category)SAVE_EXPR <(const struct error_category *) std::error_condition::category (this)>->4)
  D.25295
  SAVE_EXPR <(const struct error_category *) std::error_condition::category (this)>
  std::error_condition::value (this) >>>>>>;


;; Function std::error_condition::operator bool() const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (int) ((const struct error_condition *) this)->_M_value != 0
   >>>;


;; Function std::error_condition std::make_error_condition(std::errc) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = TARGET_EXPR <D.25318, <<< Unknown tree: aggr_init_expr
  6
  __comp_ctor 
  D.25318
  (struct error_condition *) <<< Unknown tree: void_cst >>>
  (int) __e
  (const struct error_category &) (const struct error_category *) std::_V2::generic_category () >>>>;, D.25318>>
   >>>;


;; Function bool std::operator<(const std::error_condition&, const std::error_condition&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::_V2::error_category::operator< ((const struct error_category *) std::error_condition::category ((const struct error_condition *) __lhs), (const struct error_category &) (const struct error_category *) std::error_condition::category ((const struct error_condition *) __rhs)) || std::_V2::error_category::operator== ((const struct error_category *) std::error_condition::category ((const struct error_condition *) __lhs), (const struct error_category &) (const struct error_category *) std::error_condition::category ((const struct error_condition *) __rhs)) && std::error_condition::value ((const struct error_condition *) __lhs) < std::error_condition::value ((const struct error_condition *) __rhs)>>
   >>>;


;; Function bool std::operator==(const std::error_code&, const std::error_code&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::_V2::error_category::operator== ((const struct error_category *) std::error_code::category ((const struct error_code *) __lhs), (const struct error_category &) (const struct error_category *) std::error_code::category ((const struct error_code *) __rhs)) && std::error_code::value ((const struct error_code *) __lhs) == std::error_code::value ((const struct error_code *) __rhs)>>
   >>>;


;; Function bool std::operator==(const std::error_code&, const std::error_condition&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = OBJ_TYPE_REF(*((SAVE_EXPR <(const struct error_category *) std::error_code::category ((const struct error_code *) __lhs)>)->_vptr.error_category + 48);(const struct error_category)SAVE_EXPR <(const struct error_category *) std::error_code::category ((const struct error_code *) __lhs)>->6) (SAVE_EXPR <(const struct error_category *) std::error_code::category ((const struct error_code *) __lhs)>, std::error_code::value ((const struct error_code *) __lhs), (const struct error_condition &) (const struct error_condition *) __rhs) || OBJ_TYPE_REF(*((SAVE_EXPR <(const struct error_category *) std::error_condition::category ((const struct error_condition *) __rhs)>)->_vptr.error_category + 56);(const struct error_category)SAVE_EXPR <(const struct error_category *) std::error_condition::category ((const struct error_condition *) __rhs)>->7) (SAVE_EXPR <(const struct error_category *) std::error_condition::category ((const struct error_condition *) __rhs)>, (const struct error_code &) (const struct error_code *) __lhs, std::error_condition::value ((const struct error_condition *) __rhs))>>
   >>>;


;; Function bool std::operator==(const std::error_condition&, const std::error_code&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = OBJ_TYPE_REF(*((SAVE_EXPR <(const struct error_category *) std::error_code::category ((const struct error_code *) __rhs)>)->_vptr.error_category + 48);(const struct error_category)SAVE_EXPR <(const struct error_category *) std::error_code::category ((const struct error_code *) __rhs)>->6) (SAVE_EXPR <(const struct error_category *) std::error_code::category ((const struct error_code *) __rhs)>, std::error_code::value ((const struct error_code *) __rhs), (const struct error_condition &) (const struct error_condition *) __lhs) || OBJ_TYPE_REF(*((SAVE_EXPR <(const struct error_category *) std::error_condition::category ((const struct error_condition *) __lhs)>)->_vptr.error_category + 56);(const struct error_category)SAVE_EXPR <(const struct error_category *) std::error_condition::category ((const struct error_condition *) __lhs)>->7) (SAVE_EXPR <(const struct error_category *) std::error_condition::category ((const struct error_condition *) __lhs)>, (const struct error_code &) (const struct error_code *) __rhs, std::error_condition::value ((const struct error_condition *) __lhs))>>
   >>>;


;; Function bool std::operator==(const std::error_condition&, const std::error_condition&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::_V2::error_category::operator== ((const struct error_category *) std::error_condition::category ((const struct error_condition *) __lhs), (const struct error_category &) (const struct error_category *) std::error_condition::category ((const struct error_condition *) __rhs)) && std::error_condition::value ((const struct error_condition *) __lhs) == std::error_condition::value ((const struct error_condition *) __rhs)>>
   >>>;


;; Function bool std::operator!=(const std::error_code&, const std::error_code&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = !std::operator== ((const struct error_code &) (const struct error_code *) __lhs, (const struct error_code &) (const struct error_code *) __rhs)>>
   >>>;


;; Function bool std::operator!=(const std::error_code&, const std::error_condition&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = !std::operator== ((const struct error_code &) (const struct error_code *) __lhs, (const struct error_condition &) (const struct error_condition *) __rhs)>>
   >>>;


;; Function bool std::operator!=(const std::error_condition&, const std::error_code&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = !std::operator== ((const struct error_condition &) (const struct error_condition *) __lhs, (const struct error_code &) (const struct error_code *) __rhs)>>
   >>>;


;; Function bool std::operator!=(const std::error_condition&, const std::error_condition&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = !std::operator== ((const struct error_condition &) (const struct error_condition *) __lhs, (const struct error_condition &) (const struct error_condition *) __rhs)>>
   >>>;


;; Function std::system_error::system_error(std::error_code) (null)
;; enabled by -tree-original


{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::runtime_error::runtime_error (&((struct system_error *) this)->D.25465, (const struct string &) (const struct string *) &TARGET_EXPR <D.25472, <<< Unknown tree: aggr_init_expr
  4
  message
  D.25472
  &__ec >>>>) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct system_error *) this)->D.25465.D.24808._vptr.exception = &_ZTVSt12system_error + 16) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct system_error *) this)->_M_code = __ec) >>>>>;
    }
  catch
    {
      std::runtime_error::~runtime_error (&((struct system_error *) this)->D.25465);
    }
}


;; Function std::system_error::system_error(std::error_code, const string&) (null)
;; enabled by -tree-original


{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::runtime_error::runtime_error (&((struct system_error *) this)->D.25465, (const struct string &) (const struct string *) &TARGET_EXPR <D.25494, <<< Unknown tree: aggr_init_expr
  5
  operator+
  D.25494
  (struct basic_string &) &TARGET_EXPR <D.25480, <<< Unknown tree: aggr_init_expr
  5
  operator+
  D.25480
  (const struct basic_string &) (const struct string *) __what
  (const char *) ": " >>>>
  (struct basic_string &) &TARGET_EXPR <D.25481, <<< Unknown tree: aggr_init_expr
  4
  message
  D.25481
  &__ec >>>> >>>>) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct system_error *) this)->D.25465.D.24808._vptr.exception = &_ZTVSt12system_error + 16) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct system_error *) this)->_M_code = __ec) >>>>>;
    }
  catch
    {
      std::runtime_error::~runtime_error (&((struct system_error *) this)->D.25465);
    }
}


;; Function std::system_error::system_error(std::error_code, const char*) (null)
;; enabled by -tree-original


{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::runtime_error::runtime_error (&((struct system_error *) this)->D.25465, (const struct string &) (const struct string *) &TARGET_EXPR <D.25509, <<< Unknown tree: aggr_init_expr
  5
  operator+
  D.25509
  __what
  (struct basic_string &) &TARGET_EXPR <D.25508, <<< Unknown tree: aggr_init_expr
  5
  operator+
  D.25508
  (const char *) ": "
  (struct basic_string &) &TARGET_EXPR <D.25501, <<< Unknown tree: aggr_init_expr
  4
  message
  D.25501
  &__ec >>>> >>>> >>>>) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct system_error *) this)->D.25465.D.24808._vptr.exception = &_ZTVSt12system_error + 16) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct system_error *) this)->_M_code = __ec) >>>>>;
    }
  catch
    {
      std::runtime_error::~runtime_error (&((struct system_error *) this)->D.25465);
    }
}


;; Function std::system_error::system_error(int, const std::_V2::error_category&, const char*) (null)
;; enabled by -tree-original


{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::system_error::system_error (this, TARGET_EXPR <D.25516, <<< Unknown tree: aggr_init_expr
  6
  __comp_ctor 
  D.25516
  (struct error_code *) <<< Unknown tree: void_cst >>>
  __v
  (const struct error_category &) (const struct error_category *) __ecat >>>>, __what) >>>>>;
  try
    {
      
    }
  catch
    {
      std::system_error::~system_error (this);
    }
}


;; Function std::system_error::system_error(int, const std::_V2::error_category&) (null)
;; enabled by -tree-original


{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::runtime_error::runtime_error (&((struct system_error *) this)->D.25465, (const struct string &) (const struct string *) &TARGET_EXPR <D.25531, <<< Unknown tree: aggr_init_expr
  4
  message
  D.25531
  &TARGET_EXPR <D.25530, <<< Unknown tree: aggr_init_expr
  6
  __comp_ctor 
  D.25530
  (struct error_code *) <<< Unknown tree: void_cst >>>
  __v
  (const struct error_category &) (const struct error_category *) __ecat >>>> >>>>) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct system_error *) this)->D.25465.D.24808._vptr.exception = &_ZTVSt12system_error + 16) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::error_code::error_code (&((struct system_error *) this)->_M_code, __v, (const struct error_category &) (const struct error_category *) __ecat) >>>>>;
    }
  catch
    {
      std::runtime_error::~runtime_error (&((struct system_error *) this)->D.25465);
    }
}


;; Function std::system_error::system_error(int, const std::_V2::error_category&, const string&) (null)
;; enabled by -tree-original


{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::runtime_error::runtime_error (&((struct system_error *) this)->D.25465, (const struct string &) (const struct string *) &TARGET_EXPR <D.25540, <<< Unknown tree: aggr_init_expr
  5
  operator+
  D.25540
  (struct basic_string &) &TARGET_EXPR <D.25537, <<< Unknown tree: aggr_init_expr
  5
  operator+
  D.25537
  (const struct basic_string &) (const struct string *) __what
  (const char *) ": " >>>>
  (struct basic_string &) &TARGET_EXPR <D.25539, <<< Unknown tree: aggr_init_expr
  4
  message
  D.25539
  &TARGET_EXPR <D.25538, <<< Unknown tree: aggr_init_expr
  6
  __comp_ctor 
  D.25538
  (struct error_code *) <<< Unknown tree: void_cst >>>
  __v
  (const struct error_category &) (const struct error_category *) __ecat >>>> >>>> >>>>) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct system_error *) this)->D.25465.D.24808._vptr.exception = &_ZTVSt12system_error + 16) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::error_code::error_code (&((struct system_error *) this)->_M_code, __v, (const struct error_category &) (const struct error_category *) __ecat) >>>>>;
    }
  catch
    {
      std::runtime_error::~runtime_error (&((struct system_error *) this)->D.25465);
    }
}


;; Function const std::error_code& std::system_error::code() const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (const struct error_code &) &((const struct system_error *) this)->_M_code
   >>>;


;; Function std::size_t std::hash<std::error_code>::operator()(const std::error_code&) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    const size_t __tmp;

        const size_t __tmp;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__tmp = std::_Hash_impl::hash<int> ((const int &) &__e->_M_value)) >>>>>;
    <<cleanup_point return <retval> = std::_Hash_impl::__hash_combine<const std::_V2::error_category*> ((const struct error_category * const &) &__e->_M_cat, (size_t) __tmp)>>;
  }
   >>>;


;; Function constexpr std::_Ios_Fmtflags std::operator&(std::_Ios_Fmtflags, std::_Ios_Fmtflags) (null)
;; enabled by -tree-original


return <retval> = (_Ios_Fmtflags) ((int) __a & (int) __b);


;; Function constexpr std::_Ios_Fmtflags std::operator|(std::_Ios_Fmtflags, std::_Ios_Fmtflags) (null)
;; enabled by -tree-original


return <retval> = (_Ios_Fmtflags) ((int) __a | (int) __b);


;; Function constexpr std::_Ios_Fmtflags std::operator^(std::_Ios_Fmtflags, std::_Ios_Fmtflags) (null)
;; enabled by -tree-original


return <retval> = (_Ios_Fmtflags) ((int) __a ^ (int) __b);


;; Function constexpr std::_Ios_Fmtflags std::operator~(std::_Ios_Fmtflags) (null)
;; enabled by -tree-original


return <retval> = ~__a;


;; Function const std::_Ios_Fmtflags& std::operator|=(std::_Ios_Fmtflags&, std::_Ios_Fmtflags) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (const _Ios_Fmtflags &) (*__a = std::operator| (*__a, __b);, (const _Ios_Fmtflags *) __a;)>>;


;; Function const std::_Ios_Fmtflags& std::operator&=(std::_Ios_Fmtflags&, std::_Ios_Fmtflags) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (const _Ios_Fmtflags &) (*__a = std::operator& (*__a, __b);, (const _Ios_Fmtflags *) __a;)>>;


;; Function const std::_Ios_Fmtflags& std::operator^=(std::_Ios_Fmtflags&, std::_Ios_Fmtflags) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (const _Ios_Fmtflags &) (*__a = std::operator^ (*__a, __b);, (const _Ios_Fmtflags *) __a;)>>;


;; Function constexpr std::_Ios_Openmode std::operator&(std::_Ios_Openmode, std::_Ios_Openmode) (null)
;; enabled by -tree-original


return <retval> = (_Ios_Openmode) ((int) __a & (int) __b);


;; Function constexpr std::_Ios_Openmode std::operator|(std::_Ios_Openmode, std::_Ios_Openmode) (null)
;; enabled by -tree-original


return <retval> = (_Ios_Openmode) ((int) __a | (int) __b);


;; Function constexpr std::_Ios_Openmode std::operator^(std::_Ios_Openmode, std::_Ios_Openmode) (null)
;; enabled by -tree-original


return <retval> = (_Ios_Openmode) ((int) __a ^ (int) __b);


;; Function constexpr std::_Ios_Openmode std::operator~(std::_Ios_Openmode) (null)
;; enabled by -tree-original


return <retval> = ~__a;


;; Function const std::_Ios_Openmode& std::operator|=(std::_Ios_Openmode&, std::_Ios_Openmode) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (const _Ios_Openmode &) (*__a = std::operator| (*__a, __b);, (const _Ios_Openmode *) __a;)>>;


;; Function const std::_Ios_Openmode& std::operator&=(std::_Ios_Openmode&, std::_Ios_Openmode) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (const _Ios_Openmode &) (*__a = std::operator& (*__a, __b);, (const _Ios_Openmode *) __a;)>>;


;; Function const std::_Ios_Openmode& std::operator^=(std::_Ios_Openmode&, std::_Ios_Openmode) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (const _Ios_Openmode &) (*__a = std::operator^ (*__a, __b);, (const _Ios_Openmode *) __a;)>>;


;; Function constexpr std::_Ios_Iostate std::operator&(std::_Ios_Iostate, std::_Ios_Iostate) (null)
;; enabled by -tree-original


return <retval> = (_Ios_Iostate) ((int) __a & (int) __b);


;; Function constexpr std::_Ios_Iostate std::operator|(std::_Ios_Iostate, std::_Ios_Iostate) (null)
;; enabled by -tree-original


return <retval> = (_Ios_Iostate) ((int) __a | (int) __b);


;; Function constexpr std::_Ios_Iostate std::operator^(std::_Ios_Iostate, std::_Ios_Iostate) (null)
;; enabled by -tree-original


return <retval> = (_Ios_Iostate) ((int) __a ^ (int) __b);


;; Function constexpr std::_Ios_Iostate std::operator~(std::_Ios_Iostate) (null)
;; enabled by -tree-original


return <retval> = ~__a;


;; Function const std::_Ios_Iostate& std::operator|=(std::_Ios_Iostate&, std::_Ios_Iostate) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (const _Ios_Iostate &) (*__a = std::operator| (*__a, __b);, (const _Ios_Iostate *) __a;)>>;


;; Function const std::_Ios_Iostate& std::operator&=(std::_Ios_Iostate&, std::_Ios_Iostate) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (const _Ios_Iostate &) (*__a = std::operator& (*__a, __b);, (const _Ios_Iostate *) __a;)>>;


;; Function const std::_Ios_Iostate& std::operator^=(std::_Ios_Iostate&, std::_Ios_Iostate) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (const _Ios_Iostate &) (*__a = std::operator^ (*__a, __b);, (const _Ios_Iostate *) __a;)>>;


;; Function std::error_code std::make_error_code(std::io_errc) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = TARGET_EXPR <D.25698, <<< Unknown tree: aggr_init_expr
  6
  __comp_ctor 
  D.25698
  (struct error_code *) <<< Unknown tree: void_cst >>>
  (int) e
  (const struct error_category &) (const struct error_category *) std::iostream_category () >>>>;, D.25698>>
   >>>;


;; Function std::error_condition std::make_error_condition(std::io_errc) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = TARGET_EXPR <D.25702, <<< Unknown tree: aggr_init_expr
  6
  __comp_ctor 
  D.25702
  (struct error_condition *) <<< Unknown tree: void_cst >>>
  (int) e
  (const struct error_category &) (const struct error_category *) std::iostream_category () >>>>;, D.25702>>
   >>>;


;; Function std::ios_base::_Callback_list::_Callback_list(std::ios_base::event_callback, int, std::ios_base::_Callback_list*) (null)
;; enabled by -tree-original


{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Callback_list *) this)->_M_next = __cb) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Callback_list *) this)->_M_fn = __fn) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Callback_list *) this)->_M_index = __index) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Callback_list *) this)->_M_refcount = 0) >>>>>;
}


;; Function void std::ios_base::_Callback_list::_M_add_reference() (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__atomic_add_dispatch (&((struct _Callback_list *) this)->_M_refcount, 1) >>>>>;


;; Function int std::ios_base::_Callback_list::_M_remove_reference() (null)
;; enabled by -tree-original


{
  int __res;

    int __res;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__res = __gnu_cxx::__exchange_and_add_dispatch (&((struct _Callback_list *) this)->_M_refcount, -1)) >>>>>;
  if (__res == 0)
    {
      
    }
  return <retval> = __res;
}


;; Function std::ios_base::_Words::_Words() (null)
;; enabled by -tree-original


{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Words *) this)->_M_pword = 0B) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Words *) this)->_M_iword = 0) >>>>>;
}


;; Function std::ios_base::fmtflags std::ios_base::flags() const (null)
;; enabled by -tree-original


return <retval> = (fmtflags) ((const struct ios_base *) this)->_M_flags;


;; Function std::ios_base::fmtflags std::ios_base::flags(std::ios_base::fmtflags) (null)
;; enabled by -tree-original


{
  fmtflags __old = ((struct ios_base *) this)->_M_flags;

    fmtflags __old = ((struct ios_base *) this)->_M_flags;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct ios_base *) this)->_M_flags = __fmtfl) >>>>>;
  return <retval> = __old;
}


;; Function std::ios_base::fmtflags std::ios_base::setf(std::ios_base::fmtflags) (null)
;; enabled by -tree-original


{
  fmtflags __old = ((struct ios_base *) this)->_M_flags;

    fmtflags __old = ((struct ios_base *) this)->_M_flags;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::operator|= ((_Ios_Fmtflags &) &((struct ios_base *) this)->_M_flags, __fmtfl) >>>>>;
  return <retval> = __old;
}


;; Function std::ios_base::fmtflags std::ios_base::setf(std::ios_base::fmtflags, std::ios_base::fmtflags) (null)
;; enabled by -tree-original


{
  fmtflags __old = ((struct ios_base *) this)->_M_flags;

    fmtflags __old = ((struct ios_base *) this)->_M_flags;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::operator&= ((_Ios_Fmtflags &) &((struct ios_base *) this)->_M_flags, std::operator~ (__mask)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::operator|= ((_Ios_Fmtflags &) &((struct ios_base *) this)->_M_flags, std::operator& (__fmtfl, __mask)) >>>>>;
  return <retval> = __old;
}


;; Function void std::ios_base::unsetf(std::ios_base::fmtflags) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::operator&= ((_Ios_Fmtflags &) &((struct ios_base *) this)->_M_flags, std::operator~ (__mask)) >>>>>;


;; Function std::streamsize std::ios_base::precision() const (null)
;; enabled by -tree-original


return <retval> = (streamsize) ((const struct ios_base *) this)->_M_precision;


;; Function std::streamsize std::ios_base::precision(std::streamsize) (null)
;; enabled by -tree-original


{
  streamsize __old = ((struct ios_base *) this)->_M_precision;

    streamsize __old = ((struct ios_base *) this)->_M_precision;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct ios_base *) this)->_M_precision = __prec) >>>>>;
  return <retval> = __old;
}


;; Function std::streamsize std::ios_base::width() const (null)
;; enabled by -tree-original


return <retval> = (streamsize) ((const struct ios_base *) this)->_M_width;


;; Function std::streamsize std::ios_base::width(std::streamsize) (null)
;; enabled by -tree-original


{
  streamsize __old = ((struct ios_base *) this)->_M_width;

    streamsize __old = ((struct ios_base *) this)->_M_width;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct ios_base *) this)->_M_width = __wide) >>>>>;
  return <retval> = __old;
}


;; Function std::locale std::ios_base::getloc() const (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.26024, <<< Unknown tree: aggr_init_expr
  5
  __comp_ctor 
  D.26024
  (struct locale *) <<< Unknown tree: void_cst >>>
  (const struct locale &) &((const struct ios_base *) this)->_M_ios_locale >>>>>>;


;; Function const std::locale& std::ios_base::_M_getloc() const (null)
;; enabled by -tree-original


return <retval> = (const struct locale &) &((const struct ios_base *) this)->_M_ios_locale;


;; Function long int& std::ios_base::iword(int) (null)
;; enabled by -tree-original


{
  struct _Words & __word;

    struct _Words & __word;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__word = (struct _Words &) (((struct ios_base *) this)->_M_word_size > __ix ? ((struct ios_base *) this)->_M_word + (sizetype) ((long unsigned int) __ix * 16) : (struct _Words *) std::ios_base::_M_grow_words (this, __ix, 1))) >>>>>;
  return <retval> = (long int &) &__word->_M_iword;
}


;; Function void*& std::ios_base::pword(int) (null)
;; enabled by -tree-original


{
  struct _Words & __word;

    struct _Words & __word;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__word = (struct _Words &) (((struct ios_base *) this)->_M_word_size > __ix ? ((struct ios_base *) this)->_M_word + (sizetype) ((long unsigned int) __ix * 16) : (struct _Words *) std::ios_base::_M_grow_words (this, __ix, 0))) >>>>>;
  return <retval> = (void * &) &__word->_M_pword;
}


;; Function std::ios_base& std::boolalpha(std::ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ios_base::setf ((struct ios_base *) __base, 1) >>>>>;
return <retval> = (struct ios_base &) (struct ios_base *) __base;


;; Function std::ios_base& std::noboolalpha(std::ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::ios_base::unsetf ((struct ios_base *) __base, 1) >>>>>;
return <retval> = (struct ios_base &) (struct ios_base *) __base;


;; Function std::ios_base& std::showbase(std::ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ios_base::setf ((struct ios_base *) __base, 512) >>>>>;
return <retval> = (struct ios_base &) (struct ios_base *) __base;


;; Function std::ios_base& std::noshowbase(std::ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::ios_base::unsetf ((struct ios_base *) __base, 512) >>>>>;
return <retval> = (struct ios_base &) (struct ios_base *) __base;


;; Function std::ios_base& std::showpoint(std::ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ios_base::setf ((struct ios_base *) __base, 1024) >>>>>;
return <retval> = (struct ios_base &) (struct ios_base *) __base;


;; Function std::ios_base& std::noshowpoint(std::ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::ios_base::unsetf ((struct ios_base *) __base, 1024) >>>>>;
return <retval> = (struct ios_base &) (struct ios_base *) __base;


;; Function std::ios_base& std::showpos(std::ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ios_base::setf ((struct ios_base *) __base, 2048) >>>>>;
return <retval> = (struct ios_base &) (struct ios_base *) __base;


;; Function std::ios_base& std::noshowpos(std::ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::ios_base::unsetf ((struct ios_base *) __base, 2048) >>>>>;
return <retval> = (struct ios_base &) (struct ios_base *) __base;


;; Function std::ios_base& std::skipws(std::ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ios_base::setf ((struct ios_base *) __base, 4096) >>>>>;
return <retval> = (struct ios_base &) (struct ios_base *) __base;


;; Function std::ios_base& std::noskipws(std::ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::ios_base::unsetf ((struct ios_base *) __base, 4096) >>>>>;
return <retval> = (struct ios_base &) (struct ios_base *) __base;


;; Function std::ios_base& std::uppercase(std::ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ios_base::setf ((struct ios_base *) __base, 16384) >>>>>;
return <retval> = (struct ios_base &) (struct ios_base *) __base;


;; Function std::ios_base& std::nouppercase(std::ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::ios_base::unsetf ((struct ios_base *) __base, 16384) >>>>>;
return <retval> = (struct ios_base &) (struct ios_base *) __base;


;; Function std::ios_base& std::unitbuf(std::ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ios_base::setf ((struct ios_base *) __base, 8192) >>>>>;
return <retval> = (struct ios_base &) (struct ios_base *) __base;


;; Function std::ios_base& std::nounitbuf(std::ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::ios_base::unsetf ((struct ios_base *) __base, 8192) >>>>>;
return <retval> = (struct ios_base &) (struct ios_base *) __base;


;; Function std::ios_base& std::internal(std::ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ios_base::setf ((struct ios_base *) __base, 16, 176) >>>>>;
return <retval> = (struct ios_base &) (struct ios_base *) __base;


;; Function std::ios_base& std::left(std::ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ios_base::setf ((struct ios_base *) __base, 32, 176) >>>>>;
return <retval> = (struct ios_base &) (struct ios_base *) __base;


;; Function std::ios_base& std::right(std::ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ios_base::setf ((struct ios_base *) __base, 128, 176) >>>>>;
return <retval> = (struct ios_base &) (struct ios_base *) __base;


;; Function std::ios_base& std::dec(std::ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ios_base::setf ((struct ios_base *) __base, 2, 74) >>>>>;
return <retval> = (struct ios_base &) (struct ios_base *) __base;


;; Function std::ios_base& std::hex(std::ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ios_base::setf ((struct ios_base *) __base, 8, 74) >>>>>;
return <retval> = (struct ios_base &) (struct ios_base *) __base;


;; Function std::ios_base& std::oct(std::ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ios_base::setf ((struct ios_base *) __base, 64, 74) >>>>>;
return <retval> = (struct ios_base &) (struct ios_base *) __base;


;; Function std::ios_base& std::fixed(std::ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ios_base::setf ((struct ios_base *) __base, 4, 260) >>>>>;
return <retval> = (struct ios_base &) (struct ios_base *) __base;


;; Function std::ios_base& std::scientific(std::ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ios_base::setf ((struct ios_base *) __base, 256, 260) >>>>>;
return <retval> = (struct ios_base &) (struct ios_base *) __base;


;; Function std::ios_base& std::hexfloat(std::ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ios_base::setf ((struct ios_base *) __base, std::operator| (4, 256), 260) >>>>>;
return <retval> = (struct ios_base &) (struct ios_base *) __base;


;; Function std::ios_base& std::defaultfloat(std::ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::ios_base::unsetf ((struct ios_base *) __base, 260) >>>>>;
return <retval> = (struct ios_base &) (struct ios_base *) __base;


;; Function std::ctype<char>::char_type std::ctype<char>::toupper(std::ctype<char>::char_type) const (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = OBJ_TYPE_REF(*(((const struct ctype *) this)->D.28026._vptr.facet + 16);(const struct ctype)this->2) (this, (int) __c)>>;


;; Function const char_type* std::ctype<char>::toupper(std::ctype<char>::char_type*, const char_type*) const (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = OBJ_TYPE_REF(*(((const struct ctype *) this)->D.28026._vptr.facet + 24);(const struct ctype)this->3) (this, __lo, __hi)>>;


;; Function std::ctype<char>::char_type std::ctype<char>::tolower(std::ctype<char>::char_type) const (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = OBJ_TYPE_REF(*(((const struct ctype *) this)->D.28026._vptr.facet + 32);(const struct ctype)this->4) (this, (int) __c)>>;


;; Function const char_type* std::ctype<char>::tolower(std::ctype<char>::char_type*, const char_type*) const (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = OBJ_TYPE_REF(*(((const struct ctype *) this)->D.28026._vptr.facet + 40);(const struct ctype)this->5) (this, __lo, __hi)>>;


;; Function std::ctype<char>::char_type std::ctype<char>::widen(char) const (null)
;; enabled by -tree-original


if ((signed char) ((const struct ctype *) this)->_M_widen_ok != 0)
  {
    return <retval> = ((const struct ctype *) this)->_M_widen[(int) (unsigned char) __c];
  }
<<cleanup_point <<< Unknown tree: expr_stmt
  std::ctype<char>::_M_widen_init (this) >>>>>;
<<cleanup_point return <retval> = OBJ_TYPE_REF(*(((const struct ctype *) this)->D.28026._vptr.facet + 48);(const struct ctype)this->6) (this, (int) __c)>>;


;; Function const char* std::ctype<char>::widen(const char*, const char*, std::ctype<char>::char_type*) const (null)
;; enabled by -tree-original


if ((signed char) ((const struct ctype *) this)->_M_widen_ok == 1)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) __builtin_memcpy ((void *) __to, (const void *) __lo, (long unsigned int) ((long int) __hi - (long int) __lo)) >>>>>;
    return <retval> = __hi;
  }
if ((signed char) ((const struct ctype *) this)->_M_widen_ok == 0)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::ctype<char>::_M_widen_init (this) >>>>>;
  }
<<cleanup_point return <retval> = OBJ_TYPE_REF(*(((const struct ctype *) this)->D.28026._vptr.facet + 56);(const struct ctype)this->7) (this, __lo, __hi, __to)>>;


;; Function char std::ctype<char>::narrow(std::ctype<char>::char_type, char) const (null)
;; enabled by -tree-original


{
  const char __t;

  if ((signed char) ((const struct ctype *) this)->_M_narrow[(int) (unsigned char) __c] != 0)
    {
      return <retval> = ((const struct ctype *) this)->_M_narrow[(int) (unsigned char) __c];
    }
    const char __t;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__t = OBJ_TYPE_REF(*(((const struct ctype *) this)->D.28026._vptr.facet + 64);(const struct ctype)this->8) (this, (int) __c, (int) __dfault)) >>>>>;
  if ((signed char) __t != (signed char) __dfault)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((const struct ctype *) this)->_M_narrow[(int) (unsigned char) __c] = (char) __t) >>>>>;
    }
  return <retval> = (char) __t;
}


;; Function const char_type* std::ctype<char>::narrow(const char_type*, const char_type*, char, char*) const (null)
;; enabled by -tree-original


if (__builtin_expect ((signed char) ((const struct ctype *) this)->_M_narrow_ok == 1, 1) != 0)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) __builtin_memcpy ((void *) __to, (const void *) __lo, (long unsigned int) ((long int) __hi - (long int) __lo)) >>>>>;
    return <retval> = __hi;
  }
if ((signed char) ((const struct ctype *) this)->_M_narrow_ok == 0)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::ctype<char>::_M_narrow_init (this) >>>>>;
  }
<<cleanup_point return <retval> = OBJ_TYPE_REF(*(((const struct ctype *) this)->D.28026._vptr.facet + 72);(const struct ctype)this->9) (this, __lo, __hi, (int) __dfault, __to)>>;


;; Function const mask* std::ctype<char>::table() const (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  return <retval> = (const mask *) ((const struct ctype *) this)->_M_table
   >>>;


;; Function virtual std::ctype<char>::char_type std::ctype<char>::do_widen(char) const (null)
;; enabled by -tree-original


return <retval> = __c;


;; Function virtual const char* std::ctype<char>::do_widen(const char*, const char*, std::ctype<char>::char_type*) const (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) __builtin_memcpy ((void *) __to, (const void *) __lo, (long unsigned int) ((long int) __hi - (long int) __lo)) >>>>>;
return <retval> = __hi;


;; Function virtual char std::ctype<char>::do_narrow(std::ctype<char>::char_type, char) const (null)
;; enabled by -tree-original


return <retval> = __c;


;; Function virtual const char_type* std::ctype<char>::do_narrow(const char_type*, const char_type*, char, char*) const (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) __builtin_memcpy ((void *) __to, (const void *) __lo, (long unsigned int) ((long int) __hi - (long int) __lo)) >>>>>;
return <retval> = __hi;


;; Function bool std::ctype<char>::is(std::ctype_base::mask, char) const (null)
;; enabled by -tree-original


return <retval> = ((short unsigned int) *((const mask *) ((const struct ctype *) this)->_M_table + (sizetype) ((long unsigned int) (unsigned char) __c * 2)) & __m) != 0;


;; Function const char* std::ctype<char>::is(const char*, const char*, std::ctype_base::mask*) const (null)
;; enabled by -tree-original


while (1)
  {
    if (__low >= __high) goto <D.28414>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__vec++  = (mask) *((const mask *) ((const struct ctype *) this)->_M_table + (sizetype) ((long unsigned int) (unsigned char) *__low++  * 2))) >>>>>;
  }
<D.28414>:;
return <retval> = __high;


;; Function const char* std::ctype<char>::scan_is(std::ctype_base::mask, const char*, const char*) const (null)
;; enabled by -tree-original


while (1)
  {
    if (__low >= __high || ((short unsigned int) *((const mask *) ((const struct ctype *) this)->_M_table + (sizetype) ((long unsigned int) (unsigned char) *__low * 2)) & __m) != 0) goto <D.28422>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void)  ++__low >>>>>;
  }
<D.28422>:;
return <retval> = __low;


;; Function const char* std::ctype<char>::scan_not(std::ctype_base::mask, const char*, const char*) const (null)
;; enabled by -tree-original


while (1)
  {
    if (__low >= __high || ((short unsigned int) *((const mask *) ((const struct ctype *) this)->_M_table + (sizetype) ((long unsigned int) (unsigned char) *__low * 2)) & __m) == 0) goto <D.28430>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void)  ++__low >>>>>;
  }
<D.28430>:;
return <retval> = __low;


;; Function static constexpr bool std::numeric_limits<bool>::min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr bool std::numeric_limits<bool>::max() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 1
   >>>;


;; Function static constexpr bool std::numeric_limits<bool>::lowest() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::numeric_limits<bool>::min ()>>
   >>>;


;; Function static constexpr bool std::numeric_limits<bool>::epsilon() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr bool std::numeric_limits<bool>::round_error() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr bool std::numeric_limits<bool>::infinity() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr bool std::numeric_limits<bool>::quiet_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr bool std::numeric_limits<bool>::signaling_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr bool std::numeric_limits<bool>::denorm_min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr char std::numeric_limits<char>::min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (char) (254 - ((unsigned char) (1 << 1 * 8 + 18446744073709551614) + 255 << 1))
   >>>;


;; Function static constexpr char std::numeric_limits<char>::max() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (char) (((unsigned char) (1 << 1 * 8 + 18446744073709551614) + 255 << 1) + 1)
   >>>;


;; Function static constexpr char std::numeric_limits<char>::lowest() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::numeric_limits<char>::min ()>>
   >>>;


;; Function static constexpr char std::numeric_limits<char>::epsilon() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr char std::numeric_limits<char>::round_error() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr char std::numeric_limits<char>::infinity() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr char std::numeric_limits<char>::quiet_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr char std::numeric_limits<char>::signaling_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr char std::numeric_limits<char>::denorm_min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr signed char std::numeric_limits<signed char>::min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = -128
   >>>;


;; Function static constexpr signed char std::numeric_limits<signed char>::max() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 127
   >>>;


;; Function static constexpr signed char std::numeric_limits<signed char>::lowest() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::numeric_limits<signed char>::min ()>>
   >>>;


;; Function static constexpr signed char std::numeric_limits<signed char>::epsilon() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr signed char std::numeric_limits<signed char>::round_error() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr signed char std::numeric_limits<signed char>::infinity() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr signed char std::numeric_limits<signed char>::quiet_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr signed char std::numeric_limits<signed char>::signaling_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr signed char std::numeric_limits<signed char>::denorm_min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr unsigned char std::numeric_limits<unsigned char>::min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr unsigned char std::numeric_limits<unsigned char>::max() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 255
   >>>;


;; Function static constexpr unsigned char std::numeric_limits<unsigned char>::lowest() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::numeric_limits<unsigned char>::min ()>>
   >>>;


;; Function static constexpr unsigned char std::numeric_limits<unsigned char>::epsilon() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr unsigned char std::numeric_limits<unsigned char>::round_error() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr unsigned char std::numeric_limits<unsigned char>::infinity() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr unsigned char std::numeric_limits<unsigned char>::quiet_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr unsigned char std::numeric_limits<unsigned char>::signaling_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr unsigned char std::numeric_limits<unsigned char>::denorm_min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr wchar_t std::numeric_limits<wchar_t>::min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (wchar_t) (-2 - ((1 << 4 * 8 + 18446744073709551614) + -1 << 1))
   >>>;


;; Function static constexpr wchar_t std::numeric_limits<wchar_t>::max() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (wchar_t) (((1 << 4 * 8 + 18446744073709551614) + -1 << 1) + 1)
   >>>;


;; Function static constexpr wchar_t std::numeric_limits<wchar_t>::lowest() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::numeric_limits<wchar_t>::min ()>>
   >>>;


;; Function static constexpr wchar_t std::numeric_limits<wchar_t>::epsilon() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr wchar_t std::numeric_limits<wchar_t>::round_error() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr wchar_t std::numeric_limits<wchar_t>::infinity() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr wchar_t std::numeric_limits<wchar_t>::quiet_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr wchar_t std::numeric_limits<wchar_t>::signaling_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr wchar_t std::numeric_limits<wchar_t>::denorm_min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr char16_t std::numeric_limits<char16_t>::min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr char16_t std::numeric_limits<char16_t>::max() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 65535
   >>>;


;; Function static constexpr char16_t std::numeric_limits<char16_t>::lowest() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::numeric_limits<char16_t>::min ()>>
   >>>;


;; Function static constexpr char16_t std::numeric_limits<char16_t>::epsilon() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr char16_t std::numeric_limits<char16_t>::round_error() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr char16_t std::numeric_limits<char16_t>::infinity() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr char16_t std::numeric_limits<char16_t>::quiet_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr char16_t std::numeric_limits<char16_t>::signaling_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr char16_t std::numeric_limits<char16_t>::denorm_min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr char32_t std::numeric_limits<char32_t>::min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr char32_t std::numeric_limits<char32_t>::max() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 4294967295
   >>>;


;; Function static constexpr char32_t std::numeric_limits<char32_t>::lowest() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::numeric_limits<char32_t>::min ()>>
   >>>;


;; Function static constexpr char32_t std::numeric_limits<char32_t>::epsilon() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr char32_t std::numeric_limits<char32_t>::round_error() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr char32_t std::numeric_limits<char32_t>::infinity() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr char32_t std::numeric_limits<char32_t>::quiet_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr char32_t std::numeric_limits<char32_t>::signaling_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr char32_t std::numeric_limits<char32_t>::denorm_min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr short int std::numeric_limits<short int>::min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = -32768
   >>>;


;; Function static constexpr short int std::numeric_limits<short int>::max() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 32767
   >>>;


;; Function static constexpr short int std::numeric_limits<short int>::lowest() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::numeric_limits<short int>::min ()>>
   >>>;


;; Function static constexpr short int std::numeric_limits<short int>::epsilon() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr short int std::numeric_limits<short int>::round_error() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr short int std::numeric_limits<short int>::infinity() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr short int std::numeric_limits<short int>::quiet_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr short int std::numeric_limits<short int>::signaling_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr short int std::numeric_limits<short int>::denorm_min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr short unsigned int std::numeric_limits<short unsigned int>::min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr short unsigned int std::numeric_limits<short unsigned int>::max() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 65535
   >>>;


;; Function static constexpr short unsigned int std::numeric_limits<short unsigned int>::lowest() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::numeric_limits<short unsigned int>::min ()>>
   >>>;


;; Function static constexpr short unsigned int std::numeric_limits<short unsigned int>::epsilon() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr short unsigned int std::numeric_limits<short unsigned int>::round_error() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr short unsigned int std::numeric_limits<short unsigned int>::infinity() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr short unsigned int std::numeric_limits<short unsigned int>::quiet_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr short unsigned int std::numeric_limits<short unsigned int>::signaling_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr short unsigned int std::numeric_limits<short unsigned int>::denorm_min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr int std::numeric_limits<int>::min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = -2147483648
   >>>;


;; Function static constexpr int std::numeric_limits<int>::max() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 2147483647
   >>>;


;; Function static constexpr int std::numeric_limits<int>::lowest() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::numeric_limits<int>::min ()>>
   >>>;


;; Function static constexpr int std::numeric_limits<int>::epsilon() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr int std::numeric_limits<int>::round_error() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr int std::numeric_limits<int>::infinity() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr int std::numeric_limits<int>::quiet_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr int std::numeric_limits<int>::signaling_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr int std::numeric_limits<int>::denorm_min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr unsigned int std::numeric_limits<unsigned int>::min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr unsigned int std::numeric_limits<unsigned int>::max() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 4294967295
   >>>;


;; Function static constexpr unsigned int std::numeric_limits<unsigned int>::lowest() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::numeric_limits<unsigned int>::min ()>>
   >>>;


;; Function static constexpr unsigned int std::numeric_limits<unsigned int>::epsilon() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr unsigned int std::numeric_limits<unsigned int>::round_error() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr unsigned int std::numeric_limits<unsigned int>::infinity() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr unsigned int std::numeric_limits<unsigned int>::quiet_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr unsigned int std::numeric_limits<unsigned int>::signaling_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr unsigned int std::numeric_limits<unsigned int>::denorm_min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr long int std::numeric_limits<long int>::min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = -9223372036854775808
   >>>;


;; Function static constexpr long int std::numeric_limits<long int>::max() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 9223372036854775807
   >>>;


;; Function static constexpr long int std::numeric_limits<long int>::lowest() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::numeric_limits<long int>::min ()>>
   >>>;


;; Function static constexpr long int std::numeric_limits<long int>::epsilon() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr long int std::numeric_limits<long int>::round_error() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr long int std::numeric_limits<long int>::infinity() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr long int std::numeric_limits<long int>::quiet_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr long int std::numeric_limits<long int>::signaling_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr long int std::numeric_limits<long int>::denorm_min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr long unsigned int std::numeric_limits<long unsigned int>::min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr long unsigned int std::numeric_limits<long unsigned int>::max() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 18446744073709551615
   >>>;


;; Function static constexpr long unsigned int std::numeric_limits<long unsigned int>::lowest() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::numeric_limits<long unsigned int>::min ()>>
   >>>;


;; Function static constexpr long unsigned int std::numeric_limits<long unsigned int>::epsilon() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr long unsigned int std::numeric_limits<long unsigned int>::round_error() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr long unsigned int std::numeric_limits<long unsigned int>::infinity() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr long unsigned int std::numeric_limits<long unsigned int>::quiet_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr long unsigned int std::numeric_limits<long unsigned int>::signaling_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr long unsigned int std::numeric_limits<long unsigned int>::denorm_min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr long long int std::numeric_limits<long long int>::min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = -9223372036854775808
   >>>;


;; Function static constexpr long long int std::numeric_limits<long long int>::max() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 9223372036854775807
   >>>;


;; Function static constexpr long long int std::numeric_limits<long long int>::lowest() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::numeric_limits<long long int>::min ()>>
   >>>;


;; Function static constexpr long long int std::numeric_limits<long long int>::epsilon() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr long long int std::numeric_limits<long long int>::round_error() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr long long int std::numeric_limits<long long int>::infinity() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr long long int std::numeric_limits<long long int>::quiet_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr long long int std::numeric_limits<long long int>::signaling_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr long long int std::numeric_limits<long long int>::denorm_min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr long long unsigned int std::numeric_limits<long long unsigned int>::min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr long long unsigned int std::numeric_limits<long long unsigned int>::max() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 18446744073709551615
   >>>;


;; Function static constexpr long long unsigned int std::numeric_limits<long long unsigned int>::lowest() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::numeric_limits<long long unsigned int>::min ()>>
   >>>;


;; Function static constexpr long long unsigned int std::numeric_limits<long long unsigned int>::epsilon() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr long long unsigned int std::numeric_limits<long long unsigned int>::round_error() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr long long unsigned int std::numeric_limits<long long unsigned int>::infinity() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr long long unsigned int std::numeric_limits<long long unsigned int>::quiet_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr long long unsigned int std::numeric_limits<long long unsigned int>::signaling_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr long long unsigned int std::numeric_limits<long long unsigned int>::denorm_min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr float std::numeric_limits<float>::min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 1.17549435082228750796873653722224567781866555677208752151e-38
   >>>;


;; Function static constexpr float std::numeric_limits<float>::max() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 3.4028234663852885981170418348451692544e+38
   >>>;


;; Function static constexpr float std::numeric_limits<float>::lowest() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = -3.4028234663852885981170418348451692544e+38
   >>>;


;; Function static constexpr float std::numeric_limits<float>::epsilon() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 1.1920928955078125e-7
   >>>;


;; Function static constexpr float std::numeric_limits<float>::round_error() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 5.0e-1
   >>>;


;; Function static constexpr float std::numeric_limits<float>::infinity() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> =  Inf
   >>>;


;; Function static constexpr float std::numeric_limits<float>::quiet_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> =  Nan
   >>>;


;; Function static constexpr float std::numeric_limits<float>::signaling_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> =  Nan
   >>>;


;; Function static constexpr float std::numeric_limits<float>::denorm_min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 1.40129846432481707092372958328991613128026194187651577176e-45
   >>>;


;; Function static constexpr double std::numeric_limits<double>::min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 2.22507385850720138309023271733240406421921598046233183055e-308
   >>>;


;; Function static constexpr double std::numeric_limits<double>::max() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 1.79769313486231570814527423731704356798070567525844996599e+308
   >>>;


;; Function static constexpr double std::numeric_limits<double>::lowest() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = -1.79769313486231570814527423731704356798070567525844996599e+308
   >>>;


;; Function static constexpr double std::numeric_limits<double>::epsilon() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 2.220446049250313080847263336181640625e-16
   >>>;


;; Function static constexpr double std::numeric_limits<double>::round_error() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 5.0e-1
   >>>;


;; Function static constexpr double std::numeric_limits<double>::infinity() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> =  Inf
   >>>;


;; Function static constexpr double std::numeric_limits<double>::quiet_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> =  Nan
   >>>;


;; Function static constexpr double std::numeric_limits<double>::signaling_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> =  Nan
   >>>;


;; Function static constexpr double std::numeric_limits<double>::denorm_min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 4.94065645841246544176568792868221372365059802614324764425e-324
   >>>;


;; Function static constexpr long double std::numeric_limits<long double>::min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 3.36210314311209350626267781732175260259807934484647124011e-4932
   >>>;


;; Function static constexpr long double std::numeric_limits<long double>::max() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 1.18973149535723176502126385303097020516906332229462420044e+4932
   >>>;


;; Function static constexpr long double std::numeric_limits<long double>::lowest() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = -1.18973149535723176502126385303097020516906332229462420044e+4932
   >>>;


;; Function static constexpr long double std::numeric_limits<long double>::epsilon() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 1.08420217248550443400745280086994171142578125e-19
   >>>;


;; Function static constexpr long double std::numeric_limits<long double>::round_error() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 5.0e-1
   >>>;


;; Function static constexpr long double std::numeric_limits<long double>::infinity() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> =  Inf
   >>>;


;; Function static constexpr long double std::numeric_limits<long double>::quiet_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> =  Nan
   >>>;


;; Function static constexpr long double std::numeric_limits<long double>::signaling_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> =  Nan
   >>>;


;; Function static constexpr long double std::numeric_limits<long double>::denorm_min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 3.64519953188247460252840593361941981639905081569356334372e-4951
   >>>;


;; Function static constexpr _Rep std::chrono::duration_values<_Rep>::min() [with _Rep = long int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::numeric_limits<long int>::lowest ()>>;


;; Function constexpr std::chrono::duration<_Rep, _Period>::duration(const _Rep2&) [with _Rep2 = long int; <template-parameter-2-2> = void; _Rep = long int; _Period = std::ratio<1l, 1000000000l>] (null)
;; enabled by -tree-original


{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct duration *) this)->__r = (long int) *__rep) >>>>>;
}


;; Function static constexpr std::chrono::duration<_Rep, _Period> std::chrono::duration<_Rep, _Period>::min() [with _Rep = long int; _Period = std::ratio<1l, 1000000000l>] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.37285, <<< Unknown tree: aggr_init_expr
  5
  __comp_ctor 
  D.37285
  (struct duration *) <<< Unknown tree: void_cst >>>
  (const long int &) &TARGET_EXPR <D.37281, std::chrono::duration_values<long int>::min ()> >>>>;, D.37285>>;


;; Function static constexpr _Rep std::chrono::duration_values<_Rep>::zero() [with _Rep = long int] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static constexpr std::chrono::duration<_Rep, _Period> std::chrono::duration<_Rep, _Period>::zero() [with _Rep = long int; _Period = std::ratio<1l, 1000000000l>] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.37338, <<< Unknown tree: aggr_init_expr
  5
  __comp_ctor 
  D.37338
  (struct duration *) <<< Unknown tree: void_cst >>>
  (const long int &) &TARGET_EXPR <D.37337, std::chrono::duration_values<long int>::zero ()> >>>>;, D.37338>>;


;; Function constexpr std::chrono::duration<_Rep, _Period>::rep std::chrono::duration<_Rep, _Period>::count() const [with _Rep = long int; _Period = std::ratio<1l, 1000000000l>; std::chrono::duration<_Rep, _Period>::rep = long int] (null)
;; enabled by -tree-original


return <retval> = (rep) ((const struct duration *) this)->__r;


;; Function constexpr bool std::chrono::operator<(const std::chrono::duration<_Rep1, _Period1>&, const std::chrono::duration<_Rep2, _Period2>&) [with _Rep1 = long int; _Period1 = std::ratio<1l, 1000000000l>; _Rep2 = long int; _Period2 = std::ratio<1l, 1000000000l>] (null)
;; enabled by -tree-original


{
  typedef struct __dur1 __dur1;
  typedef struct __dur2 __dur2;
  typedef struct __ct __ct;

  <<cleanup_point return <retval> = std::chrono::duration<long int, std::ratio<1l, 1000000000l> >::count (&TARGET_EXPR <D.37506, *(const struct duration &) (const struct duration *) __lhs>) < std::chrono::duration<long int, std::ratio<1l, 1000000000l> >::count (&TARGET_EXPR <D.37508, *(const struct duration &) (const struct duration *) __rhs>)>>;
}


;; Function constexpr std::chrono::time_point<_Clock, _Dur>::duration std::chrono::time_point<_Clock, _Dur>::time_since_epoch() const [with _Clock = std::chrono::_V2::system_clock; _Dur = std::chrono::duration<long int, std::ratio<1l, 1000000000l> >; std::chrono::time_point<_Clock, _Dur>::duration = std::chrono::duration<long int, std::ratio<1l, 1000000000l> >] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.37602, ((const struct time_point *) this)->__d>>>;


;; Function constexpr std::chrono::duration<_Rep, _Period>::duration(const _Rep2&) [with _Rep2 = long int; <template-parameter-2-2> = void; _Rep = long int; _Period = std::ratio<1l>] (null)
;; enabled by -tree-original


{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct duration *) this)->__r = (long int) *__rep) >>>>>;
}


;; Function static constexpr _ToDur std::chrono::__duration_cast_impl<_ToDur, _CF, _CR, true, false>::__cast(const std::chrono::duration<_Rep, _Period>&) [with _Rep = long int; _Period = std::ratio<1l, 1000000000l>; _ToDur = std::chrono::duration<long int>; _CF = std::ratio<1l, 1000000000l>; _CR = long int] (null)
;; enabled by -tree-original


{
  typedef __to_rep __to_rep;

  <<cleanup_point return <retval> = TARGET_EXPR <D.37840, <<< Unknown tree: aggr_init_expr
  5
  __comp_ctor 
  D.37840
  (struct duration *) <<< Unknown tree: void_cst >>>
  (const long int &) &TARGET_EXPR <D.37836, std::chrono::duration<long int, std::ratio<1l, 1000000000l> >::count ((const struct duration *) __d) / 1000000000> >>>>;, D.37840>>;
}


;; Function constexpr typename std::enable_if<std::chrono::__is_duration<_Tp>::value, _ToDur>::type std::chrono::duration_cast(const std::chrono::duration<_Rep, _Period>&) [with _ToDur = std::chrono::duration<long int>; _Rep = long int; _Period = std::ratio<1l, 1000000000l>; typename std::enable_if<std::chrono::__is_duration<_Tp>::value, _ToDur>::type = std::chrono::duration<long int>] (null)
;; enabled by -tree-original


{
  typedef struct __to_period __to_period;
  typedef __to_rep __to_rep;
  typedef struct __cf __cf;
  typedef __cr __cr;
  typedef struct __dc __dc;

  <<cleanup_point return <retval> = TARGET_EXPR <D.37864, std::chrono::__duration_cast_impl<std::chrono::duration<long int>, std::ratio<1l, 1000000000l>, long int, true, false>::__cast<long int, std::ratio<1l, 1000000000l> > ((const struct duration &) (const struct duration *) __d)>>>;
}


;; Function constexpr std::chrono::duration<_Rep, _Period>::rep std::chrono::duration<_Rep, _Period>::count() const [with _Rep = long int; _Period = std::ratio<1l>; std::chrono::duration<_Rep, _Period>::rep = long int] (null)
;; enabled by -tree-original


return <retval> = (rep) ((const struct duration *) this)->__r;


;; Function static time_t std::chrono::_V2::system_clock::to_time_t(const time_point&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::chrono::duration<long int>::count (&TARGET_EXPR <D.37865, std::chrono::duration_cast<std::chrono::duration<long int>, long int, std::ratio<1l, 1000000000l> > ((const struct duration &) (const struct duration *) &TARGET_EXPR <D.37603, std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::duration<long int, std::ratio<1l, 1000000000l> > >::time_since_epoch ((const struct time_point *) __t)>)>)>>
   >>>;


;; Function constexpr std::chrono::time_point<_Clock, _Dur>::time_point(const duration&) [with _Clock = std::chrono::_V2::system_clock; _Dur = std::chrono::duration<long int>; std::chrono::time_point<_Clock, _Dur>::duration = std::chrono::duration<long int>] (null)
;; enabled by -tree-original


{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct time_point *) this)->__d = *(const struct duration &) (const struct duration *) __dur) >>>>>;
}


;; Function constexpr std::chrono::time_point<_Clock, _Dur>::duration std::chrono::time_point<_Clock, _Dur>::time_since_epoch() const [with _Clock = std::chrono::_V2::system_clock; _Dur = std::chrono::duration<long int>; std::chrono::time_point<_Clock, _Dur>::duration = std::chrono::duration<long int>] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.38081, ((const struct time_point *) this)->__d>>>;


;; Function static constexpr _ToDur std::chrono::__duration_cast_impl<_ToDur, _CF, _CR, false, true>::__cast(const std::chrono::duration<_Rep, _Period>&) [with _Rep = long int; _Period = std::ratio<1l>; _ToDur = std::chrono::duration<long int, std::ratio<1l, 1000000000l> >; _CF = std::ratio<1000000000l, 1l>; _CR = long int] (null)
;; enabled by -tree-original


{
  typedef __to_rep __to_rep;

  <<cleanup_point return <retval> = TARGET_EXPR <D.38140, <<< Unknown tree: aggr_init_expr
  5
  __comp_ctor 
  D.38140
  (struct duration *) <<< Unknown tree: void_cst >>>
  (const long int &) &TARGET_EXPR <D.38139, std::chrono::duration<long int>::count ((const struct duration *) __d) * 1000000000> >>>>;, D.38140>>;
}


;; Function constexpr typename std::enable_if<std::chrono::__is_duration<_Tp>::value, _ToDur>::type std::chrono::duration_cast(const std::chrono::duration<_Rep, _Period>&) [with _ToDur = std::chrono::duration<long int, std::ratio<1l, 1000000000l> >; _Rep = long int; _Period = std::ratio<1l>; typename std::enable_if<std::chrono::__is_duration<_Tp>::value, _ToDur>::type = std::chrono::duration<long int, std::ratio<1l, 1000000000l> >] (null)
;; enabled by -tree-original


{
  typedef struct __to_period __to_period;
  typedef __to_rep __to_rep;
  typedef struct __cf __cf;
  typedef __cr __cr;
  typedef struct __dc __dc;

  <<cleanup_point return <retval> = TARGET_EXPR <D.38141, std::chrono::__duration_cast_impl<std::chrono::duration<long int, std::ratio<1l, 1000000000l> >, std::ratio<1000000000l, 1l>, long int, false, true>::__cast<long int, std::ratio<1l> > ((const struct duration &) (const struct duration *) __d)>>>;
}


;; Function constexpr std::chrono::time_point<_Clock, _Dur>::time_point(const duration&) [with _Clock = std::chrono::_V2::system_clock; _Dur = std::chrono::duration<long int, std::ratio<1l, 1000000000l> >; std::chrono::time_point<_Clock, _Dur>::duration = std::chrono::duration<long int, std::ratio<1l, 1000000000l> >] (null)
;; enabled by -tree-original


{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct time_point *) this)->__d = *(const struct duration &) (const struct duration *) __dur) >>>>>;
}


;; Function constexpr typename std::enable_if<std::chrono::__is_duration<_Tp>::value, std::chrono::time_point<_Clock, _ToDur> >::type std::chrono::time_point_cast(const std::chrono::time_point<_Clock, _Dur>&) [with _ToDur = std::chrono::duration<long int, std::ratio<1l, 1000000000l> >; _Clock = std::chrono::_V2::system_clock; _Dur = std::chrono::duration<long int>; typename std::enable_if<std::chrono::__is_duration<_Tp>::value, std::chrono::time_point<_Clock, _ToDur> >::type = std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::duration<long int, std::ratio<1l, 1000000000l> > >] (null)
;; enabled by -tree-original


{
  typedef struct __time_point __time_point;

  <<cleanup_point return <retval> = TARGET_EXPR <D.38164, <<< Unknown tree: aggr_init_expr
  5
  __comp_ctor 
  D.38164
  (struct time_point *) <<< Unknown tree: void_cst >>>
  (const struct duration &) (const struct duration *) &TARGET_EXPR <D.38142, std::chrono::duration_cast<std::chrono::duration<long int, std::ratio<1l, 1000000000l> >, long int, std::ratio<1l> > ((const struct duration &) (const struct duration *) &TARGET_EXPR <D.38082, std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::duration<long int> >::time_since_epoch ((const struct time_point *) __t)>)> >>>>;, D.38164>>;
}


;; Function static std::chrono::_V2::system_clock::time_point std::chrono::_V2::system_clock::from_time_t(time_t) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    typedef struct __from __from;

    <<cleanup_point return <retval> = TARGET_EXPR <D.38183, std::chrono::time_point_cast<std::chrono::duration<long int, std::ratio<1l, 1000000000l> >, std::chrono::_V2::system_clock, std::chrono::duration<long int> > ((const struct time_point &) (const struct time_point *) &TARGET_EXPR <D.38057, <<< Unknown tree: aggr_init_expr
  5
  __comp_ctor 
  D.38057
  (struct time_point *) <<< Unknown tree: void_cst >>>
  (const struct duration &) (const struct duration *) &TARGET_EXPR <D.37870, <<< Unknown tree: aggr_init_expr
  5
  __comp_ctor 
  D.37870
  (struct duration *) <<< Unknown tree: void_cst >>>
  (const long int &) (const long int *) &__t >>>> >>>>)>>>;
  }
   >>>;


;; Function constexpr std::chrono::duration<_Rep, _Period>::duration(const _Rep2&) [with _Rep2 = long double; <template-parameter-2-2> = void; _Rep = long double; _Period = std::ratio<3600l>] (null)
;; enabled by -tree-original


{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct duration *) this)->__r = (long double) *__rep) >>>>>;
}


;; Function constexpr std::chrono::duration<long double, std::ratio<3600l> > std::literals::chrono_literals::operator""h(long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.38526, <<< Unknown tree: aggr_init_expr
  5
  __comp_ctor 
  D.38526
  (struct duration *) <<< Unknown tree: void_cst >>>
  (const long double &) (const long double *) &__hours >>>>;, D.38526>>;


;; Function constexpr std::chrono::duration<_Rep, _Period>::duration(const _Rep2&) [with _Rep2 = long double; <template-parameter-2-2> = void; _Rep = long double; _Period = std::ratio<60l>] (null)
;; enabled by -tree-original


{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct duration *) this)->__r = (long double) *__rep) >>>>>;
}


;; Function constexpr std::chrono::duration<long double, std::ratio<60l> > std::literals::chrono_literals::operator""min(long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.38918, <<< Unknown tree: aggr_init_expr
  5
  __comp_ctor 
  D.38918
  (struct duration *) <<< Unknown tree: void_cst >>>
  (const long double &) (const long double *) &__mins >>>>;, D.38918>>;


;; Function constexpr std::chrono::duration<_Rep, _Period>::duration(const _Rep2&) [with _Rep2 = long double; <template-parameter-2-2> = void; _Rep = long double; _Period = std::ratio<1l>] (null)
;; enabled by -tree-original


{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct duration *) this)->__r = (long double) *__rep) >>>>>;
}


;; Function constexpr std::chrono::duration<long double> std::literals::chrono_literals::operator""s(long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.39299, <<< Unknown tree: aggr_init_expr
  5
  __comp_ctor 
  D.39299
  (struct duration *) <<< Unknown tree: void_cst >>>
  (const long double &) (const long double *) &__secs >>>>;, D.39299>>;


;; Function constexpr std::chrono::duration<_Rep, _Period>::duration(const _Rep2&) [with _Rep2 = long double; <template-parameter-2-2> = void; _Rep = long double; _Period = std::ratio<1l, 1000l>] (null)
;; enabled by -tree-original


{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct duration *) this)->__r = (long double) *__rep) >>>>>;
}


;; Function constexpr std::chrono::duration<long double, std::ratio<1l, 1000l> > std::literals::chrono_literals::operator""ms(long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.39512, <<< Unknown tree: aggr_init_expr
  5
  __comp_ctor 
  D.39512
  (struct duration *) <<< Unknown tree: void_cst >>>
  (const long double &) (const long double *) &__msecs >>>>;, D.39512>>;


;; Function constexpr std::chrono::duration<_Rep, _Period>::duration(const _Rep2&) [with _Rep2 = long double; <template-parameter-2-2> = void; _Rep = long double; _Period = std::ratio<1l, 1000000l>] (null)
;; enabled by -tree-original


{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct duration *) this)->__r = (long double) *__rep) >>>>>;
}


;; Function constexpr std::chrono::duration<long double, std::ratio<1l, 1000000l> > std::literals::chrono_literals::operator""us(long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.39903, <<< Unknown tree: aggr_init_expr
  5
  __comp_ctor 
  D.39903
  (struct duration *) <<< Unknown tree: void_cst >>>
  (const long double &) (const long double *) &__usecs >>>>;, D.39903>>;


;; Function constexpr std::chrono::duration<_Rep, _Period>::duration(const _Rep2&) [with _Rep2 = long double; <template-parameter-2-2> = void; _Rep = long double; _Period = std::ratio<1l, 1000000000l>] (null)
;; enabled by -tree-original


{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct duration *) this)->__r = (long double) *__rep) >>>>>;
}


;; Function constexpr std::chrono::duration<long double, std::ratio<1l, 1000000000l> > std::literals::chrono_literals::operator""ns(long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.40267, <<< Unknown tree: aggr_init_expr
  5
  __comp_ctor 
  D.40267
  (struct duration *) <<< Unknown tree: void_cst >>>
  (const long double &) (const long double *) &__nsecs >>>>;, D.40267>>;


;; Function const char* std::type_info::name() const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (signed char) *(const char *) ((const struct type_info *) this)->__name == 42 ? (const char *) ((const struct type_info *) this)->__name + 1 : (const char *) ((const struct type_info *) this)->__name
   >>>;


;; Function bool std::type_info::before(const std::type_info&) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (signed char) *(const char *) ((const struct type_info *) this)->__name == 42 && (signed char) *(const char *) __arg->__name == 42 ? (const char *) ((const struct type_info *) this)->__name < (const char *) __arg->__name : __builtin_strcmp ((const char *) ((const struct type_info *) this)->__name, (const char *) __arg->__name) < 0
   >>>;


;; Function bool std::type_info::operator==(const std::type_info&) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (const char *) ((const struct type_info *) this)->__name == (const char *) __arg->__name || (signed char) *(const char *) ((const struct type_info *) this)->__name != 42 && __builtin_strcmp ((const char *) ((const struct type_info *) this)->__name, (const char *) __arg->__name) == 0
   >>>;


;; Function bool std::type_info::operator!=(const std::type_info&) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = !std::type_info::operator== (this, (const struct type_info &) (const struct type_info *) __arg)>>
   >>>;


;; Function std::size_t std::type_info::hash_code() const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::_Hash_bytes ((const void *) std::type_info::name (this), __builtin_strlen (std::type_info::name (this)), 3339675911)>>
   >>>;


;; Function std::type_info::type_info(const char*) (null)
;; enabled by -tree-original


{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct type_info *) this)->_vptr.type_info = &_ZTVSt9type_info + 16) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct type_info *) this)->__name = __n) >>>>>;
}


;; Function std::bad_cast::bad_cast() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::exception::exception (&((struct bad_cast *) this)->D.40379) >>>>>;
    try
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct bad_cast *) this)->D.40379._vptr.exception = &_ZTVSt8bad_cast + 16) >>>>>;
      }
    catch
      {
        std::exception::~exception (&((struct bad_cast *) this)->D.40379);
      }
  }
   >>>;


;; Function std::bad_typeid::bad_typeid() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::exception::exception (&((struct bad_typeid *) this)->D.40408) >>>>>;
    try
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct bad_typeid *) this)->D.40408._vptr.exception = &_ZTVSt10bad_typeid + 16) >>>>>;
      }
    catch
      {
        std::exception::~exception (&((struct bad_typeid *) this)->D.40408);
      }
  }
   >>>;


;; Function void std::__uses_alloc0::_Sink::operator=(const void*) (null)
;; enabled by -tree-original





;; Function void std::tuple<>::swap(std::tuple<>&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  
   >>>;


;; Function void* std::_Any_data::_M_access() (null)
;; enabled by -tree-original


return <retval> = (void *) &((union _Any_data *) this)->_M_pod_data[0];


;; Function const void* std::_Any_data::_M_access() const (null)
;; enabled by -tree-original


return <retval> = (const void *) &((const union _Any_data *) this)->_M_pod_data[0];


;; Function std::_Function_base::_Function_base() (null)
;; enabled by -tree-original


{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Function_base *) this)->_M_manager = 0B) >>>>>;
}


;; Function std::_Function_base::~_Function_base() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (((struct _Function_base *) this)->_M_manager != 0B)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) ((struct _Function_base *) this)->_M_manager ((union _Any_data &) &((struct _Function_base *) this)->_M_functor, (const union _Any_data &) (const union _Any_data *) &((struct _Function_base *) this)->_M_functor, 3) >>>>>;
          }
      }
    finally
      {
        *(struct 
        {
          union _Any_data _M_functor;
          bool (*_Manager_type) (union _Any_data &, const union _Any_data &, _Manager_operation) _M_manager;
        } &) this = {CLOBBER};
      }
  }
  <D.45293>:;
   >>>;


;; Function bool std::_Function_base::_M_empty() const (null)
;; enabled by -tree-original


return <retval> = (bool (*_Manager_type) (union _Any_data &, const union _Any_data &, _Manager_operation)) ((const struct _Function_base *) this)->_M_manager == 0B;


;; Function virtual const char* __gnu_cxx::__concurrence_lock_error::what() const (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  return <retval> = (const char *) "__gnu_cxx::__concurrence_lock_error"
   >>>;


;; Function virtual const char* __gnu_cxx::__concurrence_unlock_error::what() const (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  return <retval> = (const char *) "__gnu_cxx::__concurrence_unlock_error"
   >>>;


;; Function virtual const char* __gnu_cxx::__concurrence_broadcast_error::what() const (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  return <retval> = (const char *) "__gnu_cxx::__concurrence_broadcast_error"
   >>>;


;; Function virtual const char* __gnu_cxx::__concurrence_wait_error::what() const (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  return <retval> = (const char *) "__gnu_cxx::__concurrence_wait_error"
   >>>;


;; Function __gnu_cxx::__concurrence_lock_error::__concurrence_lock_error() (null)
;; enabled by -tree-original


{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::exception::exception (&((struct __concurrence_lock_error *) this)->D.46335) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct __concurrence_lock_error *) this)->D.46335._vptr.exception = &_ZTVN9__gnu_cxx24__concurrence_lock_errorE + 16) >>>>>;
    }
  catch
    {
      std::exception::~exception (&((struct __concurrence_lock_error *) this)->D.46335);
    }
}


;; Function constexpr std::exception::exception(const std::exception&) (null)
;; enabled by -tree-original


{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct exception *) this)->_vptr.exception = &_ZTVSt9exception + 16) >>>>>;
}


;; Function constexpr __gnu_cxx::__concurrence_lock_error::__concurrence_lock_error(__gnu_cxx::__concurrence_lock_error&&) (null)
;; enabled by -tree-original


{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::exception::exception (&((struct __concurrence_lock_error *) this)->D.46335, (const struct exception &) (const struct exception *) NON_LVALUE_EXPR <(struct exception &) &((struct __concurrence_lock_error *) D.46433)->D.46335>) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct __concurrence_lock_error *) this)->D.46335._vptr.exception = &_ZTVN9__gnu_cxx24__concurrence_lock_errorE + 16) >>>>>;
    }
  catch
    {
      std::exception::~exception (&((struct __concurrence_lock_error *) this)->D.46335);
    }
}


;; Function void __gnu_cxx::__throw_concurrence_lock_error() (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  <<< Unknown tree: throw_expr
  <<cleanup_point TARGET_EXPR <D.46447, __cxa_allocate_exception (8)>;, *(struct __concurrence_lock_error *) D.46447 = TARGET_EXPR <D.46444, <<< Unknown tree: aggr_init_expr
  4
  __comp_ctor 
  D.46444
  (struct __concurrence_lock_error *) <<< Unknown tree: void_cst >>> >>>>;>>;, __cxa_throw (D.46447, (void *) &_ZTIN9__gnu_cxx24__concurrence_lock_errorE, __comp_dtor ); >>> >>>>>;


;; Function __gnu_cxx::__concurrence_unlock_error::__concurrence_unlock_error() (null)
;; enabled by -tree-original


{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::exception::exception (&((struct __concurrence_unlock_error *) this)->D.46362) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct __concurrence_unlock_error *) this)->D.46362._vptr.exception = &_ZTVN9__gnu_cxx26__concurrence_unlock_errorE + 16) >>>>>;
    }
  catch
    {
      std::exception::~exception (&((struct __concurrence_unlock_error *) this)->D.46362);
    }
}


;; Function constexpr __gnu_cxx::__concurrence_unlock_error::__concurrence_unlock_error(__gnu_cxx::__concurrence_unlock_error&&) (null)
;; enabled by -tree-original


{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::exception::exception (&((struct __concurrence_unlock_error *) this)->D.46362, (const struct exception &) (const struct exception *) NON_LVALUE_EXPR <(struct exception &) &((struct __concurrence_unlock_error *) D.46467)->D.46362>) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct __concurrence_unlock_error *) this)->D.46362._vptr.exception = &_ZTVN9__gnu_cxx26__concurrence_unlock_errorE + 16) >>>>>;
    }
  catch
    {
      std::exception::~exception (&((struct __concurrence_unlock_error *) this)->D.46362);
    }
}


;; Function void __gnu_cxx::__throw_concurrence_unlock_error() (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  <<< Unknown tree: throw_expr
  <<cleanup_point TARGET_EXPR <D.46479, __cxa_allocate_exception (8)>;, *(struct __concurrence_unlock_error *) D.46479 = TARGET_EXPR <D.46478, <<< Unknown tree: aggr_init_expr
  4
  __comp_ctor 
  D.46478
  (struct __concurrence_unlock_error *) <<< Unknown tree: void_cst >>> >>>>;>>;, __cxa_throw (D.46479, (void *) &_ZTIN9__gnu_cxx26__concurrence_unlock_errorE, __comp_dtor ); >>> >>>>>;


;; Function __gnu_cxx::__concurrence_broadcast_error::__concurrence_broadcast_error() (null)
;; enabled by -tree-original


{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::exception::exception (&((struct __concurrence_broadcast_error *) this)->D.46389) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct __concurrence_broadcast_error *) this)->D.46389._vptr.exception = &_ZTVN9__gnu_cxx29__concurrence_broadcast_errorE + 16) >>>>>;
    }
  catch
    {
      std::exception::~exception (&((struct __concurrence_broadcast_error *) this)->D.46389);
    }
}


;; Function constexpr __gnu_cxx::__concurrence_broadcast_error::__concurrence_broadcast_error(__gnu_cxx::__concurrence_broadcast_error&&) (null)
;; enabled by -tree-original


{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::exception::exception (&((struct __concurrence_broadcast_error *) this)->D.46389, (const struct exception &) (const struct exception *) NON_LVALUE_EXPR <(struct exception &) &((struct __concurrence_broadcast_error *) D.46495)->D.46389>) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct __concurrence_broadcast_error *) this)->D.46389._vptr.exception = &_ZTVN9__gnu_cxx29__concurrence_broadcast_errorE + 16) >>>>>;
    }
  catch
    {
      std::exception::~exception (&((struct __concurrence_broadcast_error *) this)->D.46389);
    }
}


;; Function void __gnu_cxx::__throw_concurrence_broadcast_error() (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  <<< Unknown tree: throw_expr
  <<cleanup_point TARGET_EXPR <D.46507, __cxa_allocate_exception (8)>;, *(struct __concurrence_broadcast_error *) D.46507 = TARGET_EXPR <D.46506, <<< Unknown tree: aggr_init_expr
  4
  __comp_ctor 
  D.46506
  (struct __concurrence_broadcast_error *) <<< Unknown tree: void_cst >>> >>>>;>>;, __cxa_throw (D.46507, (void *) &_ZTIN9__gnu_cxx29__concurrence_broadcast_errorE, __comp_dtor ); >>> >>>>>;


;; Function __gnu_cxx::__concurrence_wait_error::__concurrence_wait_error() (null)
;; enabled by -tree-original


{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::exception::exception (&((struct __concurrence_wait_error *) this)->D.46416) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct __concurrence_wait_error *) this)->D.46416._vptr.exception = &_ZTVN9__gnu_cxx24__concurrence_wait_errorE + 16) >>>>>;
    }
  catch
    {
      std::exception::~exception (&((struct __concurrence_wait_error *) this)->D.46416);
    }
}


;; Function constexpr __gnu_cxx::__concurrence_wait_error::__concurrence_wait_error(__gnu_cxx::__concurrence_wait_error&&) (null)
;; enabled by -tree-original


{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::exception::exception (&((struct __concurrence_wait_error *) this)->D.46416, (const struct exception &) (const struct exception *) NON_LVALUE_EXPR <(struct exception &) &((struct __concurrence_wait_error *) D.46523)->D.46416>) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct __concurrence_wait_error *) this)->D.46416._vptr.exception = &_ZTVN9__gnu_cxx24__concurrence_wait_errorE + 16) >>>>>;
    }
  catch
    {
      std::exception::~exception (&((struct __concurrence_wait_error *) this)->D.46416);
    }
}


;; Function void __gnu_cxx::__throw_concurrence_wait_error() (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  <<< Unknown tree: throw_expr
  <<cleanup_point TARGET_EXPR <D.46535, __cxa_allocate_exception (8)>;, *(struct __concurrence_wait_error *) D.46535 = TARGET_EXPR <D.46534, <<< Unknown tree: aggr_init_expr
  4
  __comp_ctor 
  D.46534
  (struct __concurrence_wait_error *) <<< Unknown tree: void_cst >>> >>>>;>>;, __cxa_throw (D.46535, (void *) &_ZTIN9__gnu_cxx24__concurrence_wait_errorE, __comp_dtor ); >>> >>>>>;


;; Function __gnu_cxx::__mutex::__mutex() (null)
;; enabled by -tree-original


{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct __mutex *) this)->_M_mutex = {.__data={.__lock=0, .__count=0, .__owner=0, .__nusers=0, .__kind=0, .__spins=0, .__elision=0, .__list={.__prev=0B, .__next=0B}}}) >>>>>;
}


;; Function void __gnu_cxx::__mutex::lock() (null)
;; enabled by -tree-original


if (<<cleanup_point __gthread_active_p () != 0>>)
  {
    if (<<cleanup_point __gthread_mutex_lock (&((struct __mutex *) this)->_M_mutex) != 0>>)
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__throw_concurrence_lock_error () >>>>>;
      }
  }


;; Function void __gnu_cxx::__mutex::unlock() (null)
;; enabled by -tree-original


if (<<cleanup_point __gthread_active_p () != 0>>)
  {
    if (<<cleanup_point __gthread_mutex_unlock (&((struct __mutex *) this)->_M_mutex) != 0>>)
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__throw_concurrence_unlock_error () >>>>>;
      }
  }


;; Function __gthread_mutex_t* __gnu_cxx::__mutex::gthread_mutex() (null)
;; enabled by -tree-original


return <retval> = &((struct __mutex *) this)->_M_mutex;


;; Function __gnu_cxx::__recursive_mutex::__recursive_mutex() (null)
;; enabled by -tree-original


{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct __recursive_mutex *) this)->_M_mutex = {.__data={.__lock=0, .__count=0, .__owner=0, .__nusers=0, .__kind=1, .__spins=0, .__elision=0, .__list={.__prev=0B, .__next=0B}}}) >>>>>;
}


;; Function void __gnu_cxx::__recursive_mutex::lock() (null)
;; enabled by -tree-original


if (<<cleanup_point __gthread_active_p () != 0>>)
  {
    if (<<cleanup_point __gthread_recursive_mutex_lock (&((struct __recursive_mutex *) this)->_M_mutex) != 0>>)
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__throw_concurrence_lock_error () >>>>>;
      }
  }


;; Function void __gnu_cxx::__recursive_mutex::unlock() (null)
;; enabled by -tree-original


if (<<cleanup_point __gthread_active_p () != 0>>)
  {
    if (<<cleanup_point __gthread_recursive_mutex_unlock (&((struct __recursive_mutex *) this)->_M_mutex) != 0>>)
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__throw_concurrence_unlock_error () >>>>>;
      }
  }


;; Function __gthread_recursive_mutex_t* __gnu_cxx::__recursive_mutex::gthread_recursive_mutex() (null)
;; enabled by -tree-original


return <retval> = &((struct __recursive_mutex *) this)->_M_mutex;


;; Function __gnu_cxx::__scoped_lock::__scoped_lock(__gnu_cxx::__scoped_lock::__mutex_type&) (null)
;; enabled by -tree-original


{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct __scoped_lock *) this)->_M_device = (struct __mutex_type &) (struct __mutex_type *) __name) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__mutex::lock ((struct __mutex_type *) ((struct __scoped_lock *) this)->_M_device) >>>>>;
}


;; Function __gnu_cxx::__scoped_lock::~__scoped_lock() (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  {
    try
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__mutex::unlock ((struct __mutex_type *) ((struct __scoped_lock *) this)->_M_device) >>>>>;
      }
    finally
      {
        *(struct 
        {
          struct __mutex_type & _M_device;
        } &) this = {CLOBBER};
      }
  }
  <D.46675>:;
   >>>;


;; Function __gnu_cxx::__cond::__cond() (null)
;; enabled by -tree-original


{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct __cond *) this)->_M_cond = {.__data={.__lock=0, .__futex=0, .__total_seq=0, .__wakeup_seq=0, .__woken_seq=0, .__mutex=0B, .__nwaiters=0, .__broadcast_seq=0}}) >>>>>;
}


;; Function void __gnu_cxx::__cond::broadcast() (null)
;; enabled by -tree-original


if (<<cleanup_point __gthread_active_p () != 0>>)
  {
    if (<<cleanup_point __gthread_cond_broadcast (&((struct __cond *) this)->_M_cond) != 0>>)
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__throw_concurrence_broadcast_error () >>>>>;
      }
  }


;; Function void __gnu_cxx::__cond::wait(__gnu_cxx::__mutex*) (null)
;; enabled by -tree-original


if (<<cleanup_point __gthread_cond_wait (&((struct __cond *) this)->_M_cond, __gnu_cxx::__mutex::gthread_mutex (NON_LVALUE_EXPR <mutex>)) != 0>>)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__throw_concurrence_wait_error () >>>>>;
  }


;; Function void __gnu_cxx::__cond::wait_recursive(__gnu_cxx::__recursive_mutex*) (null)
;; enabled by -tree-original


if (<<cleanup_point __gthread_cond_wait_recursive (&((struct __cond *) this)->_M_cond, __gnu_cxx::__recursive_mutex::gthread_recursive_mutex (NON_LVALUE_EXPR <mutex>)) != 0>>)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__throw_concurrence_wait_error () >>>>>;
  }


;; Function std::bad_weak_ptr::bad_weak_ptr() (null)
;; enabled by -tree-original


{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::exception::exception (&((struct bad_weak_ptr *) this)->D.47588) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct bad_weak_ptr *) this)->D.47588._vptr.exception = &_ZTVSt12bad_weak_ptr + 16) >>>>>;
    }
  catch
    {
      std::exception::~exception (&((struct bad_weak_ptr *) this)->D.47588);
    }
}


;; Function constexpr std::bad_weak_ptr::bad_weak_ptr(const std::bad_weak_ptr&) (null)
;; enabled by -tree-original


{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::exception::exception (&((struct bad_weak_ptr *) this)->D.47588, (const struct exception &) &((const struct bad_weak_ptr *) D.47595)->D.47588) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct bad_weak_ptr *) this)->D.47588._vptr.exception = &_ZTVSt12bad_weak_ptr + 16) >>>>>;
    }
  catch
    {
      std::exception::~exception (&((struct bad_weak_ptr *) this)->D.47588);
    }
}


;; Function void std::__throw_bad_weak_ptr() (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  <<< Unknown tree: throw_expr
  <<cleanup_point TARGET_EXPR <D.47607, __cxa_allocate_exception (8)>;, *(struct bad_weak_ptr *) D.47607 = TARGET_EXPR <D.47606, <<< Unknown tree: aggr_init_expr
  4
  __comp_ctor 
  D.47606
  (struct bad_weak_ptr *) <<< Unknown tree: void_cst >>> >>>>;>>;, __cxa_throw (D.47607, (void *) &_ZTISt12bad_weak_ptr, __comp_dtor ); >>> >>>>>;


;; Function void std::_Sp_counted_base<_Lp>::_M_add_ref_lock() [with __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0u] (null)
;; enabled by -tree-original


if (((struct _Sp_counted_base *) this)->_M_use_count == 0)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_bad_weak_ptr () >>>>>;
  }
<<cleanup_point <<< Unknown tree: expr_stmt
  (void)  ++((struct _Sp_counted_base *) this)->_M_use_count >>>>>;


;; Function void std::_Sp_counted_base<_Lp>::_M_add_ref_lock() [with __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)1u] (null)
;; enabled by -tree-original


{
  struct __scoped_lock sentry;

    struct __scoped_lock sentry;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__scoped_lock::__scoped_lock (&sentry, (struct __mutex_type &) &((struct _Sp_counted_base *) this)->D.47846.D.47644) >>>>>;
  try
    {
      if (<<cleanup_point __gnu_cxx::__exchange_and_add_dispatch (&((struct _Sp_counted_base *) this)->_M_use_count, 1) == 0>>)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Sp_counted_base *) this)->_M_use_count = 0) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_bad_weak_ptr () >>>>>;
        }
    }
  finally
    {
      __gnu_cxx::__scoped_lock::~__scoped_lock (&sentry);
    }
}


;; Function void std::_Sp_counted_base<_Lp>::_M_add_ref_lock() [with __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)2u] (null)
;; enabled by -tree-original


{
  _Atomic_word __count;

    _Atomic_word __count;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__count = (_Atomic_word) std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2u>::_M_get_use_count (this)) >>>>>;
  while (1)
    {
      if (__count == 0)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_bad_weak_ptr () >>>>>;
        }
      if (<<cleanup_point !__atomic_compare_exchange_4 ((volatile void *) &((struct _Sp_counted_base *) this)->_M_use_count, (void *) &__count, (unsigned int) (__count + 1), 1, 4, 0)>>) (void) 0; else goto <D.47933>;
    }
  <D.47933>:;
}


;; Function bool std::_Sp_counted_base<_Lp>::_M_add_ref_lock_nothrow() [with __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0u] (null)
;; enabled by -tree-original


if (((struct _Sp_counted_base *) this)->_M_use_count == 0)
  {
    return <retval> = 0;
  }
<<cleanup_point <<< Unknown tree: expr_stmt
  (void)  ++((struct _Sp_counted_base *) this)->_M_use_count >>>>>;
return <retval> = 1;


;; Function bool std::_Sp_counted_base<_Lp>::_M_add_ref_lock_nothrow() [with __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)1u] (null)
;; enabled by -tree-original


{
  struct __scoped_lock sentry;

    struct __scoped_lock sentry;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__scoped_lock::__scoped_lock (&sentry, (struct __mutex_type &) &((struct _Sp_counted_base *) this)->D.47846.D.47644) >>>>>;
  try
    {
      if (<<cleanup_point __gnu_cxx::__exchange_and_add_dispatch (&((struct _Sp_counted_base *) this)->_M_use_count, 1) == 0>>)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Sp_counted_base *) this)->_M_use_count = 0) >>>>>;
          return <retval> = 0;
        }
      return <retval> = 1;
    }
  finally
    {
      __gnu_cxx::__scoped_lock::~__scoped_lock (&sentry);
    }
}


;; Function bool std::_Sp_counted_base<_Lp>::_M_add_ref_lock_nothrow() [with __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)2u] (null)
;; enabled by -tree-original


{
  _Atomic_word __count;

    _Atomic_word __count;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__count = (_Atomic_word) std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2u>::_M_get_use_count (this)) >>>>>;
  while (1)
    {
      if (__count == 0)
        {
          return <retval> = 0;
        }
      if (<<cleanup_point !__atomic_compare_exchange_4 ((volatile void *) &((struct _Sp_counted_base *) this)->_M_use_count, (void *) &__count, (unsigned int) (__count + 1), 1, 4, 0)>>) (void) 0; else goto <D.47946>;
    }
  <D.47946>:;
  return <retval> = 1;
}


;; Function void std::_Sp_counted_base<_Lp>::_M_add_ref_copy() [with __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0u] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void)  ++((struct _Sp_counted_base *) this)->_M_use_count >>>>>;


;; Function void std::_Sp_counted_base<_Lp>::_M_release() [with __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0u] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  if (<<cleanup_point  --((struct _Sp_counted_base *) this)->_M_use_count == 0>>)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  OBJ_TYPE_REF(*(((struct _Sp_counted_base *) this)->_vptr._Sp_counted_base + 16);(struct _Sp_counted_base)this->2) (this) >>>>>;
      if (<<cleanup_point  --((struct _Sp_counted_base *) this)->_M_weak_count == 0>>)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  OBJ_TYPE_REF(*(((struct _Sp_counted_base *) this)->_vptr._Sp_counted_base + 24);(struct _Sp_counted_base)this->3) (this) >>>>>;
        }
    }
   >>>;


;; Function void std::_Sp_counted_base<_Lp>::_M_weak_add_ref() [with __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0u] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void)  ++((struct _Sp_counted_base *) this)->_M_weak_count >>>>>
   >>>;


;; Function void std::_Sp_counted_base<_Lp>::_M_weak_release() [with __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0u] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  if (<<cleanup_point  --((struct _Sp_counted_base *) this)->_M_weak_count == 0>>)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  OBJ_TYPE_REF(*(((struct _Sp_counted_base *) this)->_vptr._Sp_counted_base + 24);(struct _Sp_counted_base)this->3) (this) >>>>>;
    }
   >>>;


;; Function long int std::_Sp_counted_base<_Lp>::_M_get_use_count() const [with __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0u] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (long int) ((const struct _Sp_counted_base *) this)->_M_use_count
   >>>;


;; Function void std::_Sp_counted_ptr<_Ptr, _Lp>::_M_dispose() [with _Ptr = std::nullptr_t; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0u] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  
   >>>;


;; Function void std::_Sp_counted_ptr<_Ptr, _Lp>::_M_dispose() [with _Ptr = std::nullptr_t; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)1u] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  
   >>>;


;; Function void std::_Sp_counted_ptr<_Ptr, _Lp>::_M_dispose() [with _Ptr = std::nullptr_t; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)2u] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  
   >>>;


;; Function constexpr std::memory_order std::operator|(std::memory_order, std::__memory_order_modifier) (null)
;; enabled by -tree-original


return <retval> = (memory_order) ((int) __m | (int) __mod);


;; Function constexpr std::memory_order std::operator&(std::memory_order, std::__memory_order_modifier) (null)
;; enabled by -tree-original


return <retval> = (memory_order) ((int) __m & (int) __mod);


;; Function constexpr std::memory_order std::__cmpexch_failure_order2(std::memory_order) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = __m != 4 ? __m != 3 ? __m : 0 : 2
   >>>;


;; Function constexpr std::memory_order std::__cmpexch_failure_order(std::memory_order) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (memory_order) ((int) std::__cmpexch_failure_order2 (std::operator& (__m, 65535)) | (int) std::operator& (__m, 4294901760))>>
   >>>;


;; Function void std::atomic_thread_fence(std::memory_order) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  __atomic_thread_fence ((int) __m) >>>>>
   >>>;


;; Function void std::atomic_signal_fence(std::memory_order) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  __atomic_signal_fence ((int) __m) >>>>>
   >>>;


;; Function constexpr std::atomic_flag::atomic_flag(bool) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct atomic_flag *) this)->D.50109 = {._M_i=std::atomic_flag::_S_init ((int) __i)}) >>>>>;
  }
   >>>;


;; Function bool std::atomic_flag::test_and_set(std::memory_order) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = __atomic_test_and_set ((volatile void *) &((struct atomic_flag *) this)->D.50109._M_i, (int) __m)>>
   >>>;


;; Function bool std::atomic_flag::test_and_set(std::memory_order) volatile (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = __atomic_test_and_set ((volatile void *) &((volatile struct atomic_flag *) this)->D.50109._M_i, (int) __m)>>
   >>>;


;; Function void std::atomic_flag::clear(std::memory_order) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    memory_order __b;

        memory_order __b;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__b = std::operator& (__m, 65535)) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  __atomic_clear ((volatile void *) &((struct atomic_flag *) this)->D.50109._M_i, (int) __m) >>>>>;
  }
   >>>;


;; Function void std::atomic_flag::clear(std::memory_order) volatile (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    memory_order __b;

        memory_order __b;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__b = std::operator& (__m, 65535)) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  __atomic_clear ((volatile void *) &((volatile struct atomic_flag *) this)->D.50109._M_i, (int) __m) >>>>>;
  }
   >>>;


;; Function static constexpr std::__atomic_flag_data_type std::atomic_flag::_S_init(bool) (null)
;; enabled by -tree-original


return <retval> = __i;


;; Function void* std::align(std::size_t, std::size_t, void*&, std::size_t&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    const long unsigned int __intptr = (uintptr_t) *__ptr;
    const long unsigned int __aligned = ((long unsigned int) __intptr + (long unsigned int) __align) + 18446744073709551615 & -NON_LVALUE_EXPR <__align>;
    const long unsigned int __diff = (long unsigned int) __aligned - (long unsigned int) __intptr;

        const long unsigned int __intptr = (uintptr_t) *__ptr;
        const long unsigned int __aligned = ((long unsigned int) __intptr + (long unsigned int) __align) + 18446744073709551615 & -NON_LVALUE_EXPR <__align>;
        const long unsigned int __diff = (long unsigned int) __aligned - (long unsigned int) __intptr;
    if (__size + (long unsigned int) __diff > *__space)
      {
        return <retval> = 0B;
      }
    else
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__space = *__space - NON_LVALUE_EXPR <__diff>) >>>>>;
        <<cleanup_point return <retval> = *__ptr = (void *) __aligned>>;
      }
  }
   >>>;


;; Function std::thread::id::id() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct id *) this)->_M_thread = 0) >>>>>;
  }
   >>>;


;; Function std::thread::id::id(std::thread::native_handle_type) (null)
;; enabled by -tree-original


{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct id *) this)->_M_thread = __id) >>>>>;
}


;; Function bool std::operator==(std::thread::id, std::thread::id) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = __gthread_equal (__x._M_thread, __y._M_thread) != 0>>
   >>>;


;; Function bool std::operator<(std::thread::id, std::thread::id) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = __x._M_thread < __y._M_thread
   >>>;


;; Function std::thread::thread(std::thread&&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::thread::id::id (&((struct thread *) this)->_M_id) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::thread::swap (this, (struct thread &) (struct thread *) __t) >>>>>;
  }
   >>>;


;; Function std::thread::~thread() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (<<cleanup_point std::thread::joinable (this)>>)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  std::terminate () >>>>>;
          }
      }
    finally
      {
        *(struct 
        {
          struct id _M_id;
        } &) this = {CLOBBER};
      }
  }
  <D.52891>:;
   >>>;


;; Function std::thread& std::thread::operator=(std::thread&&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  if (<<cleanup_point std::thread::joinable (this)>>)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::terminate () >>>>>;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::thread::swap (this, (struct thread &) (struct thread *) __t) >>>>>;
  return <retval> = (struct thread &) (struct thread *) this;
   >>>;


;; Function void std::thread::swap(std::thread&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::swap<std::thread::id> ((struct id &) &((struct thread *) this)->_M_id, (struct id &) &__t->_M_id) >>>>>
   >>>;


;; Function bool std::thread::joinable() const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = !std::operator== (TARGET_EXPR <D.53254, ((const struct thread *) this)->_M_id>, TARGET_EXPR <D.53249, <<< Unknown tree: aggr_init_expr
  4
  __comp_ctor 
  D.53249
  (struct id *) <<< Unknown tree: void_cst >>> >>>>)>>
   >>>;


;; Function std::thread::id std::thread::get_id() const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = TARGET_EXPR <D.53256, ((const struct thread *) this)->_M_id>>>
   >>>;


;; Function std::thread::native_handle_type std::thread::native_handle() (null)
;; enabled by -tree-original


return <retval> = ((struct thread *) this)->_M_id._M_thread;


;; Function std::__shared_ptr<_Tp, _Lp>::~__shared_ptr() [with _Tp = std::thread::_Impl_base; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)2u] (null)
;; enabled by -tree-original


{
  try
    {
      try
        {
          
        }
      finally
        {
          std::__shared_count<>::~__shared_count (&((struct __shared_ptr *) this)->_M_refcount);
        }
    }
  finally
    {
      *(struct 
      {
        struct _Impl_base * _M_ptr;
        struct __shared_count _M_refcount;
      } &) this = {CLOBBER};
    }
}
<D.53270>:;


;; Function std::shared_ptr<std::thread::_Impl_base>::~shared_ptr() (null)
;; enabled by -tree-original


{
  try
    {
      try
        {
          
        }
      finally
        {
          std::__shared_ptr<std::thread::_Impl_base, (__gnu_cxx::_Lock_policy)2u>::~__shared_ptr (&((struct shared_ptr *) this)->D.52702);
        }
    }
  finally
    {
      *(struct 
      {
        struct 
        {
          struct _Impl_base * _M_ptr;
          struct __shared_count _M_refcount;
        } D.52703;
      } &) this = {CLOBBER};
    }
}
<D.53268>:;


;; Function virtual std::thread::_Impl_base::~_Impl_base() (null)
;; enabled by -tree-original


{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Impl_base *) this)->_vptr._Impl_base = &_ZTVNSt6thread10_Impl_baseE + 16) >>>>>;
  try
    {
      try
        {
          
        }
      finally
        {
          std::shared_ptr<std::thread::_Impl_base>::~shared_ptr (&((struct _Impl_base *) this)->_M_this_ptr);
        }
    }
  finally
    {
      *(struct 
      {
        int (*__vtbl_ptr_type) () * _vptr._Impl_base;
        struct __shared_base_type _M_this_ptr;
      } &) this = {CLOBBER};
    }
}
<D.53266>:;
if ((__in_chrg & 1) != 0)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  operator delete ((void *) this, 24) >>>>>;
  }


;; Function void std::swap(std::thread&, std::thread&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::thread::swap ((struct thread *) __x, (struct thread &) (struct thread *) __y) >>>>>
   >>>;


;; Function bool std::operator!=(std::thread::id, std::thread::id) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = !std::operator== (TARGET_EXPR <D.53296, __x>, TARGET_EXPR <D.53297, __y>)>>
   >>>;


;; Function bool std::operator<=(std::thread::id, std::thread::id) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = !std::operator< (TARGET_EXPR <D.53302, __y>, TARGET_EXPR <D.53303, __x>)>>
   >>>;


;; Function bool std::operator>(std::thread::id, std::thread::id) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::operator< (TARGET_EXPR <D.53308, __y>, TARGET_EXPR <D.53309, __x>)>>
   >>>;


;; Function bool std::operator>=(std::thread::id, std::thread::id) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = !std::operator< (TARGET_EXPR <D.53314, __x>, TARGET_EXPR <D.53315, __y>)>>
   >>>;


;; Function std::size_t std::hash<std::thread::id>::operator()(const std::thread::id&) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::_Hash_impl::hash<long unsigned int> ((const long unsigned int &) &__id->_M_thread)>>
   >>>;


;; Function std::thread::id std::this_thread::get_id() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = TARGET_EXPR <D.53338, <<< Unknown tree: aggr_init_expr
  5
  __comp_ctor 
  D.53338
  (struct id *) <<< Unknown tree: void_cst >>>
  __gthread_self () >>>>;, D.53338>>
   >>>;


;; Function void std::this_thread::yield() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) __gthread_yield () >>>>>
   >>>;


;; Function int main(int, char**) (null)
;; enabled by -tree-original


{
  const char * shmid_ptr;
  int result_logging;
  atrshmlog_time_t starttime;
  atrshmlog_time_t endtime;

    const char * shmid_ptr;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (shmid_ptr = atrshmlog_get_env_shmid ()) >>>>>;
  if ((const void *) shmid_ptr == 0B)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::basic_ostream<char>::operator<< ((struct basic_ostream *) std::basic_ostream<char>::operator<< ((struct basic_ostream *) std::operator<< <std::char_traits<char> > ((struct basic_ostream &) (struct __ostream_type *) std::basic_ostream<char>::operator<< ((struct basic_ostream *) std::operator<< <std::char_traits<char> > ((struct basic_ostream &) (struct basic_ostream *) std::operator<< <std::char_traits<char> > ((struct basic_ostream &) (struct basic_ostream *) std::operator<< <std::char_traits<char> > ((struct basic_ostream &) (struct basic_ostream *) std::operator<< <std::char_traits<char> > ((struct basic_ostream &) (struct basic_ostream *) std::operator<< <std::char_traits<char> > ((struct basic_ostream &) (struct basic_ostream *) std::operator<< <std::char_traits<char> > ((struct basic_ostream &) &cout, (const char *) "usage: "), (const char *) *NON_LVALUE_EXPR <argv>), (const char *) " [ ... ]\n"), (const char *) "ENVIRONMENT VARIABLE NOT SET !!!\n"), atrshmlog_get_env_prefix ()), (const char *) "_ID"), endl), (const char *) "logsystem version is "), atrshmlog_get_version ()), endl) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  exit (1) >>>>>;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::basic_ostream<char>::operator<< ((struct basic_ostream *) std::operator<< <std::char_traits<char> > ((struct basic_ostream &) &cout, (const char *) "shm log check for c++ code "), endl) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) atrshmlog_attach () >>>>>;
    int result_logging;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (result_logging = atrshmlog_get_logging ()) >>>>>;
  if (result_logging != 0)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::basic_ostream<char>::operator<< ((struct basic_ostream *) std::basic_ostream<char>::operator<< ((struct basic_ostream *) std::operator<< <std::char_traits<char> > ((struct basic_ostream &) &cout, (const char *) "check error "), result_logging), endl) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  exit (1) >>>>>;
    }
    atrshmlog_time_t starttime;
    atrshmlog_time_t endtime;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(atrshmlog_time_t &) &starttime = ((int) *NON_LVALUE_EXPR <atrshmlog_event_locks> & (int) atrshmlog_logging_process) != 0 ? atrshmlog_get_tsc_x86_64_gnu () : 0) >>>>>;
  {
    int i = 0;

    <<cleanup_point     int i = 0;>>;
    while (1)
      {
        if (i > 31) goto <D.54068>;
        {
          const int event = 0;
          const char eventflag = 73;
          const int userevent = i;

          <<cleanup_point           const int event = 0;>>;
          <<cleanup_point           const char eventflag = 73;>>;
                    const int userevent = i;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(atrshmlog_time_t &) &endtime = ((int) *NON_LVALUE_EXPR <atrshmlog_event_locks> & (int) atrshmlog_logging_process) != 0 ? atrshmlog_get_tsc_x86_64_gnu () : 0) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  if (((int) *(atrshmlog_event_locks + (sizetype) *(const int &) &event) & (int) atrshmlog_logging_process) != 0)
    {
      (void) atrshmlog_write1 ((int) *(const int &) &event, (atrshmlog_int32_t) *(const char &) &eventflag, (int) *(const int &) &userevent, *(atrshmlog_time_t &) &starttime, *(atrshmlog_time_t &) &endtime, (const void *) (const char *) "hallo world", (atrshmlog_int32_t) ((unsigned int) 12 + 4294967295));
    }
  else
    {
      <<< Unknown tree: void_cst >>>
    } >>>>>;
        }
        <<cleanup_point (void) i++ >>;
      }
    <D.54068>:;
  }
  <<cleanup_point <<< Unknown tree: expr_stmt
  atrshmlog_stop () >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::basic_ostream<char>::operator<< ((struct basic_ostream *) std::operator<< <std::char_traits<char> > ((struct basic_ostream &) &cout, (const char *) " end of test."), endl) >>>>>;
  return <retval> = 0;
}
return <retval> = 0;


;; Function const _CharT* std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::c_str() const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (const char *) std::__cxx11::basic_string<char>::_M_data (this)>>
   >>>;


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long int; _Ret = int; _CharT = char; _Base = {int}; std::size_t = long unsigned int] (null)
;; enabled by -tree-original


{
  int __ret;
  char * __endptr;
  const long int __tmp;

    int __ret;
    char * __endptr;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__errno_location () = 0) >>>>>;
    const long int __tmp;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__tmp = __convf (__str, &__endptr, __base#0)) >>>>>;
  if ((const char *) __endptr == __str)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_invalid_argument (__name) >>>>>;
    }
  else
    {
      if (*__errno_location () == 34 || (unsigned long) __tmp + 2147483648 > 4294967295)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_out_of_range (__name) >>>>>;
        }
      else
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__ret = (int) __tmp) >>>>>;
        }
    }
  if (__idx != 0B)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__idx = (size_t) ((long int) __endptr - (long int) __str)) >>>>>;
    }
  return <retval> = __ret;
}


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long int; _Ret = long int; _CharT = char; _Base = {int}; std::size_t = long unsigned int] (null)
;; enabled by -tree-original


{
  long int __ret;
  char * __endptr;
  const long int __tmp;

    long int __ret;
    char * __endptr;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__errno_location () = 0) >>>>>;
    const long int __tmp;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__tmp = __convf (__str, &__endptr, __base#0)) >>>>>;
  if ((const char *) __endptr == __str)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_invalid_argument (__name) >>>>>;
    }
  else
    {
      if (*__errno_location () == 34)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_out_of_range (__name) >>>>>;
        }
      else
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__ret = (long int) __tmp) >>>>>;
        }
    }
  if (__idx != 0B)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__idx = (size_t) ((long int) __endptr - (long int) __str)) >>>>>;
    }
  return <retval> = __ret;
}


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long unsigned int; _Ret = long unsigned int; _CharT = char; _Base = {int}; std::size_t = long unsigned int] (null)
;; enabled by -tree-original


{
  long unsigned int __ret;
  char * __endptr;
  const long unsigned int __tmp;

    long unsigned int __ret;
    char * __endptr;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__errno_location () = 0) >>>>>;
    const long unsigned int __tmp;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__tmp = __convf (__str, &__endptr, __base#0)) >>>>>;
  if ((const char *) __endptr == __str)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_invalid_argument (__name) >>>>>;
    }
  else
    {
      if (*__errno_location () == 34)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_out_of_range (__name) >>>>>;
        }
      else
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__ret = (long unsigned int) __tmp) >>>>>;
        }
    }
  if (__idx != 0B)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__idx = (size_t) ((long int) __endptr - (long int) __str)) >>>>>;
    }
  return <retval> = __ret;
}


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long long int; _Ret = long long int; _CharT = char; _Base = {int}; std::size_t = long unsigned int] (null)
;; enabled by -tree-original


{
  long long int __ret;
  char * __endptr;
  const long long int __tmp;

    long long int __ret;
    char * __endptr;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__errno_location () = 0) >>>>>;
    const long long int __tmp;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__tmp = __convf (__str, &__endptr, __base#0)) >>>>>;
  if ((const char *) __endptr == __str)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_invalid_argument (__name) >>>>>;
    }
  else
    {
      if (*__errno_location () == 34)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_out_of_range (__name) >>>>>;
        }
      else
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__ret = (long long int) __tmp) >>>>>;
        }
    }
  if (__idx != 0B)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__idx = (size_t) ((long int) __endptr - (long int) __str)) >>>>>;
    }
  return <retval> = __ret;
}


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long long unsigned int; _Ret = long long unsigned int; _CharT = char; _Base = {int}; std::size_t = long unsigned int] (null)
;; enabled by -tree-original


{
  long long unsigned int __ret;
  char * __endptr;
  const long long unsigned int __tmp;

    long long unsigned int __ret;
    char * __endptr;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__errno_location () = 0) >>>>>;
    const long long unsigned int __tmp;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__tmp = __convf (__str, &__endptr, __base#0)) >>>>>;
  if ((const char *) __endptr == __str)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_invalid_argument (__name) >>>>>;
    }
  else
    {
      if (*__errno_location () == 34)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_out_of_range (__name) >>>>>;
        }
      else
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__ret = (long long unsigned int) __tmp) >>>>>;
        }
    }
  if (__idx != 0B)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__idx = (size_t) ((long int) __endptr - (long int) __str)) >>>>>;
    }
  return <retval> = __ret;
}


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = float; _Ret = float; _CharT = char; _Base = {}; std::size_t = long unsigned int] (null)
;; enabled by -tree-original


{
  float __ret;
  char * __endptr;
  const float __tmp;

    float __ret;
    char * __endptr;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__errno_location () = 0) >>>>>;
    const float __tmp;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__tmp = __convf (__str, &__endptr)) >>>>>;
  if ((const char *) __endptr == __str)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_invalid_argument (__name) >>>>>;
    }
  else
    {
      if (*__errno_location () == 34)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_out_of_range (__name) >>>>>;
        }
      else
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__ret = (float) __tmp) >>>>>;
        }
    }
  if (__idx != 0B)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__idx = (size_t) ((long int) __endptr - (long int) __str)) >>>>>;
    }
  return <retval> = __ret;
}


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = double; _Ret = double; _CharT = char; _Base = {}; std::size_t = long unsigned int] (null)
;; enabled by -tree-original


{
  double __ret;
  char * __endptr;
  const double __tmp;

    double __ret;
    char * __endptr;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__errno_location () = 0) >>>>>;
    const double __tmp;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__tmp = __convf (__str, &__endptr)) >>>>>;
  if ((const char *) __endptr == __str)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_invalid_argument (__name) >>>>>;
    }
  else
    {
      if (*__errno_location () == 34)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_out_of_range (__name) >>>>>;
        }
      else
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__ret = (double) __tmp) >>>>>;
        }
    }
  if (__idx != 0B)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__idx = (size_t) ((long int) __endptr - (long int) __str)) >>>>>;
    }
  return <retval> = __ret;
}


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long double; _Ret = long double; _CharT = char; _Base = {}; std::size_t = long unsigned int] (null)
;; enabled by -tree-original


{
  long double __ret;
  char * __endptr;
  const long double __tmp;

    long double __ret;
    char * __endptr;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__errno_location () = 0) >>>>>;
    const long double __tmp;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__tmp = __convf (__str, &__endptr)) >>>>>;
  if ((const char *) __endptr == __str)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_invalid_argument (__name) >>>>>;
    }
  else
    {
      if (*__errno_location () == 34)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_out_of_range (__name) >>>>>;
        }
      else
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__ret = (long double) __tmp) >>>>>;
        }
    }
  if (__idx != 0B)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__idx = (size_t) ((long int) __endptr - (long int) __str)) >>>>>;
    }
  return <retval> = __ret;
}


;; Function _String __gnu_cxx::__to_xstring(int (*)(_CharT*, std::size_t, const _CharT*, __va_list_tag*), std::size_t, const _CharT*, ...) [with _String = std::__cxx11::basic_string<char>; _CharT = char; std::size_t = long unsigned int] (null)
;; enabled by -tree-original


{
  char * __s;
  struct  __args[1];
  const int __len;

    char * __s;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__s = (char *) __builtin_alloca (1 * __n)) >>>>>;
    struct  __args[1];
  <<cleanup_point <<< Unknown tree: expr_stmt
  __builtin_va_start ((struct  *) &__args, __fmt) >>>>>;
    const int __len;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__len = __convf (__s, __n, __fmt, (struct  *) &__args)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __builtin_va_end ((struct  *) &__args) >>>>>;
  <<cleanup_point return *<retval> = TARGET_EXPR <D.54334, <<< Unknown tree: aggr_init_expr
  7
  __comp_ctor 
  D.54334
  (struct basic_string *) <<< Unknown tree: void_cst >>>
  __s
  __s + (sizetype) __len
  (const struct allocator &) (const struct allocator *) &TARGET_EXPR <D.54333, <<< Unknown tree: aggr_init_expr
  4
  __comp_ctor 
  D.54333
  (struct allocator *) <<< Unknown tree: void_cst >>> >>>> >>>>>>;
}


;; Function std::__cxx11::basic_string<char>::_Alloc_hider::~_Alloc_hider() (null)
;; enabled by -tree-original


{
  try
    {
      try
        {
          
        }
      finally
        {
          std::allocator<char>::~allocator ((struct allocator *) this);
        }
    }
  finally
    {
      *(struct 
      {
        char * _M_p;
      } &) this = {CLOBBER};
    }
}
<D.54338>:;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::~basic_string() [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        try
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_dispose (this) >>>>>;
          }
        finally
          {
            std::__cxx11::basic_string<char>::_Alloc_hider::~_Alloc_hider (&((struct basic_string *) this)->_M_dataplus);
          }
      }
    finally
      {
        *(struct 
        {
          struct _Alloc_hider _M_dataplus;
          size_type _M_string_length;
          union ._68 D.18328;
        } &) this = {CLOBBER};
      }
  }
  <D.54336>:;
   >>>;


;; Function constexpr typename std::remove_reference< <template-parameter-1-1> >::type&& std::move(_Tp&&) [with _Tp = std::allocator<char>&; typename std::remove_reference< <template-parameter-1-1> >::type = std::allocator<char>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (struct type &) (struct type *) NON_LVALUE_EXPR <(struct type &) __t>
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_Alloc_hider::_Alloc_hider (&((struct basic_string *) this)->_M_dataplus, std::__cxx11::basic_string<char>::_M_local_data (this), (const struct allocator &) (const struct allocator *) std::move<std::allocator<char>&> ((struct allocator &) (struct allocator_type *) std::__cxx11::basic_string<char>::_M_get_allocator ((struct basic_string *) __str))) >>>>>;
    try
      {
        if (<<cleanup_point std::__cxx11::basic_string<char>::_M_is_local ((struct basic_string *) __str)>>)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::char_traits<char>::copy ((char *) &((struct basic_string *) this)->D.17414._M_local_buf, (const char_type *) &__str->D.17414._M_local_buf, 16) >>>>>;
          }
        else
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_data (this, std::__cxx11::basic_string<char>::_M_data ((struct basic_string *) __str)) >>>>>;
            <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_capacity (this, __str->D.17414._M_allocated_capacity) >>>>>;
          }
        <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_length (this, std::__cxx11::basic_string<char>::length ((struct basic_string *) __str)) >>>>>;
        <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_data ((struct basic_string *) __str, std::__cxx11::basic_string<char>::_M_local_data ((struct basic_string *) __str)) >>>>>;
        <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_set_length ((struct basic_string *) __str, 0) >>>>>;
      }
    catch
      {
        std::__cxx11::basic_string<char>::_Alloc_hider::~_Alloc_hider (&((struct basic_string *) this)->_M_dataplus);
      }
  }
   >>>;


;; Function const _CharT* std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::c_str() const [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (const wchar_t *) std::__cxx11::basic_string<wchar_t>::_M_data (this)>>
   >>>;


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long int; _Ret = int; _CharT = wchar_t; _Base = {int}; std::size_t = long unsigned int] (null)
;; enabled by -tree-original


{
  int __ret;
  wchar_t * __endptr;
  const long int __tmp;

    int __ret;
    wchar_t * __endptr;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__errno_location () = 0) >>>>>;
    const long int __tmp;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__tmp = __convf (__str, &__endptr, __base#0)) >>>>>;
  if ((const wchar_t *) __endptr == __str)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_invalid_argument (__name) >>>>>;
    }
  else
    {
      if (*__errno_location () == 34 || (unsigned long) __tmp + 2147483648 > 4294967295)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_out_of_range (__name) >>>>>;
        }
      else
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__ret = (int) __tmp) >>>>>;
        }
    }
  if (__idx != 0B)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__idx = (size_t) (((long int) __endptr - (long int) __str) /[ex] 4)) >>>>>;
    }
  return <retval> = __ret;
}


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long int; _Ret = long int; _CharT = wchar_t; _Base = {int}; std::size_t = long unsigned int] (null)
;; enabled by -tree-original


{
  long int __ret;
  wchar_t * __endptr;
  const long int __tmp;

    long int __ret;
    wchar_t * __endptr;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__errno_location () = 0) >>>>>;
    const long int __tmp;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__tmp = __convf (__str, &__endptr, __base#0)) >>>>>;
  if ((const wchar_t *) __endptr == __str)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_invalid_argument (__name) >>>>>;
    }
  else
    {
      if (*__errno_location () == 34)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_out_of_range (__name) >>>>>;
        }
      else
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__ret = (long int) __tmp) >>>>>;
        }
    }
  if (__idx != 0B)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__idx = (size_t) (((long int) __endptr - (long int) __str) /[ex] 4)) >>>>>;
    }
  return <retval> = __ret;
}


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long unsigned int; _Ret = long unsigned int; _CharT = wchar_t; _Base = {int}; std::size_t = long unsigned int] (null)
;; enabled by -tree-original


{
  long unsigned int __ret;
  wchar_t * __endptr;
  const long unsigned int __tmp;

    long unsigned int __ret;
    wchar_t * __endptr;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__errno_location () = 0) >>>>>;
    const long unsigned int __tmp;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__tmp = __convf (__str, &__endptr, __base#0)) >>>>>;
  if ((const wchar_t *) __endptr == __str)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_invalid_argument (__name) >>>>>;
    }
  else
    {
      if (*__errno_location () == 34)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_out_of_range (__name) >>>>>;
        }
      else
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__ret = (long unsigned int) __tmp) >>>>>;
        }
    }
  if (__idx != 0B)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__idx = (size_t) (((long int) __endptr - (long int) __str) /[ex] 4)) >>>>>;
    }
  return <retval> = __ret;
}


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long long int; _Ret = long long int; _CharT = wchar_t; _Base = {int}; std::size_t = long unsigned int] (null)
;; enabled by -tree-original


{
  long long int __ret;
  wchar_t * __endptr;
  const long long int __tmp;

    long long int __ret;
    wchar_t * __endptr;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__errno_location () = 0) >>>>>;
    const long long int __tmp;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__tmp = __convf (__str, &__endptr, __base#0)) >>>>>;
  if ((const wchar_t *) __endptr == __str)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_invalid_argument (__name) >>>>>;
    }
  else
    {
      if (*__errno_location () == 34)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_out_of_range (__name) >>>>>;
        }
      else
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__ret = (long long int) __tmp) >>>>>;
        }
    }
  if (__idx != 0B)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__idx = (size_t) (((long int) __endptr - (long int) __str) /[ex] 4)) >>>>>;
    }
  return <retval> = __ret;
}


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long long unsigned int; _Ret = long long unsigned int; _CharT = wchar_t; _Base = {int}; std::size_t = long unsigned int] (null)
;; enabled by -tree-original


{
  long long unsigned int __ret;
  wchar_t * __endptr;
  const long long unsigned int __tmp;

    long long unsigned int __ret;
    wchar_t * __endptr;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__errno_location () = 0) >>>>>;
    const long long unsigned int __tmp;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__tmp = __convf (__str, &__endptr, __base#0)) >>>>>;
  if ((const wchar_t *) __endptr == __str)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_invalid_argument (__name) >>>>>;
    }
  else
    {
      if (*__errno_location () == 34)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_out_of_range (__name) >>>>>;
        }
      else
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__ret = (long long unsigned int) __tmp) >>>>>;
        }
    }
  if (__idx != 0B)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__idx = (size_t) (((long int) __endptr - (long int) __str) /[ex] 4)) >>>>>;
    }
  return <retval> = __ret;
}


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = float; _Ret = float; _CharT = wchar_t; _Base = {}; std::size_t = long unsigned int] (null)
;; enabled by -tree-original


{
  float __ret;
  wchar_t * __endptr;
  const float __tmp;

    float __ret;
    wchar_t * __endptr;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__errno_location () = 0) >>>>>;
    const float __tmp;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__tmp = __convf (__str, &__endptr)) >>>>>;
  if ((const wchar_t *) __endptr == __str)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_invalid_argument (__name) >>>>>;
    }
  else
    {
      if (*__errno_location () == 34)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_out_of_range (__name) >>>>>;
        }
      else
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__ret = (float) __tmp) >>>>>;
        }
    }
  if (__idx != 0B)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__idx = (size_t) (((long int) __endptr - (long int) __str) /[ex] 4)) >>>>>;
    }
  return <retval> = __ret;
}


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = double; _Ret = double; _CharT = wchar_t; _Base = {}; std::size_t = long unsigned int] (null)
;; enabled by -tree-original


{
  double __ret;
  wchar_t * __endptr;
  const double __tmp;

    double __ret;
    wchar_t * __endptr;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__errno_location () = 0) >>>>>;
    const double __tmp;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__tmp = __convf (__str, &__endptr)) >>>>>;
  if ((const wchar_t *) __endptr == __str)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_invalid_argument (__name) >>>>>;
    }
  else
    {
      if (*__errno_location () == 34)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_out_of_range (__name) >>>>>;
        }
      else
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__ret = (double) __tmp) >>>>>;
        }
    }
  if (__idx != 0B)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__idx = (size_t) (((long int) __endptr - (long int) __str) /[ex] 4)) >>>>>;
    }
  return <retval> = __ret;
}


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long double; _Ret = long double; _CharT = wchar_t; _Base = {}; std::size_t = long unsigned int] (null)
;; enabled by -tree-original


{
  long double __ret;
  wchar_t * __endptr;
  const long double __tmp;

    long double __ret;
    wchar_t * __endptr;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__errno_location () = 0) >>>>>;
    const long double __tmp;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__tmp = __convf (__str, &__endptr)) >>>>>;
  if ((const wchar_t *) __endptr == __str)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_invalid_argument (__name) >>>>>;
    }
  else
    {
      if (*__errno_location () == 34)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_out_of_range (__name) >>>>>;
        }
      else
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__ret = (long double) __tmp) >>>>>;
        }
    }
  if (__idx != 0B)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__idx = (size_t) (((long int) __endptr - (long int) __str) /[ex] 4)) >>>>>;
    }
  return <retval> = __ret;
}


;; Function _String __gnu_cxx::__to_xstring(int (*)(_CharT*, std::size_t, const _CharT*, __va_list_tag*), std::size_t, const _CharT*, ...) [with _String = std::__cxx11::basic_string<wchar_t>; _CharT = wchar_t; std::size_t = long unsigned int] (null)
;; enabled by -tree-original


{
  wchar_t * __s;
  struct  __args[1];
  const int __len;

    wchar_t * __s;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__s = (wchar_t *) __builtin_alloca (4 * __n)) >>>>>;
    struct  __args[1];
  <<cleanup_point <<< Unknown tree: expr_stmt
  __builtin_va_start ((struct  *) &__args, __fmt) >>>>>;
    const int __len;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__len = __convf (__s, __n, __fmt, (struct  *) &__args)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __builtin_va_end ((struct  *) &__args) >>>>>;
  <<cleanup_point return *<retval> = TARGET_EXPR <D.54449, <<< Unknown tree: aggr_init_expr
  7
  __comp_ctor 
  D.54449
  (struct basic_string *) <<< Unknown tree: void_cst >>>
  __s
  __s + (sizetype) ((long unsigned int) __len * 4)
  (const struct allocator &) (const struct allocator *) &TARGET_EXPR <D.54448, <<< Unknown tree: aggr_init_expr
  4
  __comp_ctor 
  D.54448
  (struct allocator *) <<< Unknown tree: void_cst >>> >>>> >>>>>>;
}


;; Function std::__cxx11::basic_string<wchar_t>::_Alloc_hider::~_Alloc_hider() (null)
;; enabled by -tree-original


{
  try
    {
      try
        {
          
        }
      finally
        {
          std::allocator<wchar_t>::~allocator ((struct allocator *) this);
        }
    }
  finally
    {
      *(struct 
      {
        wchar_t * _M_p;
      } &) this = {CLOBBER};
    }
}
<D.54453>:;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::~basic_string() [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        try
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_M_dispose (this) >>>>>;
          }
        finally
          {
            std::__cxx11::basic_string<wchar_t>::_Alloc_hider::~_Alloc_hider (&((struct basic_string *) this)->_M_dataplus);
          }
      }
    finally
      {
        *(struct 
        {
          struct _Alloc_hider _M_dataplus;
          size_type _M_string_length;
          union ._68 D.19697;
        } &) this = {CLOBBER};
      }
  }
  <D.54451>:;
   >>>;


;; Function constexpr typename std::remove_reference< <template-parameter-1-1> >::type&& std::move(_Tp&&) [with _Tp = std::allocator<wchar_t>&; typename std::remove_reference< <template-parameter-1-1> >::type = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (struct type &) (struct type *) NON_LVALUE_EXPR <(struct type &) __t>
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&&) [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_Alloc_hider::_Alloc_hider (&((struct basic_string *) this)->_M_dataplus, std::__cxx11::basic_string<wchar_t>::_M_local_data (this), (const struct allocator &) (const struct allocator *) std::move<std::allocator<wchar_t>&> ((struct allocator &) (struct allocator_type *) std::__cxx11::basic_string<wchar_t>::_M_get_allocator ((struct basic_string *) __str))) >>>>>;
    try
      {
        if (<<cleanup_point std::__cxx11::basic_string<wchar_t>::_M_is_local ((struct basic_string *) __str)>>)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::char_traits<wchar_t>::copy ((wchar_t *) &((struct basic_string *) this)->D.18784._M_local_buf, (const char_type *) &__str->D.18784._M_local_buf, 4) >>>>>;
          }
        else
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_M_data (this, std::__cxx11::basic_string<wchar_t>::_M_data ((struct basic_string *) __str)) >>>>>;
            <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_M_capacity (this, __str->D.18784._M_allocated_capacity) >>>>>;
          }
        <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_M_length (this, std::__cxx11::basic_string<wchar_t>::length ((struct basic_string *) __str)) >>>>>;
        <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_M_data ((struct basic_string *) __str, std::__cxx11::basic_string<wchar_t>::_M_local_data ((struct basic_string *) __str)) >>>>>;
        <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_M_set_length ((struct basic_string *) __str, 0) >>>>>;
      }
    catch
      {
        std::__cxx11::basic_string<wchar_t>::_Alloc_hider::~_Alloc_hider (&((struct basic_string *) this)->_M_dataplus);
      }
  }
   >>>;


;; Function static std::size_t std::_Hash_impl::hash(const _Tp&) [with _Tp = float; std::size_t = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::_Hash_impl::hash ((const void *) (const float *) __val, 4, 3339675911)>>;


;; Function static std::size_t std::_Hash_impl::hash(const _Tp&) [with _Tp = double; std::size_t = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::_Hash_impl::hash ((const void *) (const double *) __val, 8, 3339675911)>>;


;; Function const _CharT* std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::data() const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (const char *) std::__cxx11::basic_string<char>::_M_data (this)>>
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::length() const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_type) ((const struct basic_string *) this)->_M_string_length
   >>>;


;; Function const _CharT* std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::data() const [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (const wchar_t *) std::__cxx11::basic_string<wchar_t>::_M_data (this)>>
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::length() const [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_type) ((const struct basic_string *) this)->_M_string_length
   >>>;


;; Function const _CharT* std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::data() const [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (const char16_t *) std::__cxx11::basic_string<char16_t>::_M_data (this)>>
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::length() const [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_type) ((const struct basic_string *) this)->_M_string_length
   >>>;


;; Function const _CharT* std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::data() const [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (const char32_t *) std::__cxx11::basic_string<char32_t>::_M_data (this)>>
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::length() const [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_type) ((const struct basic_string *) this)->_M_string_length
   >>>;


;; Function std::allocator< <template-parameter-1-1> >::allocator() [with _Tp = char] (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::new_allocator<char>::new_allocator ((struct new_allocator *) this) >>>>>;
    try
      {
        
      }
    catch
      {
        __gnu_cxx::new_allocator<char>::~new_allocator ((struct new_allocator *) this);
      }
  }
   >>>;


;; Function std::allocator< <template-parameter-1-1> >::~allocator() [with _Tp = char] (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  {
    try
      {
        
      }
    finally
      {
        __gnu_cxx::new_allocator<char>::~new_allocator ((struct new_allocator *) this);
      }
  }
  <D.54515>:;
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(const _CharT*, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, const _Alloc&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_Alloc_hider::_Alloc_hider (&((struct basic_string *) this)->_M_dataplus, std::__cxx11::basic_string<char>::_M_local_data (this), (const struct allocator &) (const struct allocator *) __a) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_construct<const char*> (this, __s, __s + (sizetype) NON_LVALUE_EXPR <__n>) >>>>>;
    }
  catch
    {
      std::__cxx11::basic_string<char>::_Alloc_hider::~_Alloc_hider (&((struct basic_string *) this)->_M_dataplus);
    }
}


;; Function std::allocator< <template-parameter-1-1> >::allocator() [with _Tp = wchar_t] (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::new_allocator<wchar_t>::new_allocator ((struct new_allocator *) this) >>>>>;
    try
      {
        
      }
    catch
      {
        __gnu_cxx::new_allocator<wchar_t>::~new_allocator ((struct new_allocator *) this);
      }
  }
   >>>;


;; Function std::allocator< <template-parameter-1-1> >::~allocator() [with _Tp = wchar_t] (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  {
    try
      {
        
      }
    finally
      {
        __gnu_cxx::new_allocator<wchar_t>::~new_allocator ((struct new_allocator *) this);
      }
  }
  <D.54532>:;
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(const _CharT*, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, const _Alloc&) [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_Alloc_hider::_Alloc_hider (&((struct basic_string *) this)->_M_dataplus, std::__cxx11::basic_string<wchar_t>::_M_local_data (this), (const struct allocator &) (const struct allocator *) __a) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_M_construct<const wchar_t*> (this, __s, __s + (sizetype) (__n * 4)) >>>>>;
    }
  catch
    {
      std::__cxx11::basic_string<wchar_t>::_Alloc_hider::~_Alloc_hider (&((struct basic_string *) this)->_M_dataplus);
    }
}


;; Function std::allocator< <template-parameter-1-1> >::allocator() [with _Tp = char16_t] (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::new_allocator<char16_t>::new_allocator ((struct new_allocator *) this) >>>>>;
    try
      {
        
      }
    catch
      {
        __gnu_cxx::new_allocator<char16_t>::~new_allocator ((struct new_allocator *) this);
      }
  }
   >>>;


;; Function std::allocator< <template-parameter-1-1> >::~allocator() [with _Tp = char16_t] (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  {
    try
      {
        
      }
    finally
      {
        __gnu_cxx::new_allocator<char16_t>::~new_allocator ((struct new_allocator *) this);
      }
  }
  <D.54549>:;
   >>>;


;; Function std::__cxx11::basic_string<char16_t>::_Alloc_hider::~_Alloc_hider() (null)
;; enabled by -tree-original


{
  try
    {
      try
        {
          
        }
      finally
        {
          std::allocator<char16_t>::~allocator ((struct allocator *) this);
        }
    }
  finally
    {
      *(struct 
      {
        char16_t * _M_p;
      } &) this = {CLOBBER};
    }
}
<D.54584>:;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(const _CharT*, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, const _Alloc&) [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char16_t>::_Alloc_hider::_Alloc_hider (&((struct basic_string *) this)->_M_dataplus, std::__cxx11::basic_string<char16_t>::_M_local_data (this), (const struct allocator &) (const struct allocator *) __a) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char16_t>::_M_construct<const char16_t*> (this, __s, __s + (sizetype) (__n * 2)) >>>>>;
    }
  catch
    {
      std::__cxx11::basic_string<char16_t>::_Alloc_hider::~_Alloc_hider (&((struct basic_string *) this)->_M_dataplus);
    }
}


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::~basic_string() [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        try
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char16_t>::_M_dispose (this) >>>>>;
          }
        finally
          {
            std::__cxx11::basic_string<char16_t>::_Alloc_hider::~_Alloc_hider (&((struct basic_string *) this)->_M_dataplus);
          }
      }
    finally
      {
        *(struct 
        {
          struct _Alloc_hider _M_dataplus;
          size_type _M_string_length;
          union ._68 D.21467;
        } &) this = {CLOBBER};
      }
  }
  <D.54597>:;
   >>>;


;; Function constexpr typename std::remove_reference< <template-parameter-1-1> >::type&& std::move(_Tp&&) [with _Tp = std::allocator<char16_t>&; typename std::remove_reference< <template-parameter-1-1> >::type = std::allocator<char16_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (struct type &) (struct type *) NON_LVALUE_EXPR <(struct type &) __t>
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&&) [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char16_t>::_Alloc_hider::_Alloc_hider (&((struct basic_string *) this)->_M_dataplus, std::__cxx11::basic_string<char16_t>::_M_local_data (this), (const struct allocator &) (const struct allocator *) std::move<std::allocator<char16_t>&> ((struct allocator &) (struct allocator_type *) std::__cxx11::basic_string<char16_t>::_M_get_allocator ((struct basic_string *) __str))) >>>>>;
    try
      {
        if (<<cleanup_point std::__cxx11::basic_string<char16_t>::_M_is_local ((struct basic_string *) __str)>>)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::char_traits<char16_t>::copy ((char16_t *) &((struct basic_string *) this)->D.20554._M_local_buf, (const char_type *) &__str->D.20554._M_local_buf, 8) >>>>>;
          }
        else
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char16_t>::_M_data (this, std::__cxx11::basic_string<char16_t>::_M_data ((struct basic_string *) __str)) >>>>>;
            <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char16_t>::_M_capacity (this, __str->D.20554._M_allocated_capacity) >>>>>;
          }
        <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char16_t>::_M_length (this, std::__cxx11::basic_string<char16_t>::length ((struct basic_string *) __str)) >>>>>;
        <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char16_t>::_M_data ((struct basic_string *) __str, std::__cxx11::basic_string<char16_t>::_M_local_data ((struct basic_string *) __str)) >>>>>;
        <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char16_t>::_M_set_length ((struct basic_string *) __str, 0) >>>>>;
      }
    catch
      {
        std::__cxx11::basic_string<char16_t>::_Alloc_hider::~_Alloc_hider (&((struct basic_string *) this)->_M_dataplus);
      }
  }
   >>>;


;; Function std::allocator< <template-parameter-1-1> >::allocator() [with _Tp = char32_t] (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::new_allocator<char32_t>::new_allocator ((struct new_allocator *) this) >>>>>;
    try
      {
        
      }
    catch
      {
        __gnu_cxx::new_allocator<char32_t>::~new_allocator ((struct new_allocator *) this);
      }
  }
   >>>;


;; Function std::allocator< <template-parameter-1-1> >::~allocator() [with _Tp = char32_t] (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  {
    try
      {
        
      }
    finally
      {
        __gnu_cxx::new_allocator<char32_t>::~new_allocator ((struct new_allocator *) this);
      }
  }
  <D.54617>:;
   >>>;


;; Function std::__cxx11::basic_string<char32_t>::_Alloc_hider::~_Alloc_hider() (null)
;; enabled by -tree-original


{
  try
    {
      try
        {
          
        }
      finally
        {
          std::allocator<char32_t>::~allocator ((struct allocator *) this);
        }
    }
  finally
    {
      *(struct 
      {
        char32_t * _M_p;
      } &) this = {CLOBBER};
    }
}
<D.54652>:;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(const _CharT*, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, const _Alloc&) [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char32_t>::_Alloc_hider::_Alloc_hider (&((struct basic_string *) this)->_M_dataplus, std::__cxx11::basic_string<char32_t>::_M_local_data (this), (const struct allocator &) (const struct allocator *) __a) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char32_t>::_M_construct<const char32_t*> (this, __s, __s + (sizetype) (__n * 4)) >>>>>;
    }
  catch
    {
      std::__cxx11::basic_string<char32_t>::_Alloc_hider::~_Alloc_hider (&((struct basic_string *) this)->_M_dataplus);
    }
}


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::~basic_string() [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        try
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char32_t>::_M_dispose (this) >>>>>;
          }
        finally
          {
            std::__cxx11::basic_string<char32_t>::_Alloc_hider::~_Alloc_hider (&((struct basic_string *) this)->_M_dataplus);
          }
      }
    finally
      {
        *(struct 
        {
          struct _Alloc_hider _M_dataplus;
          size_type _M_string_length;
          union ._68 D.22753;
        } &) this = {CLOBBER};
      }
  }
  <D.54665>:;
   >>>;


;; Function constexpr typename std::remove_reference< <template-parameter-1-1> >::type&& std::move(_Tp&&) [with _Tp = std::allocator<char32_t>&; typename std::remove_reference< <template-parameter-1-1> >::type = std::allocator<char32_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (struct type &) (struct type *) NON_LVALUE_EXPR <(struct type &) __t>
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&&) [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char32_t>::_Alloc_hider::_Alloc_hider (&((struct basic_string *) this)->_M_dataplus, std::__cxx11::basic_string<char32_t>::_M_local_data (this), (const struct allocator &) (const struct allocator *) std::move<std::allocator<char32_t>&> ((struct allocator &) (struct allocator_type *) std::__cxx11::basic_string<char32_t>::_M_get_allocator ((struct basic_string *) __str))) >>>>>;
    try
      {
        if (<<cleanup_point std::__cxx11::basic_string<char32_t>::_M_is_local ((struct basic_string *) __str)>>)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::char_traits<char32_t>::copy ((char32_t *) &((struct basic_string *) this)->D.21840._M_local_buf, (const char_type *) &__str->D.21840._M_local_buf, 4) >>>>>;
          }
        else
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char32_t>::_M_data (this, std::__cxx11::basic_string<char32_t>::_M_data ((struct basic_string *) __str)) >>>>>;
            <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char32_t>::_M_capacity (this, __str->D.21840._M_allocated_capacity) >>>>>;
          }
        <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char32_t>::_M_length (this, std::__cxx11::basic_string<char32_t>::length ((struct basic_string *) __str)) >>>>>;
        <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char32_t>::_M_data ((struct basic_string *) __str, std::__cxx11::basic_string<char32_t>::_M_local_data ((struct basic_string *) __str)) >>>>>;
        <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char32_t>::_M_set_length ((struct basic_string *) __str, 0) >>>>>;
      }
    catch
      {
        std::__cxx11::basic_string<char32_t>::_Alloc_hider::~_Alloc_hider (&((struct basic_string *) this)->_M_dataplus);
      }
  }
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc> std::operator+(const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&, const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


{
  struct basic_string __str [value-expr: *<retval>];

  (void) 0;
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::basic_string ((struct basic_string *) <retval>, (const struct basic_string &) (const struct basic_string *) __lhs) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::__cxx11::basic_string<char>::append ((struct basic_string *) <retval>, __rhs) >>>>>;
      <<cleanup_point return <retval>>>;
    }
  catch
    {
      std::__cxx11::basic_string<char>::~basic_string ((struct basic_string *) <retval>);
    }
}


;; Function constexpr typename std::remove_reference< <template-parameter-1-1> >::type&& std::move(_Tp&&) [with _Tp = std::__cxx11::basic_string<char>&; typename std::remove_reference< <template-parameter-1-1> >::type = std::__cxx11::basic_string<char>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (struct type &) (struct type *) NON_LVALUE_EXPR <(struct type &) __t>
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc> std::operator+(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&&, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


{
  const long unsigned int __size;
  const bool __cond;

    const long unsigned int __size;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__size = std::__cxx11::basic_string<char>::size ((struct basic_string *) __lhs) + std::__cxx11::basic_string<char>::size ((struct basic_string *) __rhs)) >>>>>;
    const bool __cond;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__cond = std::__cxx11::basic_string<char>::capacity ((struct basic_string *) __lhs) < (long unsigned int) __size && std::__cxx11::basic_string<char>::capacity ((struct basic_string *) __rhs) >= (long unsigned int) __size) >>>>>;
  <<cleanup_point return *<retval> = TARGET_EXPR <D.54905, <<< Unknown tree: aggr_init_expr
  5
  __comp_ctor 
  D.54905
  (struct basic_string *) <<< Unknown tree: void_cst >>>
  (struct basic_string &) ((bool) __cond ? (struct type *) std::move<std::__cxx11::basic_string<char>&> ((struct basic_string &) (struct basic_string *) std::__cxx11::basic_string<char>::insert ((struct basic_string *) __rhs, 0, (const struct basic_string &) (const struct basic_string *) __lhs)) : (struct type *) std::move<std::__cxx11::basic_string<char>&> ((struct basic_string &) (struct basic_string *) std::__cxx11::basic_string<char>::append ((struct basic_string *) __lhs, (const struct basic_string &) (const struct basic_string *) __rhs))) >>>>>>;
}


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc> std::operator+(const _CharT*, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.54907, <<< Unknown tree: aggr_init_expr
  5
  __comp_ctor 
  D.54907
  (struct basic_string *) <<< Unknown tree: void_cst >>>
  (struct basic_string &) (struct type *) std::move<std::__cxx11::basic_string<char>&> ((struct basic_string &) (struct basic_string *) std::__cxx11::basic_string<char>::insert ((struct basic_string *) __rhs, 0, __lhs)) >>>>>>;


;; Function static std::size_t std::_Hash_impl::hash(const _Tp&) [with _Tp = int; std::size_t = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::_Hash_impl::hash ((const void *) (const int *) __val, 4, 3339675911)>>;


;; Function static std::size_t std::_Hash_impl::__hash_combine(const _Tp&, std::size_t) [with _Tp = const std::_V2::error_category*; std::size_t = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::_Hash_impl::hash ((const void *) (const struct error_category * const *) __val, 8, __hash)>>;


;; Function long int std::_Sp_counted_base<_Lp>::_M_get_use_count() const [with __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)2u] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (long int) (int) __atomic_load_4 ((const void *) &((const struct _Sp_counted_base *) this)->_M_use_count, 0)>>
   >>>;


;; Function void std::_Sp_counted_base<_Lp>::_M_destroy() [with __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0u] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  if ((struct _Sp_counted_base *) this != 0B)
    {
      OBJ_TYPE_REF(*(((struct _Sp_counted_base *) this)->_vptr._Sp_counted_base + 8);(struct _Sp_counted_base)this->1) (this);
    }
  else
    {
      <<< Unknown tree: void_cst >>>
    } >>>>>
   >>>;


;; Function constexpr typename std::remove_reference< <template-parameter-1-1> >::type&& std::move(_Tp&&) [with _Tp = std::thread::id&; typename std::remove_reference< <template-parameter-1-1> >::type = std::thread::id] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (struct type &) (struct type *) NON_LVALUE_EXPR <(struct type &) __t>
   >>>;


;; Function void std::swap(_Tp&, _Tp&) [with _Tp = std::thread::id] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    struct id __tmp;

        struct id __tmp;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__tmp = *(struct id &) (struct type *) std::move<std::thread::id&> ((struct id &) (struct id *) __a)) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(struct id *) __a = *(struct id &) (struct type *) std::move<std::thread::id&> ((struct id &) (struct id *) __b)) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(struct id *) __b = *(struct id &) (struct type *) std::move<std::thread::id&> ((struct id &) &__tmp)) >>>>>;
  }
   >>>;


;; Function std::__shared_count<_Lp>::~__shared_count() [with __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)2u] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (((struct __shared_count *) this)->_M_pi != 0B)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2u>::_M_release (NON_LVALUE_EXPR <((struct __shared_count *) this)->_M_pi>) >>>>>;
          }
      }
    finally
      {
        *(struct 
        {
          struct _Sp_counted_base * _M_pi;
        } &) this = {CLOBBER};
      }
  }
  <D.54923>:;
   >>>;


;; Function static std::size_t std::_Hash_impl::hash(const _Tp&) [with _Tp = long unsigned int; std::size_t = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::_Hash_impl::hash ((const void *) (const long unsigned int *) __val, 8, 3339675911)>>;


;; Function std::basic_ostream<char, _Traits>& std::operator<<(std::basic_ostream<char, _Traits>&, const char*) [with _Traits = std::char_traits<char>] (null)
;; enabled by -tree-original


if (__s == 0B)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::basic_ios<char>::setstate ((struct basic_ios *) (struct basic_ostream *) __out + (sizetype) *(long int *) (((struct basic_ostream *) __out)->_vptr.basic_ostream + 18446744073709551592), 1) >>>>>;
  }
else
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::__ostream_insert<char, std::char_traits<char> > ((struct basic_ostream &) (struct basic_ostream *) __out, __s, (streamsize) std::char_traits<char>::length (__s)) >>>>>;
  }
return <retval> = (struct basic_ostream &) (struct basic_ostream *) __out;


;; Function std::basic_ostream<_CharT, _Traits>& std::endl(std::basic_ostream<_CharT, _Traits>&) [with _CharT = char; _Traits = std::char_traits<char>] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (struct basic_ostream &) (struct basic_ostream *) std::flush<char, std::char_traits<char> > ((struct basic_ostream &) (struct basic_ostream *) std::basic_ostream<char>::put ((struct basic_ostream *) __os, (int) std::basic_ios<char>::widen ((struct basic_ios *) (struct basic_ostream *) __os + (sizetype) *(long int *) (((struct basic_ostream *) __os)->_vptr.basic_ostream + 18446744073709551592), 10)))>>;


;; Function std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(std::basic_ostream<_CharT, _Traits>::__ostream_type& (*)(std::basic_ostream<_CharT, _Traits>::__ostream_type&)) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (struct __ostream_type &) (struct __ostream_type *) __pf ((struct __ostream_type &) (struct __ostream_type *) this)>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_data() const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = char*] (null)
;; enabled by -tree-original


return <retval> = (char *) ((const struct basic_string *) this)->_M_dataplus._M_p;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(_InputIterator, _InputIterator, const _Alloc&) [with _InputIterator = char*; <template-parameter-2-2> = void; _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_Alloc_hider::_Alloc_hider (&((struct basic_string *) this)->_M_dataplus, std::__cxx11::basic_string<char>::_M_local_data (this), (const struct allocator &) (const struct allocator *) __a) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_construct<char*> (this, __beg, __end) >>>>>;
    }
  catch
    {
      std::__cxx11::basic_string<char>::_Alloc_hider::~_Alloc_hider (&((struct basic_string *) this)->_M_dataplus);
    }
}


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_dispose() [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


if (<<cleanup_point !std::__cxx11::basic_string<char>::_M_is_local (this)>>)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_destroy (this, ((struct basic_string *) this)->D.17414._M_allocated_capacity) >>>>>;
  }


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_local_data() [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = char*] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (char *) std::pointer_traits<char*>::pointer_to ((__type &) (char *) &((struct basic_string *) this)->D.17414._M_local_buf)>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::allocator_type& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_get_allocator() [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::allocator_type = std::allocator<char>] (null)
;; enabled by -tree-original


return <retval> = (struct allocator_type &) (struct allocator *) &((struct basic_string *) this)->_M_dataplus;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_Alloc_hider::_Alloc_hider(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer, const _Alloc&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = char*] (null)
;; enabled by -tree-original


{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::allocator<char>::allocator ((struct allocator *) this, (const struct allocator &) (const struct allocator *) __a) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Alloc_hider *) this)->_M_p = __dat) >>>>>;
    }
  catch
    {
      std::allocator<char>::~allocator ((struct allocator *) this);
    }
}


;; Function bool std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_is_local() const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (const char *) std::__cxx11::basic_string<char>::_M_data (this) == std::__cxx11::basic_string<char>::_M_local_data (this)>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_data(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = char*] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string *) this)->_M_dataplus._M_p = __p) >>>>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_capacity(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string *) this)->D.17414._M_allocated_capacity = __capacity) >>>>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_length(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string *) this)->_M_string_length = __length) >>>>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_set_length(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_length (this, __n) >>>>>;
<<cleanup_point <<< Unknown tree: expr_stmt
  std::char_traits<char>::assign ((char_type &) (std::__cxx11::basic_string<char>::_M_data (this) + (sizetype) NON_LVALUE_EXPR <__n>), (const char_type &) &TARGET_EXPR <D.54982, 0>) >>>>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_data() const [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = wchar_t*] (null)
;; enabled by -tree-original


return <retval> = (wchar_t *) ((const struct basic_string *) this)->_M_dataplus._M_p;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(_InputIterator, _InputIterator, const _Alloc&) [with _InputIterator = wchar_t*; <template-parameter-2-2> = void; _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_Alloc_hider::_Alloc_hider (&((struct basic_string *) this)->_M_dataplus, std::__cxx11::basic_string<wchar_t>::_M_local_data (this), (const struct allocator &) (const struct allocator *) __a) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_M_construct<wchar_t*> (this, __beg, __end) >>>>>;
    }
  catch
    {
      std::__cxx11::basic_string<wchar_t>::_Alloc_hider::~_Alloc_hider (&((struct basic_string *) this)->_M_dataplus);
    }
}


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_dispose() [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


if (<<cleanup_point !std::__cxx11::basic_string<wchar_t>::_M_is_local (this)>>)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_M_destroy (this, ((struct basic_string *) this)->D.18784._M_allocated_capacity) >>>>>;
  }


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_local_data() [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = wchar_t*] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (wchar_t *) std::pointer_traits<wchar_t*>::pointer_to ((__type &) (wchar_t *) &((struct basic_string *) this)->D.18784._M_local_buf)>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::allocator_type& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_get_allocator() [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::allocator_type = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


return <retval> = (struct allocator_type &) (struct allocator *) &((struct basic_string *) this)->_M_dataplus;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_Alloc_hider::_Alloc_hider(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer, const _Alloc&) [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = wchar_t*] (null)
;; enabled by -tree-original


{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::allocator<wchar_t>::allocator ((struct allocator *) this, (const struct allocator &) (const struct allocator *) __a) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Alloc_hider *) this)->_M_p = __dat) >>>>>;
    }
  catch
    {
      std::allocator<wchar_t>::~allocator ((struct allocator *) this);
    }
}


;; Function bool std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_is_local() const [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (const wchar_t *) std::__cxx11::basic_string<wchar_t>::_M_data (this) == std::__cxx11::basic_string<wchar_t>::_M_local_data (this)>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_data(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer) [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = wchar_t*] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string *) this)->_M_dataplus._M_p = __p) >>>>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_capacity(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string *) this)->D.18784._M_allocated_capacity = __capacity) >>>>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_length(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string *) this)->_M_string_length = __length) >>>>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_set_length(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_M_length (this, __n) >>>>>;
<<cleanup_point <<< Unknown tree: expr_stmt
  std::char_traits<wchar_t>::assign ((char_type &) (std::__cxx11::basic_string<wchar_t>::_M_data (this) + (sizetype) (__n * 4)), (const char_type &) &TARGET_EXPR <D.55032, 0>) >>>>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_data() const [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = char16_t*] (null)
;; enabled by -tree-original


return <retval> = (char16_t *) ((const struct basic_string *) this)->_M_dataplus._M_p;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_data() const [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = char32_t*] (null)
;; enabled by -tree-original


return <retval> = (char32_t *) ((const struct basic_string *) this)->_M_dataplus._M_p;


;; Function __gnu_cxx::new_allocator<_Tp>::new_allocator() [with _Tp = char] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    
  }
   >>>;


;; Function __gnu_cxx::new_allocator<_Tp>::~new_allocator() [with _Tp = char] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    
  }
  <D.55039>:;
   >>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(_InIterator, _InIterator) [with _InIterator = const char*; _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


{
  typedef struct _Integral _Integral;

  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_construct_aux<const char*> (this, __beg, __end, TARGET_EXPR <D.55077, {}>;, <<< Unknown tree: empty_class_expr >>>;) >>>>>;
}


;; Function __gnu_cxx::new_allocator<_Tp>::new_allocator() [with _Tp = wchar_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    
  }
   >>>;


;; Function __gnu_cxx::new_allocator<_Tp>::~new_allocator() [with _Tp = wchar_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    
  }
  <D.55120>:;
   >>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(_InIterator, _InIterator) [with _InIterator = const wchar_t*; _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


{
  typedef struct _Integral _Integral;

  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_M_construct_aux<const wchar_t*> (this, __beg, __end, TARGET_EXPR <D.55134, {}>;, <<< Unknown tree: empty_class_expr >>>;) >>>>>;
}


;; Function __gnu_cxx::new_allocator<_Tp>::new_allocator() [with _Tp = char16_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    
  }
   >>>;


;; Function __gnu_cxx::new_allocator<_Tp>::~new_allocator() [with _Tp = char16_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    
  }
  <D.55144>:;
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_local_data() [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = char16_t*] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (char16_t *) std::pointer_traits<char16_t*>::pointer_to ((__type &) (char16_t *) &((struct basic_string *) this)->D.20554._M_local_buf)>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_Alloc_hider::_Alloc_hider(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer, const _Alloc&) [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = char16_t*] (null)
;; enabled by -tree-original


{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::allocator<char16_t>::allocator ((struct allocator *) this, (const struct allocator &) (const struct allocator *) __a) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Alloc_hider *) this)->_M_p = __dat) >>>>>;
    }
  catch
    {
      std::allocator<char16_t>::~allocator ((struct allocator *) this);
    }
}


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(_InIterator, _InIterator) [with _InIterator = const char16_t*; _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>] (null)
;; enabled by -tree-original


{
  typedef struct _Integral _Integral;

  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char16_t>::_M_construct_aux<const char16_t*> (this, __beg, __end, TARGET_EXPR <D.55192, {}>;, <<< Unknown tree: empty_class_expr >>>;) >>>>>;
}


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_dispose() [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>] (null)
;; enabled by -tree-original


if (<<cleanup_point !std::__cxx11::basic_string<char16_t>::_M_is_local (this)>>)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char16_t>::_M_destroy (this, ((struct basic_string *) this)->D.20554._M_allocated_capacity) >>>>>;
  }


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::allocator_type& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_get_allocator() [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::allocator_type = std::allocator<char16_t>] (null)
;; enabled by -tree-original


return <retval> = (struct allocator_type &) (struct allocator *) &((struct basic_string *) this)->_M_dataplus;


;; Function bool std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_is_local() const [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (const char16_t *) std::__cxx11::basic_string<char16_t>::_M_data (this) == std::__cxx11::basic_string<char16_t>::_M_local_data (this)>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_data(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer) [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = char16_t*] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string *) this)->_M_dataplus._M_p = __p) >>>>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_capacity(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string *) this)->D.20554._M_allocated_capacity = __capacity) >>>>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_length(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string *) this)->_M_string_length = __length) >>>>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_set_length(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char16_t>::_M_length (this, __n) >>>>>;
<<cleanup_point <<< Unknown tree: expr_stmt
  std::char_traits<char16_t>::assign ((char_type &) (std::__cxx11::basic_string<char16_t>::_M_data (this) + (sizetype) (__n * 2)), (const char_type &) &TARGET_EXPR <D.55205, 0>) >>>>>;


;; Function __gnu_cxx::new_allocator<_Tp>::new_allocator() [with _Tp = char32_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    
  }
   >>>;


;; Function __gnu_cxx::new_allocator<_Tp>::~new_allocator() [with _Tp = char32_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    
  }
  <D.55210>:;
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_local_data() [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = char32_t*] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (char32_t *) std::pointer_traits<char32_t*>::pointer_to ((__type &) (char32_t *) &((struct basic_string *) this)->D.21840._M_local_buf)>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_Alloc_hider::_Alloc_hider(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer, const _Alloc&) [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = char32_t*] (null)
;; enabled by -tree-original


{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::allocator<char32_t>::allocator ((struct allocator *) this, (const struct allocator &) (const struct allocator *) __a) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Alloc_hider *) this)->_M_p = __dat) >>>>>;
    }
  catch
    {
      std::allocator<char32_t>::~allocator ((struct allocator *) this);
    }
}


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(_InIterator, _InIterator) [with _InIterator = const char32_t*; _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>] (null)
;; enabled by -tree-original


{
  typedef struct _Integral _Integral;

  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char32_t>::_M_construct_aux<const char32_t*> (this, __beg, __end, TARGET_EXPR <D.55258, {}>;, <<< Unknown tree: empty_class_expr >>>;) >>>>>;
}


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_dispose() [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>] (null)
;; enabled by -tree-original


if (<<cleanup_point !std::__cxx11::basic_string<char32_t>::_M_is_local (this)>>)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char32_t>::_M_destroy (this, ((struct basic_string *) this)->D.21840._M_allocated_capacity) >>>>>;
  }


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::allocator_type& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_get_allocator() [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::allocator_type = std::allocator<char32_t>] (null)
;; enabled by -tree-original


return <retval> = (struct allocator_type &) (struct allocator *) &((struct basic_string *) this)->_M_dataplus;


;; Function bool std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_is_local() const [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (const char32_t *) std::__cxx11::basic_string<char32_t>::_M_data (this) == std::__cxx11::basic_string<char32_t>::_M_local_data (this)>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_data(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer) [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = char32_t*] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string *) this)->_M_dataplus._M_p = __p) >>>>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_capacity(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string *) this)->D.21840._M_allocated_capacity = __capacity) >>>>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_length(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string *) this)->_M_string_length = __length) >>>>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_set_length(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char32_t>::_M_length (this, __n) >>>>>;
<<cleanup_point <<< Unknown tree: expr_stmt
  std::char_traits<char32_t>::assign ((char_type &) (std::__cxx11::basic_string<char32_t>::_M_data (this) + (sizetype) (__n * 4)), (const char_type &) &TARGET_EXPR <D.55271, 0>) >>>>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_Alloc_hider::_Alloc_hider (&((struct basic_string *) this)->_M_dataplus, std::__cxx11::basic_string<char>::_M_local_data (this), (const struct allocator &) (const struct allocator_type *) std::__cxx11::basic_string<char>::_M_get_allocator ((const struct basic_string *) __str)) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_construct<char*> (this, std::__cxx11::basic_string<char>::_M_data ((const struct basic_string *) __str), std::__cxx11::basic_string<char>::_M_data ((const struct basic_string *) __str) + (sizetype) std::__cxx11::basic_string<char>::length ((const struct basic_string *) __str)) >>>>>;
    }
  catch
    {
      std::__cxx11::basic_string<char>::_Alloc_hider::~_Alloc_hider (&((struct basic_string *) this)->_M_dataplus);
    }
}


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::append(const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


{
  const size_type __n;

    const size_type __n;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__n = std::char_traits<char>::length (__s)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_check_length (this, 0, (size_type) __n, (const char *) "basic_string::append") >>>>>;
  <<cleanup_point return <retval> = (struct basic_string &) (struct basic_string *) std::__cxx11::basic_string<char>::_M_append (this, __s, (size_type) __n)>>;
}


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size() const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_type) ((const struct basic_string *) this)->_M_string_length
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::capacity() const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::__cxx11::basic_string<char>::_M_is_local (this) ? 15 : (size_type) ((const struct basic_string *) this)->D.17414._M_allocated_capacity>>
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::insert(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (struct basic_string &) (struct basic_string *) std::__cxx11::basic_string<char>::replace (this, __pos1, 0, (const char *) std::__cxx11::basic_string<char>::_M_data ((const struct basic_string *) __str), std::__cxx11::basic_string<char>::size ((const struct basic_string *) __str))>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::append(const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (struct basic_string &) (struct basic_string *) std::__cxx11::basic_string<char>::_M_append (this, (const char *) std::__cxx11::basic_string<char>::_M_data ((const struct basic_string *) __str), std::__cxx11::basic_string<char>::size ((const struct basic_string *) __str))>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::insert(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (struct basic_string &) (struct basic_string *) std::__cxx11::basic_string<char>::replace (this, __pos, 0, __s, std::char_traits<char>::length (__s))>>;


;; Function std::_Sp_counted_base<_Lp>::~_Sp_counted_base() [with __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0u] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Sp_counted_base *) this)->_vptr._Sp_counted_base = &_ZTVSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE + 16) >>>>>;
    try
      {
        
      }
    finally
      {
        *(struct 
        {
          int (*__vtbl_ptr_type) () * _vptr._Sp_counted_base;
          _Atomic_word _M_use_count;
          _Atomic_word _M_weak_count;
        } &) this = {CLOBBER};
      }
  }
  <D.55283>:;
  if ((__in_chrg & 1) != 0)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  operator delete ((void *) this, 16) >>>>>;
    }
   >>>;


;; Function void std::_Sp_counted_base<_Lp>::_M_release() [with __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)2u] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  if (<<cleanup_point __gnu_cxx::__exchange_and_add_dispatch (&((struct _Sp_counted_base *) this)->_M_use_count, -1) == 1>>)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  OBJ_TYPE_REF(*(((struct _Sp_counted_base *) this)->_vptr._Sp_counted_base + 16);(struct _Sp_counted_base)this->2) (this) >>>>>;
      if (0)
        {
          <<cleanup_point __asm__ __volatile__("":::"memory")>>;
          <<cleanup_point __asm__ __volatile__("":::"memory")>>;
        }
      if (<<cleanup_point __gnu_cxx::__exchange_and_add_dispatch (&((struct _Sp_counted_base *) this)->_M_weak_count, -1) == 1>>)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  OBJ_TYPE_REF(*(((struct _Sp_counted_base *) this)->_vptr._Sp_counted_base + 24);(struct _Sp_counted_base)this->3) (this) >>>>>;
        }
    }
   >>>;


;; Function void std::basic_ios<_CharT, _Traits>::setstate(std::ios_base::iostate) [with _CharT = char; _Traits = std::char_traits<char>; std::ios_base::iostate = std::_Ios_Iostate] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::basic_ios<char>::clear (this, std::operator| (std::basic_ios<char>::rdstate (this), __state)) >>>>>;


;; Function std::basic_ios<_CharT, _Traits>::char_type std::basic_ios<_CharT, _Traits>::widen(char) const [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ios<_CharT, _Traits>::char_type = char] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::ctype<char>::widen ((const struct ctype *) std::__check_facet<std::ctype<char> > ((const struct __ctype_type *) ((const struct basic_ios *) this)->_M_ctype), (int) __c)>>;


;; Function std::basic_ostream<_CharT, _Traits>& std::flush(std::basic_ostream<_CharT, _Traits>&) [with _CharT = char; _Traits = std::char_traits<char>] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (struct basic_ostream &) (struct basic_ostream *) std::basic_ostream<char>::flush ((struct basic_ostream *) __os)>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(_InIterator, _InIterator) [with _InIterator = char*; _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


{
  typedef struct _Integral _Integral;

  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_construct_aux<char*> (this, __beg, __end, TARGET_EXPR <D.55314, {}>;, <<< Unknown tree: empty_class_expr >>>;) >>>>>;
}


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_destroy(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::allocator_traits<std::allocator<char> >::deallocate ((struct allocator_type &) (struct allocator_type *) std::__cxx11::basic_string<char>::_M_get_allocator (this), std::__cxx11::basic_string<char>::_M_data (this), __size + 1) >>>>>
   >>>;


;; Function static _Tp* std::pointer_traits<_Tp*>::pointer_to(typename std::__ptrtr_not_void<_Tp>::__type&) [with _Tp = char; std::pointer_traits<_Tp*>::pointer = char*; typename std::__ptrtr_not_void<_Tp>::__type = char] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (char *) std::addressof<char> ((char &) (__type *) __r)>>
   >>>;


;; Function std::allocator< <template-parameter-1-1> >::allocator(const std::allocator< <template-parameter-1-1> >&) [with _Tp = char] (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::new_allocator<char>::new_allocator ((struct new_allocator *) this, (const struct new_allocator &) (const struct new_allocator *) (const struct allocator *) __a) >>>>>;
    try
      {
        
      }
    catch
      {
        __gnu_cxx::new_allocator<char>::~new_allocator ((struct new_allocator *) this);
      }
  }
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_local_data() const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_pointer = const char*] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (const char *) std::pointer_traits<const char*>::pointer_to ((const __type &) (const char *) &((const struct basic_string *) this)->D.17414._M_local_buf)>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(_InIterator, _InIterator) [with _InIterator = wchar_t*; _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


{
  typedef struct _Integral _Integral;

  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_M_construct_aux<wchar_t*> (this, __beg, __end, TARGET_EXPR <D.55375, {}>;, <<< Unknown tree: empty_class_expr >>>;) >>>>>;
}


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_destroy(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::allocator_traits<std::allocator<wchar_t> >::deallocate ((struct allocator_type &) (struct allocator_type *) std::__cxx11::basic_string<wchar_t>::_M_get_allocator (this), std::__cxx11::basic_string<wchar_t>::_M_data (this), __size + 1) >>>>>
   >>>;


;; Function static _Tp* std::pointer_traits<_Tp*>::pointer_to(typename std::__ptrtr_not_void<_Tp>::__type&) [with _Tp = wchar_t; std::pointer_traits<_Tp*>::pointer = wchar_t*; typename std::__ptrtr_not_void<_Tp>::__type = wchar_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (wchar_t *) std::addressof<wchar_t> ((wchar_t &) (__type *) __r)>>
   >>>;


;; Function std::allocator< <template-parameter-1-1> >::allocator(const std::allocator< <template-parameter-1-1> >&) [with _Tp = wchar_t] (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::new_allocator<wchar_t>::new_allocator ((struct new_allocator *) this, (const struct new_allocator &) (const struct new_allocator *) (const struct allocator *) __a) >>>>>;
    try
      {
        
      }
    catch
      {
        __gnu_cxx::new_allocator<wchar_t>::~new_allocator ((struct new_allocator *) this);
      }
  }
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_local_data() const [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_pointer = const wchar_t*] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (const wchar_t *) std::pointer_traits<const wchar_t*>::pointer_to ((const __type &) (const wchar_t *) &((const struct basic_string *) this)->D.18784._M_local_buf)>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct_aux(_InIterator, _InIterator, std::__false_type) [with _InIterator = const char*; _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


{
  typedef struct _Tag _Tag;

  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_construct<const char*> (this, __beg, __end, TARGET_EXPR <D.55540, *(struct forward_iterator_tag &) (struct forward_iterator_tag *) NON_LVALUE_EXPR <(struct forward_iterator_tag &) &TARGET_EXPR <D.55520, {}>>>;, <<< Unknown tree: empty_class_expr >>>;) >>>>>;
}


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct_aux(_InIterator, _InIterator, std::__false_type) [with _InIterator = const wchar_t*; _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


{
  typedef struct _Tag _Tag;

  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_M_construct<const wchar_t*> (this, __beg, __end, TARGET_EXPR <D.55562, *(struct forward_iterator_tag &) (struct forward_iterator_tag *) NON_LVALUE_EXPR <(struct forward_iterator_tag &) &TARGET_EXPR <D.55551, {}>>>;, <<< Unknown tree: empty_class_expr >>>;) >>>>>;
}


;; Function static _Tp* std::pointer_traits<_Tp*>::pointer_to(typename std::__ptrtr_not_void<_Tp>::__type&) [with _Tp = char16_t; std::pointer_traits<_Tp*>::pointer = char16_t*; typename std::__ptrtr_not_void<_Tp>::__type = char16_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (char16_t *) std::addressof<char16_t> ((char16_t &) (__type *) __r)>>
   >>>;


;; Function std::allocator< <template-parameter-1-1> >::allocator(const std::allocator< <template-parameter-1-1> >&) [with _Tp = char16_t] (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::new_allocator<char16_t>::new_allocator ((struct new_allocator *) this, (const struct new_allocator &) (const struct new_allocator *) (const struct allocator *) __a) >>>>>;
    try
      {
        
      }
    catch
      {
        __gnu_cxx::new_allocator<char16_t>::~new_allocator ((struct new_allocator *) this);
      }
  }
   >>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct_aux(_InIterator, _InIterator, std::__false_type) [with _InIterator = const char16_t*; _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>] (null)
;; enabled by -tree-original


{
  typedef struct _Tag _Tag;

  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char16_t>::_M_construct<const char16_t*> (this, __beg, __end, TARGET_EXPR <D.55599, *(struct forward_iterator_tag &) (struct forward_iterator_tag *) NON_LVALUE_EXPR <(struct forward_iterator_tag &) &TARGET_EXPR <D.55588, {}>>>;, <<< Unknown tree: empty_class_expr >>>;) >>>>>;
}


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_destroy(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::allocator_traits<std::allocator<char16_t> >::deallocate ((struct allocator_type &) (struct allocator_type *) std::__cxx11::basic_string<char16_t>::_M_get_allocator (this), std::__cxx11::basic_string<char16_t>::_M_data (this), __size + 1) >>>>>
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_local_data() const [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_pointer = const char16_t*] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (const char16_t *) std::pointer_traits<const char16_t*>::pointer_to ((const __type &) (const char16_t *) &((const struct basic_string *) this)->D.20554._M_local_buf)>>;


;; Function static _Tp* std::pointer_traits<_Tp*>::pointer_to(typename std::__ptrtr_not_void<_Tp>::__type&) [with _Tp = char32_t; std::pointer_traits<_Tp*>::pointer = char32_t*; typename std::__ptrtr_not_void<_Tp>::__type = char32_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (char32_t *) std::addressof<char32_t> ((char32_t &) (__type *) __r)>>
   >>>;


;; Function std::allocator< <template-parameter-1-1> >::allocator(const std::allocator< <template-parameter-1-1> >&) [with _Tp = char32_t] (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::new_allocator<char32_t>::new_allocator ((struct new_allocator *) this, (const struct new_allocator &) (const struct new_allocator *) (const struct allocator *) __a) >>>>>;
    try
      {
        
      }
    catch
      {
        __gnu_cxx::new_allocator<char32_t>::~new_allocator ((struct new_allocator *) this);
      }
  }
   >>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct_aux(_InIterator, _InIterator, std::__false_type) [with _InIterator = const char32_t*; _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>] (null)
;; enabled by -tree-original


{
  typedef struct _Tag _Tag;

  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char32_t>::_M_construct<const char32_t*> (this, __beg, __end, TARGET_EXPR <D.55668, *(struct forward_iterator_tag &) (struct forward_iterator_tag *) NON_LVALUE_EXPR <(struct forward_iterator_tag &) &TARGET_EXPR <D.55657, {}>>>;, <<< Unknown tree: empty_class_expr >>>;) >>>>>;
}


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_destroy(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::allocator_traits<std::allocator<char32_t> >::deallocate ((struct allocator_type &) (struct allocator_type *) std::__cxx11::basic_string<char32_t>::_M_get_allocator (this), std::__cxx11::basic_string<char32_t>::_M_data (this), __size + 1) >>>>>
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_local_data() const [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_pointer = const char32_t*] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (const char32_t *) std::pointer_traits<const char32_t*>::pointer_to ((const __type &) (const char32_t *) &((const struct basic_string *) this)->D.21840._M_local_buf)>>;


;; Function const allocator_type& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_get_allocator() const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::allocator_type = std::allocator<char>] (null)
;; enabled by -tree-original


return <retval> = (const struct allocator_type &) (const struct allocator *) &((const struct basic_string *) this)->_M_dataplus;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_check_length(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, const char*) const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


if (<<cleanup_point std::__cxx11::basic_string<char>::max_size (this) + (__n1 - std::__cxx11::basic_string<char>::size (this)) < __n2>>)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_length_error (*(const char * &) &__s) >>>>>;
  }


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, const _CharT*, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (struct basic_string &) (struct basic_string *) std::__cxx11::basic_string<char>::_M_replace (this, std::__cxx11::basic_string<char>::_M_check (this, __pos, (const char *) "basic_string::replace"), std::__cxx11::basic_string<char>::_M_limit (this, __pos, __n1), __s, __n2)>>;


;; Function void std::_Sp_counted_base<_Lp>::_M_destroy() [with __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)2u] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  if ((struct _Sp_counted_base *) this != 0B)
    {
      OBJ_TYPE_REF(*(((struct _Sp_counted_base *) this)->_vptr._Sp_counted_base + 8);(struct _Sp_counted_base)this->1) (this);
    }
  else
    {
      <<< Unknown tree: void_cst >>>
    } >>>>>
   >>>;


;; Function std::ios_base::iostate std::basic_ios<_CharT, _Traits>::rdstate() const [with _CharT = char; _Traits = std::char_traits<char>; std::ios_base::iostate = std::_Ios_Iostate] (null)
;; enabled by -tree-original


return <retval> = (iostate) ((const struct basic_ios *) this)->D.31198._M_streambuf_state;


;; Function const _Facet& std::__check_facet(const _Facet*) [with _Facet = std::ctype<char>] (null)
;; enabled by -tree-original


if (__f == 0B)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_bad_cast () >>>>>;
  }
return <retval> = (const struct ctype &) NON_LVALUE_EXPR <__f>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct_aux(_InIterator, _InIterator, std::__false_type) [with _InIterator = char*; _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


{
  typedef struct _Tag _Tag;

  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_construct<char*> (this, __beg, __end, TARGET_EXPR <D.55720, *(struct forward_iterator_tag &) (struct forward_iterator_tag *) NON_LVALUE_EXPR <(struct forward_iterator_tag &) &TARGET_EXPR <D.55709, {}>>>;, <<< Unknown tree: empty_class_expr >>>;) >>>>>;
}


;; Function static void std::allocator_traits<std::allocator<_CharT> >::deallocate(std::allocator_traits<std::allocator<_CharT> >::allocator_type&, std::allocator_traits<std::allocator<_CharT> >::pointer, std::allocator_traits<std::allocator<_CharT> >::size_type) [with _Tp = char; std::allocator_traits<std::allocator<_CharT> >::allocator_type = std::allocator<char>; std::allocator_traits<std::allocator<_CharT> >::pointer = char*; std::allocator_traits<std::allocator<_CharT> >::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::new_allocator<char>::deallocate ((struct new_allocator *) (struct allocator_type *) __a, __p, __n) >>>>>;


;; Function _Tp* std::addressof(_Tp&) [with _Tp = char] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::__addressof<char> ((char &) (char *) __r)>>
   >>>;


;; Function __gnu_cxx::new_allocator<_Tp>::new_allocator(const __gnu_cxx::new_allocator<_Tp>&) [with _Tp = char] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    
  }
   >>>;


;; Function static _Tp* std::pointer_traits<_Tp*>::pointer_to(typename std::__ptrtr_not_void<_Tp>::__type&) [with _Tp = const char; std::pointer_traits<_Tp*>::pointer = const char*; typename std::__ptrtr_not_void<_Tp>::__type = const char] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (const char *) std::addressof<const char> ((const char &) (const __type *) __r)>>
   >>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct_aux(_InIterator, _InIterator, std::__false_type) [with _InIterator = wchar_t*; _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


{
  typedef struct _Tag _Tag;

  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_M_construct<wchar_t*> (this, __beg, __end, TARGET_EXPR <D.55744, *(struct forward_iterator_tag &) (struct forward_iterator_tag *) NON_LVALUE_EXPR <(struct forward_iterator_tag &) &TARGET_EXPR <D.55733, {}>>>;, <<< Unknown tree: empty_class_expr >>>;) >>>>>;
}


;; Function static void std::allocator_traits<std::allocator<_CharT> >::deallocate(std::allocator_traits<std::allocator<_CharT> >::allocator_type&, std::allocator_traits<std::allocator<_CharT> >::pointer, std::allocator_traits<std::allocator<_CharT> >::size_type) [with _Tp = wchar_t; std::allocator_traits<std::allocator<_CharT> >::allocator_type = std::allocator<wchar_t>; std::allocator_traits<std::allocator<_CharT> >::pointer = wchar_t*; std::allocator_traits<std::allocator<_CharT> >::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::new_allocator<wchar_t>::deallocate ((struct new_allocator *) (struct allocator_type *) __a, __p, __n) >>>>>;


;; Function _Tp* std::addressof(_Tp&) [with _Tp = wchar_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::__addressof<wchar_t> ((wchar_t &) (wchar_t *) __r)>>
   >>>;


;; Function __gnu_cxx::new_allocator<_Tp>::new_allocator(const __gnu_cxx::new_allocator<_Tp>&) [with _Tp = wchar_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    
  }
   >>>;


;; Function static _Tp* std::pointer_traits<_Tp*>::pointer_to(typename std::__ptrtr_not_void<_Tp>::__type&) [with _Tp = const wchar_t; std::pointer_traits<_Tp*>::pointer = const wchar_t*; typename std::__ptrtr_not_void<_Tp>::__type = const wchar_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (const wchar_t *) std::addressof<const wchar_t> ((const wchar_t &) (const __type *) __r)>>
   >>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(_InIterator, _InIterator, std::forward_iterator_tag) [with _FwdIterator = const char*; _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


{
  size_type __dnew;

  if (<<cleanup_point __gnu_cxx::__is_null_pointer<const char> (__beg) && __beg != __end>>)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_logic_error ((const char *) "basic_string::_M_construct null not valid") >>>>>;
    }
    size_type __dnew;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__dnew = (size_type) std::distance<const char*> (__beg, __end)) >>>>>;
  if (__dnew > 15)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_data (this, std::__cxx11::basic_string<char>::_M_create (this, (size_type &) &__dnew, 0)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_capacity (this, __dnew) >>>>>;
    }
  <<< Unknown tree: try_block
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_S_copy_chars (std::__cxx11::basic_string<char>::_M_data (this), __beg, __end) >>>>>
  <<< Unknown tree: handler
  
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) __cxa_begin_catch (__builtin_eh_pointer (0)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_dispose (this) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  <<< Unknown tree: throw_expr
  __cxa_rethrow () >>> >>>>>;
    }
  finally
    {
      __cxa_end_catch ();
    } >>> >>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_set_length (this, __dnew) >>>>>;
}


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(_InIterator, _InIterator, std::forward_iterator_tag) [with _FwdIterator = const wchar_t*; _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


{
  size_type __dnew;

  if (<<cleanup_point __gnu_cxx::__is_null_pointer<const wchar_t> (__beg) && __beg != __end>>)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_logic_error ((const char *) "basic_string::_M_construct null not valid") >>>>>;
    }
    size_type __dnew;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__dnew = (size_type) std::distance<const wchar_t*> (__beg, __end)) >>>>>;
  if (__dnew > 3)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_M_data (this, std::__cxx11::basic_string<wchar_t>::_M_create (this, (size_type &) &__dnew, 0)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_M_capacity (this, __dnew) >>>>>;
    }
  <<< Unknown tree: try_block
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_S_copy_chars (std::__cxx11::basic_string<wchar_t>::_M_data (this), __beg, __end) >>>>>
  <<< Unknown tree: handler
  
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) __cxa_begin_catch (__builtin_eh_pointer (0)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_M_dispose (this) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  <<< Unknown tree: throw_expr
  __cxa_rethrow () >>> >>>>>;
    }
  finally
    {
      __cxa_end_catch ();
    } >>> >>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_M_set_length (this, __dnew) >>>>>;
}


;; Function _Tp* std::addressof(_Tp&) [with _Tp = char16_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::__addressof<char16_t> ((char16_t &) (char16_t *) __r)>>
   >>>;


;; Function __gnu_cxx::new_allocator<_Tp>::new_allocator(const __gnu_cxx::new_allocator<_Tp>&) [with _Tp = char16_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    
  }
   >>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(_InIterator, _InIterator, std::forward_iterator_tag) [with _FwdIterator = const char16_t*; _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>] (null)
;; enabled by -tree-original


{
  size_type __dnew;

  if (<<cleanup_point __gnu_cxx::__is_null_pointer<const char16_t> (__beg) && __beg != __end>>)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_logic_error ((const char *) "basic_string::_M_construct null not valid") >>>>>;
    }
    size_type __dnew;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__dnew = (size_type) std::distance<const char16_t*> (__beg, __end)) >>>>>;
  if (__dnew > 7)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char16_t>::_M_data (this, std::__cxx11::basic_string<char16_t>::_M_create (this, (size_type &) &__dnew, 0)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char16_t>::_M_capacity (this, __dnew) >>>>>;
    }
  <<< Unknown tree: try_block
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char16_t>::_S_copy_chars (std::__cxx11::basic_string<char16_t>::_M_data (this), __beg, __end) >>>>>
  <<< Unknown tree: handler
  
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) __cxa_begin_catch (__builtin_eh_pointer (0)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char16_t>::_M_dispose (this) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  <<< Unknown tree: throw_expr
  __cxa_rethrow () >>> >>>>>;
    }
  finally
    {
      __cxa_end_catch ();
    } >>> >>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char16_t>::_M_set_length (this, __dnew) >>>>>;
}


;; Function static void std::allocator_traits<std::allocator<_CharT> >::deallocate(std::allocator_traits<std::allocator<_CharT> >::allocator_type&, std::allocator_traits<std::allocator<_CharT> >::pointer, std::allocator_traits<std::allocator<_CharT> >::size_type) [with _Tp = char16_t; std::allocator_traits<std::allocator<_CharT> >::allocator_type = std::allocator<char16_t>; std::allocator_traits<std::allocator<_CharT> >::pointer = char16_t*; std::allocator_traits<std::allocator<_CharT> >::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::new_allocator<char16_t>::deallocate ((struct new_allocator *) (struct allocator_type *) __a, __p, __n) >>>>>;


;; Function static _Tp* std::pointer_traits<_Tp*>::pointer_to(typename std::__ptrtr_not_void<_Tp>::__type&) [with _Tp = const char16_t; std::pointer_traits<_Tp*>::pointer = const char16_t*; typename std::__ptrtr_not_void<_Tp>::__type = const char16_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (const char16_t *) std::addressof<const char16_t> ((const char16_t &) (const __type *) __r)>>
   >>>;


;; Function _Tp* std::addressof(_Tp&) [with _Tp = char32_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::__addressof<char32_t> ((char32_t &) (char32_t *) __r)>>
   >>>;


;; Function __gnu_cxx::new_allocator<_Tp>::new_allocator(const __gnu_cxx::new_allocator<_Tp>&) [with _Tp = char32_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    
  }
   >>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(_InIterator, _InIterator, std::forward_iterator_tag) [with _FwdIterator = const char32_t*; _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>] (null)
;; enabled by -tree-original


{
  size_type __dnew;

  if (<<cleanup_point __gnu_cxx::__is_null_pointer<const char32_t> (__beg) && __beg != __end>>)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_logic_error ((const char *) "basic_string::_M_construct null not valid") >>>>>;
    }
    size_type __dnew;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__dnew = (size_type) std::distance<const char32_t*> (__beg, __end)) >>>>>;
  if (__dnew > 3)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char32_t>::_M_data (this, std::__cxx11::basic_string<char32_t>::_M_create (this, (size_type &) &__dnew, 0)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char32_t>::_M_capacity (this, __dnew) >>>>>;
    }
  <<< Unknown tree: try_block
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char32_t>::_S_copy_chars (std::__cxx11::basic_string<char32_t>::_M_data (this), __beg, __end) >>>>>
  <<< Unknown tree: handler
  
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) __cxa_begin_catch (__builtin_eh_pointer (0)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char32_t>::_M_dispose (this) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  <<< Unknown tree: throw_expr
  __cxa_rethrow () >>> >>>>>;
    }
  finally
    {
      __cxa_end_catch ();
    } >>> >>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char32_t>::_M_set_length (this, __dnew) >>>>>;
}


;; Function static void std::allocator_traits<std::allocator<_CharT> >::deallocate(std::allocator_traits<std::allocator<_CharT> >::allocator_type&, std::allocator_traits<std::allocator<_CharT> >::pointer, std::allocator_traits<std::allocator<_CharT> >::size_type) [with _Tp = char32_t; std::allocator_traits<std::allocator<_CharT> >::allocator_type = std::allocator<char32_t>; std::allocator_traits<std::allocator<_CharT> >::pointer = char32_t*; std::allocator_traits<std::allocator<_CharT> >::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::new_allocator<char32_t>::deallocate ((struct new_allocator *) (struct allocator_type *) __a, __p, __n) >>>>>;


;; Function static _Tp* std::pointer_traits<_Tp*>::pointer_to(typename std::__ptrtr_not_void<_Tp>::__type&) [with _Tp = const char32_t; std::pointer_traits<_Tp*>::pointer = const char32_t*; typename std::__ptrtr_not_void<_Tp>::__type = const char32_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (const char32_t *) std::addressof<const char32_t> ((const char32_t &) (const __type *) __r)>>
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::max_size() const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (std::allocator_traits<std::allocator<char> >::max_size ((const struct allocator_type &) (const struct allocator_type *) std::__cxx11::basic_string<char>::_M_get_allocator (this)) + 18446744073709551615) / 2>>
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_check(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, const char*) const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


if (<<cleanup_point std::__cxx11::basic_string<char>::size (this) < __pos>>)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_out_of_range_fmt ((const char *) "%s: __pos (which is %zu) > this->size() (which is %zu)", __s, __pos, std::__cxx11::basic_string<char>::size (this)) >>>>>;
  }
return <retval> = __pos;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_limit(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    const bool __testoff;

        const bool __testoff;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__testoff = std::__cxx11::basic_string<char>::size (this) - __pos > __off) >>>>>;
    <<cleanup_point return <retval> = (bool) __testoff ? __off : std::__cxx11::basic_string<char>::size (this) - __pos>>;
  }
   >>>;


;; Function std::_Sp_counted_base<_Lp>::~_Sp_counted_base() [with __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)2u] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Sp_counted_base *) this)->_vptr._Sp_counted_base = &_ZTVSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE + 16) >>>>>;
    try
      {
        
      }
    finally
      {
        *(struct 
        {
          int (*__vtbl_ptr_type) () * _vptr._Sp_counted_base;
          _Atomic_word _M_use_count;
          _Atomic_word _M_weak_count;
        } &) this = {CLOBBER};
      }
  }
  <D.56455>:;
  if ((__in_chrg & 1) != 0)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  operator delete ((void *) this, 16) >>>>>;
    }
   >>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(_InIterator, _InIterator, std::forward_iterator_tag) [with _FwdIterator = char*; _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


{
  size_type __dnew;

  if (<<cleanup_point __gnu_cxx::__is_null_pointer<char> (__beg) && __beg != __end>>)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_logic_error ((const char *) "basic_string::_M_construct null not valid") >>>>>;
    }
    size_type __dnew;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__dnew = (size_type) std::distance<char*> (__beg, __end)) >>>>>;
  if (__dnew > 15)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_data (this, std::__cxx11::basic_string<char>::_M_create (this, (size_type &) &__dnew, 0)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_capacity (this, __dnew) >>>>>;
    }
  <<< Unknown tree: try_block
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_S_copy_chars (std::__cxx11::basic_string<char>::_M_data (this), __beg, __end) >>>>>
  <<< Unknown tree: handler
  
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) __cxa_begin_catch (__builtin_eh_pointer (0)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_dispose (this) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  <<< Unknown tree: throw_expr
  __cxa_rethrow () >>> >>>>>;
    }
  finally
    {
      __cxa_end_catch ();
    } >>> >>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_set_length (this, __dnew) >>>>>;
}


;; Function void __gnu_cxx::new_allocator<_Tp>::deallocate(__gnu_cxx::new_allocator<_Tp>::pointer, __gnu_cxx::new_allocator<_Tp>::size_type) [with _Tp = char; __gnu_cxx::new_allocator<_Tp>::pointer = char*; __gnu_cxx::new_allocator<_Tp>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  operator delete ((void *) __p) >>>>>;


;; Function _Tp* std::__addressof(_Tp&) [with _Tp = char] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (char *) (char &) (const char *) (const char &) __r
   >>>;


;; Function _Tp* std::addressof(_Tp&) [with _Tp = const char] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::__addressof<const char> ((const char &) (const char *) __r)>>
   >>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(_InIterator, _InIterator, std::forward_iterator_tag) [with _FwdIterator = wchar_t*; _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


{
  size_type __dnew;

  if (<<cleanup_point __gnu_cxx::__is_null_pointer<wchar_t> (__beg) && __beg != __end>>)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_logic_error ((const char *) "basic_string::_M_construct null not valid") >>>>>;
    }
    size_type __dnew;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__dnew = (size_type) std::distance<wchar_t*> (__beg, __end)) >>>>>;
  if (__dnew > 3)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_M_data (this, std::__cxx11::basic_string<wchar_t>::_M_create (this, (size_type &) &__dnew, 0)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_M_capacity (this, __dnew) >>>>>;
    }
  <<< Unknown tree: try_block
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_S_copy_chars (std::__cxx11::basic_string<wchar_t>::_M_data (this), __beg, __end) >>>>>
  <<< Unknown tree: handler
  
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) __cxa_begin_catch (__builtin_eh_pointer (0)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_M_dispose (this) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  <<< Unknown tree: throw_expr
  __cxa_rethrow () >>> >>>>>;
    }
  finally
    {
      __cxa_end_catch ();
    } >>> >>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_M_set_length (this, __dnew) >>>>>;
}


;; Function void __gnu_cxx::new_allocator<_Tp>::deallocate(__gnu_cxx::new_allocator<_Tp>::pointer, __gnu_cxx::new_allocator<_Tp>::size_type) [with _Tp = wchar_t; __gnu_cxx::new_allocator<_Tp>::pointer = wchar_t*; __gnu_cxx::new_allocator<_Tp>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  operator delete ((void *) __p) >>>>>;


;; Function _Tp* std::__addressof(_Tp&) [with _Tp = wchar_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (wchar_t *) __r
   >>>;


;; Function _Tp* std::addressof(_Tp&) [with _Tp = const wchar_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::__addressof<const wchar_t> ((const wchar_t &) (const wchar_t *) __r)>>
   >>>;


;; Function bool __gnu_cxx::__is_null_pointer(_Type*) [with _Type = const char] (null)
;; enabled by -tree-original


return <retval> = __ptr == 0B;


;; Function typename std::iterator_traits<_Iterator>::difference_type std::distance(_InputIterator, _InputIterator) [with _InputIterator = const char*; typename std::iterator_traits<_Iterator>::difference_type = long int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__distance<const char*> (__first, __last, TARGET_EXPR <D.56512, std::__iterator_category<const char*> ((const char * const &) (const char * const *) &__first)>;, <<< Unknown tree: empty_class_expr >>>;)>>;


;; Function static void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_S_copy_chars(_CharT*, const _CharT*, const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_S_copy (__p, __k1, (size_type) ((long int) __k2 - (long int) __k1)) >>>>>
   >>>;


;; Function bool __gnu_cxx::__is_null_pointer(_Type*) [with _Type = const wchar_t] (null)
;; enabled by -tree-original


return <retval> = __ptr == 0B;


;; Function typename std::iterator_traits<_Iterator>::difference_type std::distance(_InputIterator, _InputIterator) [with _InputIterator = const wchar_t*; typename std::iterator_traits<_Iterator>::difference_type = long int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__distance<const wchar_t*> (__first, __last, TARGET_EXPR <D.56526, std::__iterator_category<const wchar_t*> ((const wchar_t * const &) (const wchar_t * const *) &__first)>;, <<< Unknown tree: empty_class_expr >>>;)>>;


;; Function static void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_S_copy_chars(_CharT*, const _CharT*, const _CharT*) [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_S_copy (__p, __k1, (size_type) (((long int) __k2 - (long int) __k1) /[ex] 4)) >>>>>
   >>>;


;; Function _Tp* std::__addressof(_Tp&) [with _Tp = char16_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (char16_t *) __r
   >>>;


;; Function bool __gnu_cxx::__is_null_pointer(_Type*) [with _Type = const char16_t] (null)
;; enabled by -tree-original


return <retval> = __ptr == 0B;


;; Function typename std::iterator_traits<_Iterator>::difference_type std::distance(_InputIterator, _InputIterator) [with _InputIterator = const char16_t*; typename std::iterator_traits<_Iterator>::difference_type = long int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__distance<const char16_t*> (__first, __last, TARGET_EXPR <D.56541, std::__iterator_category<const char16_t*> ((const char16_t * const &) (const char16_t * const *) &__first)>;, <<< Unknown tree: empty_class_expr >>>;)>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_create(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type&, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = char16_t*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


if (<<cleanup_point *__capacity > std::__cxx11::basic_string<char16_t>::max_size (this)>>)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_length_error ((const char *) "basic_string::_M_create") >>>>>;
  }
if (*__capacity > __old_capacity && *__capacity < __old_capacity * 2)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__capacity = __old_capacity * 2) >>>>>;
    if (<<cleanup_point *__capacity > std::__cxx11::basic_string<char16_t>::max_size (this)>>)
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__capacity = std::__cxx11::basic_string<char16_t>::max_size (this)) >>>>>;
      }
  }
<<cleanup_point return <retval> = (char16_t *) std::allocator_traits<std::allocator<char16_t> >::allocate ((struct allocator_type &) (struct allocator_type *) std::__cxx11::basic_string<char16_t>::_M_get_allocator (this), *__capacity + 1)>>;


;; Function static void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_S_copy_chars(_CharT*, const _CharT*, const _CharT*) [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char16_t>::_S_copy (__p, __k1, (size_type) (((long int) __k2 - (long int) __k1) /[ex] 2)) >>>>>
   >>>;


;; Function void __gnu_cxx::new_allocator<_Tp>::deallocate(__gnu_cxx::new_allocator<_Tp>::pointer, __gnu_cxx::new_allocator<_Tp>::size_type) [with _Tp = char16_t; __gnu_cxx::new_allocator<_Tp>::pointer = char16_t*; __gnu_cxx::new_allocator<_Tp>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  operator delete ((void *) __p) >>>>>;


;; Function _Tp* std::addressof(_Tp&) [with _Tp = const char16_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::__addressof<const char16_t> ((const char16_t &) (const char16_t *) __r)>>
   >>>;


;; Function _Tp* std::__addressof(_Tp&) [with _Tp = char32_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (char32_t *) __r
   >>>;


;; Function bool __gnu_cxx::__is_null_pointer(_Type*) [with _Type = const char32_t] (null)
;; enabled by -tree-original


return <retval> = __ptr == 0B;


;; Function typename std::iterator_traits<_Iterator>::difference_type std::distance(_InputIterator, _InputIterator) [with _InputIterator = const char32_t*; typename std::iterator_traits<_Iterator>::difference_type = long int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__distance<const char32_t*> (__first, __last, TARGET_EXPR <D.56561, std::__iterator_category<const char32_t*> ((const char32_t * const &) (const char32_t * const *) &__first)>;, <<< Unknown tree: empty_class_expr >>>;)>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_create(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type&, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = char32_t*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


if (<<cleanup_point *__capacity > std::__cxx11::basic_string<char32_t>::max_size (this)>>)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_length_error ((const char *) "basic_string::_M_create") >>>>>;
  }
if (*__capacity > __old_capacity && *__capacity < __old_capacity * 2)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__capacity = __old_capacity * 2) >>>>>;
    if (<<cleanup_point *__capacity > std::__cxx11::basic_string<char32_t>::max_size (this)>>)
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__capacity = std::__cxx11::basic_string<char32_t>::max_size (this)) >>>>>;
      }
  }
<<cleanup_point return <retval> = (char32_t *) std::allocator_traits<std::allocator<char32_t> >::allocate ((struct allocator_type &) (struct allocator_type *) std::__cxx11::basic_string<char32_t>::_M_get_allocator (this), *__capacity + 1)>>;


;; Function static void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_S_copy_chars(_CharT*, const _CharT*, const _CharT*) [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char32_t>::_S_copy (__p, __k1, (size_type) (((long int) __k2 - (long int) __k1) /[ex] 4)) >>>>>
   >>>;


;; Function void __gnu_cxx::new_allocator<_Tp>::deallocate(__gnu_cxx::new_allocator<_Tp>::pointer, __gnu_cxx::new_allocator<_Tp>::size_type) [with _Tp = char32_t; __gnu_cxx::new_allocator<_Tp>::pointer = char32_t*; __gnu_cxx::new_allocator<_Tp>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  operator delete ((void *) __p) >>>>>;


;; Function _Tp* std::addressof(_Tp&) [with _Tp = const char32_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::__addressof<const char32_t> ((const char32_t &) (const char32_t *) __r)>>
   >>>;


;; Function static std::allocator_traits<std::allocator<_CharT> >::size_type std::allocator_traits<std::allocator<_CharT> >::max_size(const allocator_type&) [with _Tp = char; std::allocator_traits<std::allocator<_CharT> >::size_type = long unsigned int; std::allocator_traits<std::allocator<_CharT> >::allocator_type = std::allocator<char>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = __gnu_cxx::new_allocator<char>::max_size ((const struct new_allocator *) (const struct allocator_type *) __a)>>
   >>>;


;; Function bool __gnu_cxx::__is_null_pointer(_Type*) [with _Type = char] (null)
;; enabled by -tree-original


return <retval> = __ptr == 0B;


;; Function typename std::iterator_traits<_Iterator>::difference_type std::distance(_InputIterator, _InputIterator) [with _InputIterator = char*; typename std::iterator_traits<_Iterator>::difference_type = long int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__distance<char*> (__first, __last, TARGET_EXPR <D.56581, std::__iterator_category<char*> ((char * const &) (char * const *) &__first)>;, <<< Unknown tree: empty_class_expr >>>;)>>;


;; Function static void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_S_copy_chars(_CharT*, _CharT*, _CharT*) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_S_copy (__p, (const char *) __k1, (size_type) ((long int) __k2 - (long int) __k1)) >>>>>
   >>>;


;; Function _Tp* std::__addressof(_Tp&) [with _Tp = const char] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (const char *) __r
   >>>;


;; Function bool __gnu_cxx::__is_null_pointer(_Type*) [with _Type = wchar_t] (null)
;; enabled by -tree-original


return <retval> = __ptr == 0B;


;; Function typename std::iterator_traits<_Iterator>::difference_type std::distance(_InputIterator, _InputIterator) [with _InputIterator = wchar_t*; typename std::iterator_traits<_Iterator>::difference_type = long int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__distance<wchar_t*> (__first, __last, TARGET_EXPR <D.56596, std::__iterator_category<wchar_t*> ((wchar_t * const &) (wchar_t * const *) &__first)>;, <<< Unknown tree: empty_class_expr >>>;)>>;


;; Function static void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_S_copy_chars(_CharT*, _CharT*, _CharT*) [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_S_copy (__p, (const wchar_t *) __k1, (size_type) (((long int) __k2 - (long int) __k1) /[ex] 4)) >>>>>
   >>>;


;; Function _Tp* std::__addressof(_Tp&) [with _Tp = const wchar_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (const wchar_t *) __r
   >>>;


;; Function typename std::iterator_traits<_Iterator>::iterator_category std::__iterator_category(const _Iter&) [with _Iter = const char*; typename std::iterator_traits<_Iterator>::iterator_category = std::random_access_iterator_tag] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.56608, {}>>>;


;; Function typename std::iterator_traits<_Iterator>::difference_type std::__distance(_RandomAccessIterator, _RandomAccessIterator, std::random_access_iterator_tag) [with _RandomAccessIterator = const char*; typename std::iterator_traits<_Iterator>::difference_type = long int] (null)
;; enabled by -tree-original


return <retval> = (long int) __last - (long int) __first;


;; Function static void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_S_copy(_CharT*, const _CharT*, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


if (__n == 1)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::char_traits<char>::assign ((char_type &) NON_LVALUE_EXPR <__d>, (const char_type &) NON_LVALUE_EXPR <__s>) >>>>>;
  }
else
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::char_traits<char>::copy (__d, __s, __n) >>>>>;
  }


;; Function typename std::iterator_traits<_Iterator>::iterator_category std::__iterator_category(const _Iter&) [with _Iter = const wchar_t*; typename std::iterator_traits<_Iterator>::iterator_category = std::random_access_iterator_tag] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.56612, {}>>>;


;; Function typename std::iterator_traits<_Iterator>::difference_type std::__distance(_RandomAccessIterator, _RandomAccessIterator, std::random_access_iterator_tag) [with _RandomAccessIterator = const wchar_t*; typename std::iterator_traits<_Iterator>::difference_type = long int] (null)
;; enabled by -tree-original


return <retval> = ((long int) __last - (long int) __first) /[ex] 4;


;; Function static void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_S_copy(_CharT*, const _CharT*, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


if (__n == 1)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::char_traits<wchar_t>::assign ((char_type &) NON_LVALUE_EXPR <__d>, (const char_type &) NON_LVALUE_EXPR <__s>) >>>>>;
  }
else
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::char_traits<wchar_t>::copy (__d, __s, __n) >>>>>;
  }


;; Function typename std::iterator_traits<_Iterator>::iterator_category std::__iterator_category(const _Iter&) [with _Iter = const char16_t*; typename std::iterator_traits<_Iterator>::iterator_category = std::random_access_iterator_tag] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.56616, {}>>>;


;; Function typename std::iterator_traits<_Iterator>::difference_type std::__distance(_RandomAccessIterator, _RandomAccessIterator, std::random_access_iterator_tag) [with _RandomAccessIterator = const char16_t*; typename std::iterator_traits<_Iterator>::difference_type = long int] (null)
;; enabled by -tree-original


return <retval> = ((long int) __last - (long int) __first) /[ex] 2;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::max_size() const [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (std::allocator_traits<std::allocator<char16_t> >::max_size ((const struct allocator_type &) (const struct allocator_type *) std::__cxx11::basic_string<char16_t>::_M_get_allocator (this)) + 18446744073709551615) / 2>>
   >>>;


;; Function static _Tp* std::allocator_traits<std::allocator<_CharT> >::allocate(std::allocator_traits<std::allocator<_CharT> >::allocator_type&, std::allocator_traits<std::allocator<_CharT> >::size_type) [with _Tp = char16_t; std::allocator_traits<std::allocator<_CharT> >::pointer = char16_t*; std::allocator_traits<std::allocator<_CharT> >::allocator_type = std::allocator<char16_t>; std::allocator_traits<std::allocator<_CharT> >::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (char16_t *) __gnu_cxx::new_allocator<char16_t>::allocate ((struct new_allocator *) (struct allocator_type *) __a, __n, 0B)>>;


;; Function static void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_S_copy(_CharT*, const _CharT*, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


if (__n == 1)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::char_traits<char16_t>::assign ((char_type &) NON_LVALUE_EXPR <__d>, (const char_type &) NON_LVALUE_EXPR <__s>) >>>>>;
  }
else
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::char_traits<char16_t>::copy (__d, __s, __n) >>>>>;
  }


;; Function _Tp* std::__addressof(_Tp&) [with _Tp = const char16_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (const char16_t *) __r
   >>>;


;; Function typename std::iterator_traits<_Iterator>::iterator_category std::__iterator_category(const _Iter&) [with _Iter = const char32_t*; typename std::iterator_traits<_Iterator>::iterator_category = std::random_access_iterator_tag] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.56623, {}>>>;


;; Function typename std::iterator_traits<_Iterator>::difference_type std::__distance(_RandomAccessIterator, _RandomAccessIterator, std::random_access_iterator_tag) [with _RandomAccessIterator = const char32_t*; typename std::iterator_traits<_Iterator>::difference_type = long int] (null)
;; enabled by -tree-original


return <retval> = ((long int) __last - (long int) __first) /[ex] 4;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::max_size() const [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (std::allocator_traits<std::allocator<char32_t> >::max_size ((const struct allocator_type &) (const struct allocator_type *) std::__cxx11::basic_string<char32_t>::_M_get_allocator (this)) + 18446744073709551615) / 2>>
   >>>;


;; Function static _Tp* std::allocator_traits<std::allocator<_CharT> >::allocate(std::allocator_traits<std::allocator<_CharT> >::allocator_type&, std::allocator_traits<std::allocator<_CharT> >::size_type) [with _Tp = char32_t; std::allocator_traits<std::allocator<_CharT> >::pointer = char32_t*; std::allocator_traits<std::allocator<_CharT> >::allocator_type = std::allocator<char32_t>; std::allocator_traits<std::allocator<_CharT> >::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (char32_t *) __gnu_cxx::new_allocator<char32_t>::allocate ((struct new_allocator *) (struct allocator_type *) __a, __n, 0B)>>;


;; Function static void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_S_copy(_CharT*, const _CharT*, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


if (__n == 1)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::char_traits<char32_t>::assign ((char_type &) NON_LVALUE_EXPR <__d>, (const char_type &) NON_LVALUE_EXPR <__s>) >>>>>;
  }
else
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::char_traits<char32_t>::copy (__d, __s, __n) >>>>>;
  }


;; Function _Tp* std::__addressof(_Tp&) [with _Tp = const char32_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (const char32_t *) __r
   >>>;


;; Function __gnu_cxx::new_allocator<_Tp>::size_type __gnu_cxx::new_allocator<_Tp>::max_size() const [with _Tp = char; __gnu_cxx::new_allocator<_Tp>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 18446744073709551615 / 1
   >>>;


;; Function typename std::iterator_traits<_Iterator>::iterator_category std::__iterator_category(const _Iter&) [with _Iter = char*; typename std::iterator_traits<_Iterator>::iterator_category = std::random_access_iterator_tag] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.56631, {}>>>;


;; Function typename std::iterator_traits<_Iterator>::difference_type std::__distance(_RandomAccessIterator, _RandomAccessIterator, std::random_access_iterator_tag) [with _RandomAccessIterator = char*; typename std::iterator_traits<_Iterator>::difference_type = long int] (null)
;; enabled by -tree-original


return <retval> = (long int) __last - (long int) __first;


;; Function typename std::iterator_traits<_Iterator>::iterator_category std::__iterator_category(const _Iter&) [with _Iter = wchar_t*; typename std::iterator_traits<_Iterator>::iterator_category = std::random_access_iterator_tag] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.56634, {}>>>;


;; Function typename std::iterator_traits<_Iterator>::difference_type std::__distance(_RandomAccessIterator, _RandomAccessIterator, std::random_access_iterator_tag) [with _RandomAccessIterator = wchar_t*; typename std::iterator_traits<_Iterator>::difference_type = long int] (null)
;; enabled by -tree-original


return <retval> = ((long int) __last - (long int) __first) /[ex] 4;


;; Function static std::allocator_traits<std::allocator<_CharT> >::size_type std::allocator_traits<std::allocator<_CharT> >::max_size(const allocator_type&) [with _Tp = char16_t; std::allocator_traits<std::allocator<_CharT> >::size_type = long unsigned int; std::allocator_traits<std::allocator<_CharT> >::allocator_type = std::allocator<char16_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = __gnu_cxx::new_allocator<char16_t>::max_size ((const struct new_allocator *) (const struct allocator_type *) __a)>>
   >>>;


;; Function const allocator_type& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_get_allocator() const [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::allocator_type = std::allocator<char16_t>] (null)
;; enabled by -tree-original


return <retval> = (const struct allocator_type &) (const struct allocator *) &((const struct basic_string *) this)->_M_dataplus;


;; Function _Tp* __gnu_cxx::new_allocator<_Tp>::allocate(__gnu_cxx::new_allocator<_Tp>::size_type, const void*) [with _Tp = char16_t; __gnu_cxx::new_allocator<_Tp>::pointer = char16_t*; __gnu_cxx::new_allocator<_Tp>::size_type = long unsigned int] (null)
;; enabled by -tree-original


if (<<cleanup_point __gnu_cxx::new_allocator<char16_t>::max_size (this) < __n>>)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_bad_alloc () >>>>>;
  }
<<cleanup_point return <retval> = (char16_t *) operator new (2 * __n)>>;


;; Function static std::allocator_traits<std::allocator<_CharT> >::size_type std::allocator_traits<std::allocator<_CharT> >::max_size(const allocator_type&) [with _Tp = char32_t; std::allocator_traits<std::allocator<_CharT> >::size_type = long unsigned int; std::allocator_traits<std::allocator<_CharT> >::allocator_type = std::allocator<char32_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = __gnu_cxx::new_allocator<char32_t>::max_size ((const struct new_allocator *) (const struct allocator_type *) __a)>>
   >>>;


;; Function const allocator_type& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_get_allocator() const [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::allocator_type = std::allocator<char32_t>] (null)
;; enabled by -tree-original


return <retval> = (const struct allocator_type &) (const struct allocator *) &((const struct basic_string *) this)->_M_dataplus;


;; Function _Tp* __gnu_cxx::new_allocator<_Tp>::allocate(__gnu_cxx::new_allocator<_Tp>::size_type, const void*) [with _Tp = char32_t; __gnu_cxx::new_allocator<_Tp>::pointer = char32_t*; __gnu_cxx::new_allocator<_Tp>::size_type = long unsigned int] (null)
;; enabled by -tree-original


if (<<cleanup_point __gnu_cxx::new_allocator<char32_t>::max_size (this) < __n>>)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_bad_alloc () >>>>>;
  }
<<cleanup_point return <retval> = (char32_t *) operator new (4 * __n)>>;


;; Function __gnu_cxx::new_allocator<_Tp>::size_type __gnu_cxx::new_allocator<_Tp>::max_size() const [with _Tp = char16_t; __gnu_cxx::new_allocator<_Tp>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 18446744073709551615 / 2
   >>>;


;; Function __gnu_cxx::new_allocator<_Tp>::size_type __gnu_cxx::new_allocator<_Tp>::max_size() const [with _Tp = char32_t; __gnu_cxx::new_allocator<_Tp>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 18446744073709551615 / 4
   >>>;


;; Function virtual __gnu_cxx::__concurrence_wait_error::~__concurrence_wait_error() (null)
;; enabled by -tree-original


{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct __concurrence_wait_error *) this)->D.46416._vptr.exception = &_ZTVN9__gnu_cxx24__concurrence_wait_errorE + 16) >>>>>;
  try
    {
      try
        {
          
        }
      finally
        {
          std::exception::~exception (&((struct __concurrence_wait_error *) this)->D.46416);
        }
    }
  finally
    {
      *(struct 
      {
        struct 
        {
          int (*__vtbl_ptr_type) () * _vptr.exception;
        } D.46417;
      } &) this = {CLOBBER};
    }
}
<D.56645>:;
if ((__in_chrg & 1) != 0)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  operator delete ((void *) this, 8) >>>>>;
  }


;; Function virtual __gnu_cxx::__concurrence_broadcast_error::~__concurrence_broadcast_error() (null)
;; enabled by -tree-original


{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct __concurrence_broadcast_error *) this)->D.46389._vptr.exception = &_ZTVN9__gnu_cxx29__concurrence_broadcast_errorE + 16) >>>>>;
  try
    {
      try
        {
          
        }
      finally
        {
          std::exception::~exception (&((struct __concurrence_broadcast_error *) this)->D.46389);
        }
    }
  finally
    {
      *(struct 
      {
        struct 
        {
          int (*__vtbl_ptr_type) () * _vptr.exception;
        } D.46390;
      } &) this = {CLOBBER};
    }
}
<D.56654>:;
if ((__in_chrg & 1) != 0)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  operator delete ((void *) this, 8) >>>>>;
  }


;; Function virtual __gnu_cxx::__concurrence_unlock_error::~__concurrence_unlock_error() (null)
;; enabled by -tree-original


{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct __concurrence_unlock_error *) this)->D.46362._vptr.exception = &_ZTVN9__gnu_cxx26__concurrence_unlock_errorE + 16) >>>>>;
  try
    {
      try
        {
          
        }
      finally
        {
          std::exception::~exception (&((struct __concurrence_unlock_error *) this)->D.46362);
        }
    }
  finally
    {
      *(struct 
      {
        struct 
        {
          int (*__vtbl_ptr_type) () * _vptr.exception;
        } D.46363;
      } &) this = {CLOBBER};
    }
}
<D.56663>:;
if ((__in_chrg & 1) != 0)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  operator delete ((void *) this, 8) >>>>>;
  }


;; Function virtual __gnu_cxx::__concurrence_lock_error::~__concurrence_lock_error() (null)
;; enabled by -tree-original


{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct __concurrence_lock_error *) this)->D.46335._vptr.exception = &_ZTVN9__gnu_cxx24__concurrence_lock_errorE + 16) >>>>>;
  try
    {
      try
        {
          
        }
      finally
        {
          std::exception::~exception (&((struct __concurrence_lock_error *) this)->D.46335);
        }
    }
  finally
    {
      *(struct 
      {
        struct 
        {
          int (*__vtbl_ptr_type) () * _vptr.exception;
        } D.46336;
      } &) this = {CLOBBER};
    }
}
<D.56672>:;
if ((__in_chrg & 1) != 0)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  operator delete ((void *) this, 8) >>>>>;
  }


;; Function void __static_initialization_and_destruction_0(int, int) (null)
;; enabled by -tree-original


if (__initialize_p == 1)
  {
    if (__priority == 65535)
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
  std::ios_base::Init::Init (&__ioinit) >>>>>;
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) __cxa_atexit ((void (*<Tcd>) (void *)) __comp_dtor , (void *) &__ioinit, (void *) &__dso_handle) >>>>>;
      }
  }


;; Function (static initializers for atrshmlogtest02.C) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  __static_initialization_and_destruction_0 (1, 65535) >>>>>;

